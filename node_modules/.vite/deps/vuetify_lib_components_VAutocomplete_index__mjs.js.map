{
  "version": 3,
  "sources": ["../../vuetify/src/components/VAutocomplete/VAutocomplete.tsx"],
  "sourcesContent": ["// Styles\nimport './VAutocomplete.sass'\n\n// Components\nimport { makeSelectProps } from '@/components/VSelect/VSelect'\nimport { VCheckboxBtn } from '@/components/VCheckbox'\nimport { VChip } from '@/components/VChip'\nimport { VDefaultsProvider } from '@/components/VDefaultsProvider'\nimport { VList, VListItem } from '@/components/VList'\nimport { VMenu } from '@/components/VMenu'\nimport { VTextField } from '@/components/VTextField'\n\n// Composables\nimport { forwardRefs } from '@/composables/forwardRefs'\nimport { makeFilterProps, useFilter } from '@/composables/filter'\nimport { makeTransitionProps } from '@/composables/transition'\nimport { useForm } from '@/composables/form'\nimport { useItems } from '@/composables/items'\nimport { useLocale } from '@/composables/locale'\nimport { useProxiedModel } from '@/composables/proxiedModel'\n\n// Utility\nimport { computed, mergeProps, nextTick, ref, watch } from 'vue'\nimport { genericComponent, omit, useRender, wrapInArray } from '@/util'\nimport { filterVTextFieldProps, makeVTextFieldProps } from '../VTextField/VTextField'\n\n// Types\nimport type { FilterMatch } from '@/composables/filter'\nimport type { InternalItem } from '@/composables/items'\nimport type { MakeSlots, SlotsToProps } from '@/util'\nimport type { VFieldSlots } from '@/components/VField/VField'\nimport type { VInputSlots } from '@/components/VInput/VInput'\n\nfunction highlightResult (text: string, matches: FilterMatch | undefined, length: number) {\n  if (matches == null) return text\n\n  if (Array.isArray(matches)) throw new Error('Multiple matches is not implemented')\n\n  return typeof matches === 'number' && ~matches\n    ? (\n      <>\n        <span class=\"v-autocomplete__unmask\">{ text.substr(0, matches) }</span>\n        <span class=\"v-autocomplete__mask\">{ text.substr(matches, length) }</span>\n        <span class=\"v-autocomplete__unmask\">{ text.substr(matches + length) }</span>\n      </>\n    )\n    : text\n}\n\ntype Primitive = string | number | boolean | symbol\n\ntype Val <T, ReturnObject extends boolean> = T extends Primitive\n  ? T\n  : (ReturnObject extends true ? T : any)\n\ntype Value <T, ReturnObject extends boolean, Multiple extends boolean> =\n  Multiple extends true\n    ? readonly Val<T, ReturnObject>[]\n    : Val<T, ReturnObject>\n\nexport const VAutocomplete = genericComponent<new <\n  T,\n  ReturnObject extends boolean = false,\n  Multiple extends boolean = false,\n  V extends Value<T, ReturnObject, Multiple> = Value<T, ReturnObject, Multiple>\n>() => {\n  $props: {\n    items?: readonly T[]\n    returnObject?: ReturnObject\n    multiple?: Multiple\n    modelValue?: V\n    'onUpdate:modelValue'?: (val: V) => void\n  } & SlotsToProps<\n    Omit<VInputSlots & VFieldSlots, 'default'> & MakeSlots<{\n      item: [{ item: InternalItem<T>, index: number, props: Record<string, unknown> }]\n      chip: [{ item: InternalItem<T>, index: number, props: Record<string, unknown> }]\n      selection: [{ item: InternalItem<T>, index: number }]\n      'prepend-item': []\n      'append-item': []\n      'no-data': []\n    }>\n  >\n}>()({\n  name: 'VAutocomplete',\n\n  props: {\n    // TODO: implement post keyboard support\n    // autoSelectFirst: Boolean,\n    search: String,\n\n    ...makeFilterProps({ filterKeys: ['title'] }),\n    ...makeSelectProps(),\n    ...omit(makeVTextFieldProps({\n      modelValue: null,\n    }), ['validationValue', 'dirty', 'appendInnerIcon']),\n    ...makeTransitionProps({ transition: false }),\n  },\n\n  emits: {\n    'update:search': (val: any) => true,\n    'update:modelValue': (val: any) => true,\n    'update:menu': (val: boolean) => true,\n  },\n\n  setup (props, { slots }) {\n    const { t } = useLocale()\n    const vTextFieldRef = ref()\n    const isFocused = ref(false)\n    const isPristine = ref(true)\n    const vMenuRef = ref<VMenu>()\n    const _menu = useProxiedModel(props, 'menu')\n    const menu = computed({\n      get: () => _menu.value,\n      set: v => {\n        if (_menu.value && !v && vMenuRef.value?.Î¨openChildren) return\n        _menu.value = v\n      },\n    })\n    const { items, transformIn, transformOut } = useItems(props)\n    const search = useProxiedModel(props, 'search', '')\n    const model = useProxiedModel(\n      props,\n      'modelValue',\n      [],\n      v => transformIn(wrapInArray(v)),\n      v => {\n        const transformed = transformOut(v)\n        return props.multiple ? transformed : (transformed[0] ?? null)\n      }\n    )\n    const form = useForm()\n    const { filteredItems, getMatches } = useFilter(props, items, computed(() => isPristine.value ? undefined : search.value))\n    const selections = computed(() => {\n      return model.value.map(v => {\n        return items.value.find(item => props.valueComparator(item.value, v.value)) || v\n      })\n    })\n\n    const displayItems = computed(() => {\n      if (props.hideSelected) {\n        return filteredItems.value.filter(filteredItem => !selections.value.some(s => s.value === filteredItem.value))\n      }\n      return filteredItems.value\n    })\n\n    const selected = computed(() => selections.value.map(selection => selection.props.value))\n    const listRef = ref<VList>()\n\n    function onClear (e: MouseEvent) {\n      if (props.openOnClear) {\n        menu.value = true\n      }\n\n      search.value = ''\n    }\n    function onMousedownControl () {\n      if (\n        (props.hideNoData && !items.value.length) ||\n        props.readonly || form?.isReadonly.value\n      ) return\n\n      menu.value = true\n    }\n    function onKeydown (e: KeyboardEvent) {\n      if (props.readonly || form?.isReadonly.value) return\n\n      if (['Enter', 'ArrowDown', 'ArrowUp'].includes(e.key)) {\n        e.preventDefault()\n      }\n\n      if (['Enter', 'ArrowDown'].includes(e.key)) {\n        menu.value = true\n      }\n\n      if (['Escape'].includes(e.key)) {\n        menu.value = false\n      }\n\n      if (['Enter', 'Escape', 'Tab'].includes(e.key)) {\n        isPristine.value = true\n      }\n\n      if (e.key === 'ArrowDown') {\n        listRef.value?.focus('next')\n      } else if (e.key === 'ArrowUp') {\n        listRef.value?.focus('prev')\n      }\n    }\n\n    function onInput (e: InputEvent) {\n      search.value = (e.target as HTMLInputElement).value\n    }\n\n    function onAfterLeave () {\n      if (isFocused.value) isPristine.value = true\n    }\n\n    function onFocusin (e: FocusEvent) {\n      isFocused.value = true\n    }\n\n    function onFocusout (e: FocusEvent) {\n      if (e.relatedTarget == null) {\n        vTextFieldRef.value?.focus()\n      }\n    }\n\n    const isSelecting = ref(false)\n\n    function select (item: InternalItem) {\n      if (props.multiple) {\n        const index = selected.value.findIndex(selection => props.valueComparator(selection, item.value))\n\n        if (index === -1) {\n          model.value = [...model.value, item]\n          search.value = ''\n        } else {\n          const value = [...model.value]\n          value.splice(index, 1)\n          model.value = value\n        }\n      } else {\n        model.value = [item]\n\n        isSelecting.value = true\n\n        if (!slots.selection) {\n          search.value = item.title\n        }\n\n        menu.value = false\n        isPristine.value = true\n\n        nextTick(() => (isSelecting.value = false))\n      }\n    }\n\n    watch(isFocused, val => {\n      if (val) {\n        isSelecting.value = true\n        search.value = props.multiple || !!slots.selection ? '' : String(selections.value.at(-1)?.props.title ?? '')\n        isPristine.value = true\n\n        nextTick(() => isSelecting.value = false)\n      } else {\n        menu.value = false\n        search.value = ''\n      }\n    })\n\n    watch(search, val => {\n      if (!isFocused.value || isSelecting.value) return\n\n      if (val) menu.value = true\n\n      isPristine.value = !val\n    })\n\n    useRender(() => {\n      const hasChips = !!(props.chips || slots.chip)\n      const hasList = !!((!props.hideNoData || displayItems.value.length) || slots.prepend || slots.append || slots['no-data'])\n      const [textFieldProps] = filterVTextFieldProps(props)\n\n      return (\n        <VTextField\n          ref={ vTextFieldRef }\n          { ...textFieldProps }\n          modelValue={ search.value }\n          onUpdate:modelValue={ v => { if (v == null) model.value = [] } }\n          validationValue={ model.externalValue }\n          dirty={ model.value.length > 0 }\n          onInput={ onInput }\n          class={[\n            'v-autocomplete',\n            {\n              'v-autocomplete--active-menu': menu.value,\n              'v-autocomplete--chips': !!props.chips,\n              [`v-autocomplete--${props.multiple ? 'multiple' : 'single'}`]: true,\n              'v-autocomplete--selection-slot': !!slots.selection,\n            },\n          ]}\n          appendInnerIcon={ props.menuIcon }\n          readonly={ props.readonly }\n          onClick:clear={ onClear }\n          onMousedown:control={ onMousedownControl }\n          onFocus={ () => isFocused.value = true }\n          onBlur={ () => isFocused.value = false }\n          onKeydown={ onKeydown }\n        >\n          {{\n            ...slots,\n            default: () => (\n              <>\n                <VMenu\n                  ref={ vMenuRef }\n                  v-model={ menu.value }\n                  activator=\"parent\"\n                  contentClass=\"v-autocomplete__content\"\n                  eager={ props.eager }\n                  maxHeight={ 310 }\n                  openOnClick={ false }\n                  closeOnContentClick={ false }\n                  transition={ props.transition }\n                  onAfterLeave={ onAfterLeave }\n                  { ...props.menuProps }\n                >\n                  { hasList && (\n                    <VList\n                      ref={ listRef }\n                      selected={ selected.value }\n                      selectStrategy={ props.multiple ? 'independent' : 'single-independent' }\n                      onMousedown={ (e: MouseEvent) => e.preventDefault() }\n                      onFocusin={ onFocusin }\n                      onFocusout={ onFocusout }\n                    >\n                      { !displayItems.value.length && !props.hideNoData && (slots['no-data']?.() ?? (\n                        <VListItem title={ t(props.noDataText) } />\n                      )) }\n\n                      { slots['prepend-item']?.() }\n\n                      { displayItems.value.map((item, index) => slots.item?.({\n                        item,\n                        index,\n                        props: mergeProps(item.props, { onClick: () => select(item) }),\n                      }) ?? (\n                        <VListItem\n                          key={ index }\n                          { ...item.props }\n                          onClick={ () => select(item) }\n                        >\n                          {{\n                            prepend: ({ isSelected }) => props.multiple && !props.hideSelected ? (\n                              <VCheckboxBtn modelValue={ isSelected } ripple={ false } />\n                            ) : undefined,\n                            title: () => {\n                              return isPristine.value\n                                ? item.title\n                                : highlightResult(item.title, getMatches(item)?.title, search.value?.length ?? 0)\n                            },\n                          }}\n                        </VListItem>\n                      )) }\n\n                      { slots['append-item']?.() }\n                    </VList>\n                  ) }\n                </VMenu>\n\n                { selections.value.map((item, index) => {\n                  function onChipClose (e: Event) {\n                    e.stopPropagation()\n                    e.preventDefault()\n\n                    select(item)\n                  }\n\n                  const slotProps = {\n                    'onClick:close': onChipClose,\n                    modelValue: true,\n                    'onUpdate:modelValue': undefined,\n                  }\n\n                  return (\n                    <div key={ item.value } class=\"v-autocomplete__selection\">\n                      { hasChips ? (\n                        <VDefaultsProvider\n                          defaults={{\n                            VChip: {\n                              closable: props.closableChips,\n                              size: 'small',\n                              text: item.title,\n                            },\n                          }}\n                        >\n                          { slots.chip\n                            ? slots.chip({ item, index, props: slotProps })\n                            : (<VChip { ...slotProps } />)\n                          }\n                        </VDefaultsProvider>\n                      ) : (\n                        slots.selection\n                          ? slots.selection({ item, index })\n                          : (\n                            <span class=\"v-autocomplete__selection-text\">\n                              { item.title }\n                              { props.multiple && (index < selections.value.length - 1) && (\n                                <span class=\"v-autocomplete__selection-comma\">,</span>\n                              ) }\n                            </span>\n                          )\n                      )}\n                    </div>\n                  )\n                }) }\n              </>\n            ),\n          }}\n        </VTextField>\n      )\n    })\n\n    return forwardRefs({\n      isFocused,\n      isPristine,\n      menu,\n      search,\n      filteredItems,\n      select,\n    }, vTextFieldRef)\n  },\n})\n\nexport type VAutocomplete = InstanceType<typeof VAutocomplete>\n"],
  "mappings": "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",
  "names": ["highlightResult", "text", "matches", "length", "Array", "isArray", "Error", "substr", "VAutocomplete", "genericComponent", "name", "props", "search", "String", "makeFilterProps", "filterKeys", "makeSelectProps", "omit", "makeVTextFieldProps", "modelValue", "makeTransitionProps", "transition", "emits", "val", "setup", "slots", "t", "useLocale", "vTextFieldRef", "ref", "isFocused", "isPristine", "vMenuRef", "_menu", "useProxiedModel", "menu", "computed", "get", "value", "set", "v", "Î¨openChildren", "items", "transformIn", "transformOut", "useItems", "model", "wrapInArray", "transformed", "multiple", "form", "useForm", "filteredItems", "getMatches", "useFilter", "undefined", "selections", "map", "find", "item", "valueComparator", "displayItems", "hideSelected", "filter", "filteredItem", "some", "s", "selected", "selection", "listRef", "onClear", "e", "openOnClear", "onMousedownControl", "hideNoData", "readonly", "isReadonly", "onKeydown", "includes", "key", "preventDefault", "focus", "onInput", "target", "onAfterLeave", "onFocusin", "onFocusout", "relatedTarget", "isSelecting", "select", "index", "findIndex", "splice", "title", "nextTick", "watch", "at", "useRender", "hasChips", "chips", "chip", "hasList", "prepend", "append", "textFieldProps", "filterVTextFieldProps", "externalValue", "menuIcon", "default", "eager", "menuProps", "noDataText", "mergeProps", "onClick", "isSelected", "onChipClose", "stopPropagation", "slotProps", "VChip", "closable", "closableChips", "size", "forwardRefs"]
}
