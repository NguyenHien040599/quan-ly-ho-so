import {
  Fragment,
  Teleport,
  Transition,
  computed,
  createBaseVNode,
  createBlock,
  createCommentVNode,
  createElementBlock,
  createSlots,
  createTextVNode,
  createVNode,
  defineComponent,
  getCurrentScope,
  guardReactiveProps,
  isRef,
  mergeProps,
  nextTick,
  normalizeClass,
  normalizeProps,
  normalizeStyle,
  onBeforeUpdate,
  onMounted,
  onScopeDispose,
  onUnmounted,
  openBlock,
  reactive,
  ref,
  renderList,
  renderSlot,
  resolveDynamicComponent,
  toDisplayString,
  toRef,
  unref,
  useSlots,
  vShow,
  watch,
  withCtx,
  withDirectives,
  withKeys,
  withModifiers
} from "./chunk-3NMN3MUW.js";
import "./chunk-RSJERJUL.js";

// node_modules/@babel/runtime/helpers/esm/typeof.js
function _typeof(obj) {
  "@babel/helpers - typeof";
  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof(obj);
}

// node_modules/date-fns/esm/_lib/toInteger/index.js
function toInteger(dirtyNumber) {
  if (dirtyNumber === null || dirtyNumber === true || dirtyNumber === false) {
    return NaN;
  }
  var number = Number(dirtyNumber);
  if (isNaN(number)) {
    return number;
  }
  return number < 0 ? Math.ceil(number) : Math.floor(number);
}

// node_modules/date-fns/esm/_lib/requiredArgs/index.js
function requiredArgs(required, args) {
  if (args.length < required) {
    throw new TypeError(required + " argument" + (required > 1 ? "s" : "") + " required, but only " + args.length + " present");
  }
}

// node_modules/date-fns/esm/toDate/index.js
function toDate(argument) {
  requiredArgs(1, arguments);
  var argStr = Object.prototype.toString.call(argument);
  if (argument instanceof Date || _typeof(argument) === "object" && argStr === "[object Date]") {
    return new Date(argument.getTime());
  } else if (typeof argument === "number" || argStr === "[object Number]") {
    return new Date(argument);
  } else {
    if ((typeof argument === "string" || argStr === "[object String]") && typeof console !== "undefined") {
      console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments");
      console.warn(new Error().stack);
    }
    return new Date(NaN);
  }
}

// node_modules/date-fns/esm/addDays/index.js
function addDays(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var date = toDate(dirtyDate);
  var amount = toInteger(dirtyAmount);
  if (isNaN(amount)) {
    return new Date(NaN);
  }
  if (!amount) {
    return date;
  }
  date.setDate(date.getDate() + amount);
  return date;
}

// node_modules/date-fns/esm/addMonths/index.js
function addMonths(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var date = toDate(dirtyDate);
  var amount = toInteger(dirtyAmount);
  if (isNaN(amount)) {
    return new Date(NaN);
  }
  if (!amount) {
    return date;
  }
  var dayOfMonth = date.getDate();
  var endOfDesiredMonth = new Date(date.getTime());
  endOfDesiredMonth.setMonth(date.getMonth() + amount + 1, 0);
  var daysInMonth = endOfDesiredMonth.getDate();
  if (dayOfMonth >= daysInMonth) {
    return endOfDesiredMonth;
  } else {
    date.setFullYear(endOfDesiredMonth.getFullYear(), endOfDesiredMonth.getMonth(), dayOfMonth);
    return date;
  }
}

// node_modules/date-fns/esm/add/index.js
function add(dirtyDate, duration) {
  requiredArgs(2, arguments);
  if (!duration || _typeof(duration) !== "object")
    return new Date(NaN);
  var years = duration.years ? toInteger(duration.years) : 0;
  var months = duration.months ? toInteger(duration.months) : 0;
  var weeks = duration.weeks ? toInteger(duration.weeks) : 0;
  var days = duration.days ? toInteger(duration.days) : 0;
  var hours = duration.hours ? toInteger(duration.hours) : 0;
  var minutes = duration.minutes ? toInteger(duration.minutes) : 0;
  var seconds = duration.seconds ? toInteger(duration.seconds) : 0;
  var date = toDate(dirtyDate);
  var dateWithMonths = months || years ? addMonths(date, months + years * 12) : date;
  var dateWithDays = days || weeks ? addDays(dateWithMonths, days + weeks * 7) : dateWithMonths;
  var minutesToAdd = minutes + hours * 60;
  var secondsToAdd = seconds + minutesToAdd * 60;
  var msToAdd = secondsToAdd * 1e3;
  var finalDate = new Date(dateWithDays.getTime() + msToAdd);
  return finalDate;
}

// node_modules/date-fns/esm/addMilliseconds/index.js
function addMilliseconds(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var timestamp = toDate(dirtyDate).getTime();
  var amount = toInteger(dirtyAmount);
  return new Date(timestamp + amount);
}

// node_modules/date-fns/esm/_lib/defaultOptions/index.js
var defaultOptions = {};
function getDefaultOptions() {
  return defaultOptions;
}

// node_modules/date-fns/esm/startOfWeek/index.js
function startOfWeek(dirtyDate, options) {
  var _ref, _ref2, _ref3, _options$weekStartsOn, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
  requiredArgs(1, arguments);
  var defaultOptions2 = getDefaultOptions();
  var weekStartsOn = toInteger((_ref = (_ref2 = (_ref3 = (_options$weekStartsOn = options === null || options === void 0 ? void 0 : options.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.weekStartsOn) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions2.weekStartsOn) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions2.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.weekStartsOn) !== null && _ref !== void 0 ? _ref : 0);
  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
    throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");
  }
  var date = toDate(dirtyDate);
  var day = date.getDay();
  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;
  date.setDate(date.getDate() - diff);
  date.setHours(0, 0, 0, 0);
  return date;
}

// node_modules/date-fns/esm/startOfISOWeek/index.js
function startOfISOWeek(dirtyDate) {
  requiredArgs(1, arguments);
  return startOfWeek(dirtyDate, {
    weekStartsOn: 1
  });
}

// node_modules/date-fns/esm/getISOWeekYear/index.js
function getISOWeekYear(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var year = date.getFullYear();
  var fourthOfJanuaryOfNextYear = new Date(0);
  fourthOfJanuaryOfNextYear.setFullYear(year + 1, 0, 4);
  fourthOfJanuaryOfNextYear.setHours(0, 0, 0, 0);
  var startOfNextYear = startOfISOWeek(fourthOfJanuaryOfNextYear);
  var fourthOfJanuaryOfThisYear = new Date(0);
  fourthOfJanuaryOfThisYear.setFullYear(year, 0, 4);
  fourthOfJanuaryOfThisYear.setHours(0, 0, 0, 0);
  var startOfThisYear = startOfISOWeek(fourthOfJanuaryOfThisYear);
  if (date.getTime() >= startOfNextYear.getTime()) {
    return year + 1;
  } else if (date.getTime() >= startOfThisYear.getTime()) {
    return year;
  } else {
    return year - 1;
  }
}

// node_modules/date-fns/esm/startOfISOWeekYear/index.js
function startOfISOWeekYear(dirtyDate) {
  requiredArgs(1, arguments);
  var year = getISOWeekYear(dirtyDate);
  var fourthOfJanuary = new Date(0);
  fourthOfJanuary.setFullYear(year, 0, 4);
  fourthOfJanuary.setHours(0, 0, 0, 0);
  var date = startOfISOWeek(fourthOfJanuary);
  return date;
}

// node_modules/date-fns/esm/_lib/getTimezoneOffsetInMilliseconds/index.js
function getTimezoneOffsetInMilliseconds(date) {
  var utcDate = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds()));
  utcDate.setUTCFullYear(date.getFullYear());
  return date.getTime() - utcDate.getTime();
}

// node_modules/date-fns/esm/startOfDay/index.js
function startOfDay(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  date.setHours(0, 0, 0, 0);
  return date;
}

// node_modules/date-fns/esm/differenceInCalendarDays/index.js
var MILLISECONDS_IN_DAY = 864e5;
function differenceInCalendarDays(dirtyDateLeft, dirtyDateRight) {
  requiredArgs(2, arguments);
  var startOfDayLeft = startOfDay(dirtyDateLeft);
  var startOfDayRight = startOfDay(dirtyDateRight);
  var timestampLeft = startOfDayLeft.getTime() - getTimezoneOffsetInMilliseconds(startOfDayLeft);
  var timestampRight = startOfDayRight.getTime() - getTimezoneOffsetInMilliseconds(startOfDayRight);
  return Math.round((timestampLeft - timestampRight) / MILLISECONDS_IN_DAY);
}

// node_modules/date-fns/esm/addYears/index.js
function addYears(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var amount = toInteger(dirtyAmount);
  return addMonths(dirtyDate, amount * 12);
}

// node_modules/date-fns/esm/constants/index.js
var daysInYear = 365.2425;
var maxTime = Math.pow(10, 8) * 24 * 60 * 60 * 1e3;
var millisecondsInMinute = 6e4;
var millisecondsInHour = 36e5;
var millisecondsInSecond = 1e3;
var minTime = -maxTime;
var secondsInHour = 3600;
var secondsInDay = secondsInHour * 24;
var secondsInWeek = secondsInDay * 7;
var secondsInYear = secondsInDay * daysInYear;
var secondsInMonth = secondsInYear / 12;
var secondsInQuarter = secondsInMonth * 3;

// node_modules/date-fns/esm/isDate/index.js
function isDate(value) {
  requiredArgs(1, arguments);
  return value instanceof Date || _typeof(value) === "object" && Object.prototype.toString.call(value) === "[object Date]";
}

// node_modules/date-fns/esm/isValid/index.js
function isValid(dirtyDate) {
  requiredArgs(1, arguments);
  if (!isDate(dirtyDate) && typeof dirtyDate !== "number") {
    return false;
  }
  var date = toDate(dirtyDate);
  return !isNaN(Number(date));
}

// node_modules/date-fns/esm/eachDayOfInterval/index.js
function eachDayOfInterval(dirtyInterval, options) {
  var _options$step;
  requiredArgs(1, arguments);
  var interval = dirtyInterval || {};
  var startDate = toDate(interval.start);
  var endDate = toDate(interval.end);
  var endTime = endDate.getTime();
  if (!(startDate.getTime() <= endTime)) {
    throw new RangeError("Invalid interval");
  }
  var dates = [];
  var currentDate = startDate;
  currentDate.setHours(0, 0, 0, 0);
  var step = Number((_options$step = options === null || options === void 0 ? void 0 : options.step) !== null && _options$step !== void 0 ? _options$step : 1);
  if (step < 1 || isNaN(step))
    throw new RangeError("`options.step` must be a number greater than 1");
  while (currentDate.getTime() <= endTime) {
    dates.push(toDate(currentDate));
    currentDate.setDate(currentDate.getDate() + step);
    currentDate.setHours(0, 0, 0, 0);
  }
  return dates;
}

// node_modules/date-fns/esm/endOfWeek/index.js
function endOfWeek(dirtyDate, options) {
  var _ref, _ref2, _ref3, _options$weekStartsOn, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
  requiredArgs(1, arguments);
  var defaultOptions2 = getDefaultOptions();
  var weekStartsOn = toInteger((_ref = (_ref2 = (_ref3 = (_options$weekStartsOn = options === null || options === void 0 ? void 0 : options.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.weekStartsOn) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions2.weekStartsOn) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions2.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.weekStartsOn) !== null && _ref !== void 0 ? _ref : 0);
  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
    throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");
  }
  var date = toDate(dirtyDate);
  var day = date.getDay();
  var diff = (day < weekStartsOn ? -7 : 0) + 6 - (day - weekStartsOn);
  date.setDate(date.getDate() + diff);
  date.setHours(23, 59, 59, 999);
  return date;
}

// node_modules/date-fns/esm/subMilliseconds/index.js
function subMilliseconds(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var amount = toInteger(dirtyAmount);
  return addMilliseconds(dirtyDate, -amount);
}

// node_modules/date-fns/esm/_lib/getUTCDayOfYear/index.js
var MILLISECONDS_IN_DAY2 = 864e5;
function getUTCDayOfYear(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var timestamp = date.getTime();
  date.setUTCMonth(0, 1);
  date.setUTCHours(0, 0, 0, 0);
  var startOfYearTimestamp = date.getTime();
  var difference = timestamp - startOfYearTimestamp;
  return Math.floor(difference / MILLISECONDS_IN_DAY2) + 1;
}

// node_modules/date-fns/esm/_lib/startOfUTCISOWeek/index.js
function startOfUTCISOWeek(dirtyDate) {
  requiredArgs(1, arguments);
  var weekStartsOn = 1;
  var date = toDate(dirtyDate);
  var day = date.getUTCDay();
  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;
  date.setUTCDate(date.getUTCDate() - diff);
  date.setUTCHours(0, 0, 0, 0);
  return date;
}

// node_modules/date-fns/esm/_lib/getUTCISOWeekYear/index.js
function getUTCISOWeekYear(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var year = date.getUTCFullYear();
  var fourthOfJanuaryOfNextYear = new Date(0);
  fourthOfJanuaryOfNextYear.setUTCFullYear(year + 1, 0, 4);
  fourthOfJanuaryOfNextYear.setUTCHours(0, 0, 0, 0);
  var startOfNextYear = startOfUTCISOWeek(fourthOfJanuaryOfNextYear);
  var fourthOfJanuaryOfThisYear = new Date(0);
  fourthOfJanuaryOfThisYear.setUTCFullYear(year, 0, 4);
  fourthOfJanuaryOfThisYear.setUTCHours(0, 0, 0, 0);
  var startOfThisYear = startOfUTCISOWeek(fourthOfJanuaryOfThisYear);
  if (date.getTime() >= startOfNextYear.getTime()) {
    return year + 1;
  } else if (date.getTime() >= startOfThisYear.getTime()) {
    return year;
  } else {
    return year - 1;
  }
}

// node_modules/date-fns/esm/_lib/startOfUTCISOWeekYear/index.js
function startOfUTCISOWeekYear(dirtyDate) {
  requiredArgs(1, arguments);
  var year = getUTCISOWeekYear(dirtyDate);
  var fourthOfJanuary = new Date(0);
  fourthOfJanuary.setUTCFullYear(year, 0, 4);
  fourthOfJanuary.setUTCHours(0, 0, 0, 0);
  var date = startOfUTCISOWeek(fourthOfJanuary);
  return date;
}

// node_modules/date-fns/esm/_lib/getUTCISOWeek/index.js
var MILLISECONDS_IN_WEEK = 6048e5;
function getUTCISOWeek(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var diff = startOfUTCISOWeek(date).getTime() - startOfUTCISOWeekYear(date).getTime();
  return Math.round(diff / MILLISECONDS_IN_WEEK) + 1;
}

// node_modules/date-fns/esm/_lib/startOfUTCWeek/index.js
function startOfUTCWeek(dirtyDate, options) {
  var _ref, _ref2, _ref3, _options$weekStartsOn, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
  requiredArgs(1, arguments);
  var defaultOptions2 = getDefaultOptions();
  var weekStartsOn = toInteger((_ref = (_ref2 = (_ref3 = (_options$weekStartsOn = options === null || options === void 0 ? void 0 : options.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.weekStartsOn) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions2.weekStartsOn) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions2.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.weekStartsOn) !== null && _ref !== void 0 ? _ref : 0);
  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
    throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");
  }
  var date = toDate(dirtyDate);
  var day = date.getUTCDay();
  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;
  date.setUTCDate(date.getUTCDate() - diff);
  date.setUTCHours(0, 0, 0, 0);
  return date;
}

// node_modules/date-fns/esm/_lib/getUTCWeekYear/index.js
function getUTCWeekYear(dirtyDate, options) {
  var _ref, _ref2, _ref3, _options$firstWeekCon, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var year = date.getUTCFullYear();
  var defaultOptions2 = getDefaultOptions();
  var firstWeekContainsDate = toInteger((_ref = (_ref2 = (_ref3 = (_options$firstWeekCon = options === null || options === void 0 ? void 0 : options.firstWeekContainsDate) !== null && _options$firstWeekCon !== void 0 ? _options$firstWeekCon : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.firstWeekContainsDate) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions2.firstWeekContainsDate) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions2.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) !== null && _ref !== void 0 ? _ref : 1);
  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {
    throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");
  }
  var firstWeekOfNextYear = new Date(0);
  firstWeekOfNextYear.setUTCFullYear(year + 1, 0, firstWeekContainsDate);
  firstWeekOfNextYear.setUTCHours(0, 0, 0, 0);
  var startOfNextYear = startOfUTCWeek(firstWeekOfNextYear, options);
  var firstWeekOfThisYear = new Date(0);
  firstWeekOfThisYear.setUTCFullYear(year, 0, firstWeekContainsDate);
  firstWeekOfThisYear.setUTCHours(0, 0, 0, 0);
  var startOfThisYear = startOfUTCWeek(firstWeekOfThisYear, options);
  if (date.getTime() >= startOfNextYear.getTime()) {
    return year + 1;
  } else if (date.getTime() >= startOfThisYear.getTime()) {
    return year;
  } else {
    return year - 1;
  }
}

// node_modules/date-fns/esm/_lib/startOfUTCWeekYear/index.js
function startOfUTCWeekYear(dirtyDate, options) {
  var _ref, _ref2, _ref3, _options$firstWeekCon, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
  requiredArgs(1, arguments);
  var defaultOptions2 = getDefaultOptions();
  var firstWeekContainsDate = toInteger((_ref = (_ref2 = (_ref3 = (_options$firstWeekCon = options === null || options === void 0 ? void 0 : options.firstWeekContainsDate) !== null && _options$firstWeekCon !== void 0 ? _options$firstWeekCon : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.firstWeekContainsDate) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions2.firstWeekContainsDate) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions2.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) !== null && _ref !== void 0 ? _ref : 1);
  var year = getUTCWeekYear(dirtyDate, options);
  var firstWeek = new Date(0);
  firstWeek.setUTCFullYear(year, 0, firstWeekContainsDate);
  firstWeek.setUTCHours(0, 0, 0, 0);
  var date = startOfUTCWeek(firstWeek, options);
  return date;
}

// node_modules/date-fns/esm/_lib/getUTCWeek/index.js
var MILLISECONDS_IN_WEEK2 = 6048e5;
function getUTCWeek(dirtyDate, options) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var diff = startOfUTCWeek(date, options).getTime() - startOfUTCWeekYear(date, options).getTime();
  return Math.round(diff / MILLISECONDS_IN_WEEK2) + 1;
}

// node_modules/date-fns/esm/_lib/addLeadingZeros/index.js
function addLeadingZeros(number, targetLength) {
  var sign = number < 0 ? "-" : "";
  var output = Math.abs(number).toString();
  while (output.length < targetLength) {
    output = "0" + output;
  }
  return sign + output;
}

// node_modules/date-fns/esm/_lib/format/lightFormatters/index.js
var formatters = {
  // Year
  y: function y(date, token) {
    var signedYear = date.getUTCFullYear();
    var year = signedYear > 0 ? signedYear : 1 - signedYear;
    return addLeadingZeros(token === "yy" ? year % 100 : year, token.length);
  },
  // Month
  M: function M(date, token) {
    var month = date.getUTCMonth();
    return token === "M" ? String(month + 1) : addLeadingZeros(month + 1, 2);
  },
  // Day of the month
  d: function d(date, token) {
    return addLeadingZeros(date.getUTCDate(), token.length);
  },
  // AM or PM
  a: function a(date, token) {
    var dayPeriodEnumValue = date.getUTCHours() / 12 >= 1 ? "pm" : "am";
    switch (token) {
      case "a":
      case "aa":
        return dayPeriodEnumValue.toUpperCase();
      case "aaa":
        return dayPeriodEnumValue;
      case "aaaaa":
        return dayPeriodEnumValue[0];
      case "aaaa":
      default:
        return dayPeriodEnumValue === "am" ? "a.m." : "p.m.";
    }
  },
  // Hour [1-12]
  h: function h(date, token) {
    return addLeadingZeros(date.getUTCHours() % 12 || 12, token.length);
  },
  // Hour [0-23]
  H: function H(date, token) {
    return addLeadingZeros(date.getUTCHours(), token.length);
  },
  // Minute
  m: function m(date, token) {
    return addLeadingZeros(date.getUTCMinutes(), token.length);
  },
  // Second
  s: function s(date, token) {
    return addLeadingZeros(date.getUTCSeconds(), token.length);
  },
  // Fraction of second
  S: function S(date, token) {
    var numberOfDigits = token.length;
    var milliseconds2 = date.getUTCMilliseconds();
    var fractionalSeconds = Math.floor(milliseconds2 * Math.pow(10, numberOfDigits - 3));
    return addLeadingZeros(fractionalSeconds, token.length);
  }
};
var lightFormatters_default = formatters;

// node_modules/date-fns/esm/_lib/format/formatters/index.js
var dayPeriodEnum = {
  am: "am",
  pm: "pm",
  midnight: "midnight",
  noon: "noon",
  morning: "morning",
  afternoon: "afternoon",
  evening: "evening",
  night: "night"
};
var formatters2 = {
  // Era
  G: function G(date, token, localize2) {
    var era = date.getUTCFullYear() > 0 ? 1 : 0;
    switch (token) {
      case "G":
      case "GG":
      case "GGG":
        return localize2.era(era, {
          width: "abbreviated"
        });
      case "GGGGG":
        return localize2.era(era, {
          width: "narrow"
        });
      case "GGGG":
      default:
        return localize2.era(era, {
          width: "wide"
        });
    }
  },
  // Year
  y: function y2(date, token, localize2) {
    if (token === "yo") {
      var signedYear = date.getUTCFullYear();
      var year = signedYear > 0 ? signedYear : 1 - signedYear;
      return localize2.ordinalNumber(year, {
        unit: "year"
      });
    }
    return lightFormatters_default.y(date, token);
  },
  // Local week-numbering year
  Y: function Y(date, token, localize2, options) {
    var signedWeekYear = getUTCWeekYear(date, options);
    var weekYear = signedWeekYear > 0 ? signedWeekYear : 1 - signedWeekYear;
    if (token === "YY") {
      var twoDigitYear = weekYear % 100;
      return addLeadingZeros(twoDigitYear, 2);
    }
    if (token === "Yo") {
      return localize2.ordinalNumber(weekYear, {
        unit: "year"
      });
    }
    return addLeadingZeros(weekYear, token.length);
  },
  // ISO week-numbering year
  R: function R(date, token) {
    var isoWeekYear = getUTCISOWeekYear(date);
    return addLeadingZeros(isoWeekYear, token.length);
  },
  // Extended year. This is a single number designating the year of this calendar system.
  // The main difference between `y` and `u` localizers are B.C. years:
  // | Year | `y` | `u` |
  // |------|-----|-----|
  // | AC 1 |   1 |   1 |
  // | BC 1 |   1 |   0 |
  // | BC 2 |   2 |  -1 |
  // Also `yy` always returns the last two digits of a year,
  // while `uu` pads single digit years to 2 characters and returns other years unchanged.
  u: function u(date, token) {
    var year = date.getUTCFullYear();
    return addLeadingZeros(year, token.length);
  },
  // Quarter
  Q: function Q(date, token, localize2) {
    var quarter = Math.ceil((date.getUTCMonth() + 1) / 3);
    switch (token) {
      case "Q":
        return String(quarter);
      case "QQ":
        return addLeadingZeros(quarter, 2);
      case "Qo":
        return localize2.ordinalNumber(quarter, {
          unit: "quarter"
        });
      case "QQQ":
        return localize2.quarter(quarter, {
          width: "abbreviated",
          context: "formatting"
        });
      case "QQQQQ":
        return localize2.quarter(quarter, {
          width: "narrow",
          context: "formatting"
        });
      case "QQQQ":
      default:
        return localize2.quarter(quarter, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  // Stand-alone quarter
  q: function q(date, token, localize2) {
    var quarter = Math.ceil((date.getUTCMonth() + 1) / 3);
    switch (token) {
      case "q":
        return String(quarter);
      case "qq":
        return addLeadingZeros(quarter, 2);
      case "qo":
        return localize2.ordinalNumber(quarter, {
          unit: "quarter"
        });
      case "qqq":
        return localize2.quarter(quarter, {
          width: "abbreviated",
          context: "standalone"
        });
      case "qqqqq":
        return localize2.quarter(quarter, {
          width: "narrow",
          context: "standalone"
        });
      case "qqqq":
      default:
        return localize2.quarter(quarter, {
          width: "wide",
          context: "standalone"
        });
    }
  },
  // Month
  M: function M2(date, token, localize2) {
    var month = date.getUTCMonth();
    switch (token) {
      case "M":
      case "MM":
        return lightFormatters_default.M(date, token);
      case "Mo":
        return localize2.ordinalNumber(month + 1, {
          unit: "month"
        });
      case "MMM":
        return localize2.month(month, {
          width: "abbreviated",
          context: "formatting"
        });
      case "MMMMM":
        return localize2.month(month, {
          width: "narrow",
          context: "formatting"
        });
      case "MMMM":
      default:
        return localize2.month(month, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  // Stand-alone month
  L: function L(date, token, localize2) {
    var month = date.getUTCMonth();
    switch (token) {
      case "L":
        return String(month + 1);
      case "LL":
        return addLeadingZeros(month + 1, 2);
      case "Lo":
        return localize2.ordinalNumber(month + 1, {
          unit: "month"
        });
      case "LLL":
        return localize2.month(month, {
          width: "abbreviated",
          context: "standalone"
        });
      case "LLLLL":
        return localize2.month(month, {
          width: "narrow",
          context: "standalone"
        });
      case "LLLL":
      default:
        return localize2.month(month, {
          width: "wide",
          context: "standalone"
        });
    }
  },
  // Local week of year
  w: function w(date, token, localize2, options) {
    var week = getUTCWeek(date, options);
    if (token === "wo") {
      return localize2.ordinalNumber(week, {
        unit: "week"
      });
    }
    return addLeadingZeros(week, token.length);
  },
  // ISO week of year
  I: function I(date, token, localize2) {
    var isoWeek = getUTCISOWeek(date);
    if (token === "Io") {
      return localize2.ordinalNumber(isoWeek, {
        unit: "week"
      });
    }
    return addLeadingZeros(isoWeek, token.length);
  },
  // Day of the month
  d: function d2(date, token, localize2) {
    if (token === "do") {
      return localize2.ordinalNumber(date.getUTCDate(), {
        unit: "date"
      });
    }
    return lightFormatters_default.d(date, token);
  },
  // Day of year
  D: function D(date, token, localize2) {
    var dayOfYear = getUTCDayOfYear(date);
    if (token === "Do") {
      return localize2.ordinalNumber(dayOfYear, {
        unit: "dayOfYear"
      });
    }
    return addLeadingZeros(dayOfYear, token.length);
  },
  // Day of week
  E: function E(date, token, localize2) {
    var dayOfWeek = date.getUTCDay();
    switch (token) {
      case "E":
      case "EE":
      case "EEE":
        return localize2.day(dayOfWeek, {
          width: "abbreviated",
          context: "formatting"
        });
      case "EEEEE":
        return localize2.day(dayOfWeek, {
          width: "narrow",
          context: "formatting"
        });
      case "EEEEEE":
        return localize2.day(dayOfWeek, {
          width: "short",
          context: "formatting"
        });
      case "EEEE":
      default:
        return localize2.day(dayOfWeek, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  // Local day of week
  e: function e(date, token, localize2, options) {
    var dayOfWeek = date.getUTCDay();
    var localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;
    switch (token) {
      case "e":
        return String(localDayOfWeek);
      case "ee":
        return addLeadingZeros(localDayOfWeek, 2);
      case "eo":
        return localize2.ordinalNumber(localDayOfWeek, {
          unit: "day"
        });
      case "eee":
        return localize2.day(dayOfWeek, {
          width: "abbreviated",
          context: "formatting"
        });
      case "eeeee":
        return localize2.day(dayOfWeek, {
          width: "narrow",
          context: "formatting"
        });
      case "eeeeee":
        return localize2.day(dayOfWeek, {
          width: "short",
          context: "formatting"
        });
      case "eeee":
      default:
        return localize2.day(dayOfWeek, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  // Stand-alone local day of week
  c: function c(date, token, localize2, options) {
    var dayOfWeek = date.getUTCDay();
    var localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;
    switch (token) {
      case "c":
        return String(localDayOfWeek);
      case "cc":
        return addLeadingZeros(localDayOfWeek, token.length);
      case "co":
        return localize2.ordinalNumber(localDayOfWeek, {
          unit: "day"
        });
      case "ccc":
        return localize2.day(dayOfWeek, {
          width: "abbreviated",
          context: "standalone"
        });
      case "ccccc":
        return localize2.day(dayOfWeek, {
          width: "narrow",
          context: "standalone"
        });
      case "cccccc":
        return localize2.day(dayOfWeek, {
          width: "short",
          context: "standalone"
        });
      case "cccc":
      default:
        return localize2.day(dayOfWeek, {
          width: "wide",
          context: "standalone"
        });
    }
  },
  // ISO day of week
  i: function i(date, token, localize2) {
    var dayOfWeek = date.getUTCDay();
    var isoDayOfWeek = dayOfWeek === 0 ? 7 : dayOfWeek;
    switch (token) {
      case "i":
        return String(isoDayOfWeek);
      case "ii":
        return addLeadingZeros(isoDayOfWeek, token.length);
      case "io":
        return localize2.ordinalNumber(isoDayOfWeek, {
          unit: "day"
        });
      case "iii":
        return localize2.day(dayOfWeek, {
          width: "abbreviated",
          context: "formatting"
        });
      case "iiiii":
        return localize2.day(dayOfWeek, {
          width: "narrow",
          context: "formatting"
        });
      case "iiiiii":
        return localize2.day(dayOfWeek, {
          width: "short",
          context: "formatting"
        });
      case "iiii":
      default:
        return localize2.day(dayOfWeek, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  // AM or PM
  a: function a2(date, token, localize2) {
    var hours = date.getUTCHours();
    var dayPeriodEnumValue = hours / 12 >= 1 ? "pm" : "am";
    switch (token) {
      case "a":
      case "aa":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "abbreviated",
          context: "formatting"
        });
      case "aaa":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "abbreviated",
          context: "formatting"
        }).toLowerCase();
      case "aaaaa":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "narrow",
          context: "formatting"
        });
      case "aaaa":
      default:
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  // AM, PM, midnight, noon
  b: function b(date, token, localize2) {
    var hours = date.getUTCHours();
    var dayPeriodEnumValue;
    if (hours === 12) {
      dayPeriodEnumValue = dayPeriodEnum.noon;
    } else if (hours === 0) {
      dayPeriodEnumValue = dayPeriodEnum.midnight;
    } else {
      dayPeriodEnumValue = hours / 12 >= 1 ? "pm" : "am";
    }
    switch (token) {
      case "b":
      case "bb":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "abbreviated",
          context: "formatting"
        });
      case "bbb":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "abbreviated",
          context: "formatting"
        }).toLowerCase();
      case "bbbbb":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "narrow",
          context: "formatting"
        });
      case "bbbb":
      default:
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  // in the morning, in the afternoon, in the evening, at night
  B: function B(date, token, localize2) {
    var hours = date.getUTCHours();
    var dayPeriodEnumValue;
    if (hours >= 17) {
      dayPeriodEnumValue = dayPeriodEnum.evening;
    } else if (hours >= 12) {
      dayPeriodEnumValue = dayPeriodEnum.afternoon;
    } else if (hours >= 4) {
      dayPeriodEnumValue = dayPeriodEnum.morning;
    } else {
      dayPeriodEnumValue = dayPeriodEnum.night;
    }
    switch (token) {
      case "B":
      case "BB":
      case "BBB":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "abbreviated",
          context: "formatting"
        });
      case "BBBBB":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "narrow",
          context: "formatting"
        });
      case "BBBB":
      default:
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  // Hour [1-12]
  h: function h2(date, token, localize2) {
    if (token === "ho") {
      var hours = date.getUTCHours() % 12;
      if (hours === 0)
        hours = 12;
      return localize2.ordinalNumber(hours, {
        unit: "hour"
      });
    }
    return lightFormatters_default.h(date, token);
  },
  // Hour [0-23]
  H: function H2(date, token, localize2) {
    if (token === "Ho") {
      return localize2.ordinalNumber(date.getUTCHours(), {
        unit: "hour"
      });
    }
    return lightFormatters_default.H(date, token);
  },
  // Hour [0-11]
  K: function K(date, token, localize2) {
    var hours = date.getUTCHours() % 12;
    if (token === "Ko") {
      return localize2.ordinalNumber(hours, {
        unit: "hour"
      });
    }
    return addLeadingZeros(hours, token.length);
  },
  // Hour [1-24]
  k: function k(date, token, localize2) {
    var hours = date.getUTCHours();
    if (hours === 0)
      hours = 24;
    if (token === "ko") {
      return localize2.ordinalNumber(hours, {
        unit: "hour"
      });
    }
    return addLeadingZeros(hours, token.length);
  },
  // Minute
  m: function m2(date, token, localize2) {
    if (token === "mo") {
      return localize2.ordinalNumber(date.getUTCMinutes(), {
        unit: "minute"
      });
    }
    return lightFormatters_default.m(date, token);
  },
  // Second
  s: function s2(date, token, localize2) {
    if (token === "so") {
      return localize2.ordinalNumber(date.getUTCSeconds(), {
        unit: "second"
      });
    }
    return lightFormatters_default.s(date, token);
  },
  // Fraction of second
  S: function S2(date, token) {
    return lightFormatters_default.S(date, token);
  },
  // Timezone (ISO-8601. If offset is 0, output is always `'Z'`)
  X: function X(date, token, _localize, options) {
    var originalDate = options._originalDate || date;
    var timezoneOffset = originalDate.getTimezoneOffset();
    if (timezoneOffset === 0) {
      return "Z";
    }
    switch (token) {
      case "X":
        return formatTimezoneWithOptionalMinutes(timezoneOffset);
      case "XXXX":
      case "XX":
        return formatTimezone(timezoneOffset);
      case "XXXXX":
      case "XXX":
      default:
        return formatTimezone(timezoneOffset, ":");
    }
  },
  // Timezone (ISO-8601. If offset is 0, output is `'+00:00'` or equivalent)
  x: function x(date, token, _localize, options) {
    var originalDate = options._originalDate || date;
    var timezoneOffset = originalDate.getTimezoneOffset();
    switch (token) {
      case "x":
        return formatTimezoneWithOptionalMinutes(timezoneOffset);
      case "xxxx":
      case "xx":
        return formatTimezone(timezoneOffset);
      case "xxxxx":
      case "xxx":
      default:
        return formatTimezone(timezoneOffset, ":");
    }
  },
  // Timezone (GMT)
  O: function O(date, token, _localize, options) {
    var originalDate = options._originalDate || date;
    var timezoneOffset = originalDate.getTimezoneOffset();
    switch (token) {
      case "O":
      case "OO":
      case "OOO":
        return "GMT" + formatTimezoneShort(timezoneOffset, ":");
      case "OOOO":
      default:
        return "GMT" + formatTimezone(timezoneOffset, ":");
    }
  },
  // Timezone (specific non-location)
  z: function z(date, token, _localize, options) {
    var originalDate = options._originalDate || date;
    var timezoneOffset = originalDate.getTimezoneOffset();
    switch (token) {
      case "z":
      case "zz":
      case "zzz":
        return "GMT" + formatTimezoneShort(timezoneOffset, ":");
      case "zzzz":
      default:
        return "GMT" + formatTimezone(timezoneOffset, ":");
    }
  },
  // Seconds timestamp
  t: function t(date, token, _localize, options) {
    var originalDate = options._originalDate || date;
    var timestamp = Math.floor(originalDate.getTime() / 1e3);
    return addLeadingZeros(timestamp, token.length);
  },
  // Milliseconds timestamp
  T: function T(date, token, _localize, options) {
    var originalDate = options._originalDate || date;
    var timestamp = originalDate.getTime();
    return addLeadingZeros(timestamp, token.length);
  }
};
function formatTimezoneShort(offset, dirtyDelimiter) {
  var sign = offset > 0 ? "-" : "+";
  var absOffset = Math.abs(offset);
  var hours = Math.floor(absOffset / 60);
  var minutes = absOffset % 60;
  if (minutes === 0) {
    return sign + String(hours);
  }
  var delimiter = dirtyDelimiter || "";
  return sign + String(hours) + delimiter + addLeadingZeros(minutes, 2);
}
function formatTimezoneWithOptionalMinutes(offset, dirtyDelimiter) {
  if (offset % 60 === 0) {
    var sign = offset > 0 ? "-" : "+";
    return sign + addLeadingZeros(Math.abs(offset) / 60, 2);
  }
  return formatTimezone(offset, dirtyDelimiter);
}
function formatTimezone(offset, dirtyDelimiter) {
  var delimiter = dirtyDelimiter || "";
  var sign = offset > 0 ? "-" : "+";
  var absOffset = Math.abs(offset);
  var hours = addLeadingZeros(Math.floor(absOffset / 60), 2);
  var minutes = addLeadingZeros(absOffset % 60, 2);
  return sign + hours + delimiter + minutes;
}
var formatters_default = formatters2;

// node_modules/date-fns/esm/_lib/format/longFormatters/index.js
var dateLongFormatter = function dateLongFormatter2(pattern, formatLong2) {
  switch (pattern) {
    case "P":
      return formatLong2.date({
        width: "short"
      });
    case "PP":
      return formatLong2.date({
        width: "medium"
      });
    case "PPP":
      return formatLong2.date({
        width: "long"
      });
    case "PPPP":
    default:
      return formatLong2.date({
        width: "full"
      });
  }
};
var timeLongFormatter = function timeLongFormatter2(pattern, formatLong2) {
  switch (pattern) {
    case "p":
      return formatLong2.time({
        width: "short"
      });
    case "pp":
      return formatLong2.time({
        width: "medium"
      });
    case "ppp":
      return formatLong2.time({
        width: "long"
      });
    case "pppp":
    default:
      return formatLong2.time({
        width: "full"
      });
  }
};
var dateTimeLongFormatter = function dateTimeLongFormatter2(pattern, formatLong2) {
  var matchResult = pattern.match(/(P+)(p+)?/) || [];
  var datePattern = matchResult[1];
  var timePattern = matchResult[2];
  if (!timePattern) {
    return dateLongFormatter(pattern, formatLong2);
  }
  var dateTimeFormat;
  switch (datePattern) {
    case "P":
      dateTimeFormat = formatLong2.dateTime({
        width: "short"
      });
      break;
    case "PP":
      dateTimeFormat = formatLong2.dateTime({
        width: "medium"
      });
      break;
    case "PPP":
      dateTimeFormat = formatLong2.dateTime({
        width: "long"
      });
      break;
    case "PPPP":
    default:
      dateTimeFormat = formatLong2.dateTime({
        width: "full"
      });
      break;
  }
  return dateTimeFormat.replace("{{date}}", dateLongFormatter(datePattern, formatLong2)).replace("{{time}}", timeLongFormatter(timePattern, formatLong2));
};
var longFormatters = {
  p: timeLongFormatter,
  P: dateTimeLongFormatter
};
var longFormatters_default = longFormatters;

// node_modules/date-fns/esm/_lib/protectedTokens/index.js
var protectedDayOfYearTokens = ["D", "DD"];
var protectedWeekYearTokens = ["YY", "YYYY"];
function isProtectedDayOfYearToken(token) {
  return protectedDayOfYearTokens.indexOf(token) !== -1;
}
function isProtectedWeekYearToken(token) {
  return protectedWeekYearTokens.indexOf(token) !== -1;
}
function throwProtectedError(token, format2, input) {
  if (token === "YYYY") {
    throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(format2, "`) for formatting years to the input `").concat(input, "`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));
  } else if (token === "YY") {
    throw new RangeError("Use `yy` instead of `YY` (in `".concat(format2, "`) for formatting years to the input `").concat(input, "`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));
  } else if (token === "D") {
    throw new RangeError("Use `d` instead of `D` (in `".concat(format2, "`) for formatting days of the month to the input `").concat(input, "`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));
  } else if (token === "DD") {
    throw new RangeError("Use `dd` instead of `DD` (in `".concat(format2, "`) for formatting days of the month to the input `").concat(input, "`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));
  }
}

// node_modules/date-fns/esm/locale/en-US/_lib/formatDistance/index.js
var formatDistanceLocale = {
  lessThanXSeconds: {
    one: "less than a second",
    other: "less than {{count}} seconds"
  },
  xSeconds: {
    one: "1 second",
    other: "{{count}} seconds"
  },
  halfAMinute: "half a minute",
  lessThanXMinutes: {
    one: "less than a minute",
    other: "less than {{count}} minutes"
  },
  xMinutes: {
    one: "1 minute",
    other: "{{count}} minutes"
  },
  aboutXHours: {
    one: "about 1 hour",
    other: "about {{count}} hours"
  },
  xHours: {
    one: "1 hour",
    other: "{{count}} hours"
  },
  xDays: {
    one: "1 day",
    other: "{{count}} days"
  },
  aboutXWeeks: {
    one: "about 1 week",
    other: "about {{count}} weeks"
  },
  xWeeks: {
    one: "1 week",
    other: "{{count}} weeks"
  },
  aboutXMonths: {
    one: "about 1 month",
    other: "about {{count}} months"
  },
  xMonths: {
    one: "1 month",
    other: "{{count}} months"
  },
  aboutXYears: {
    one: "about 1 year",
    other: "about {{count}} years"
  },
  xYears: {
    one: "1 year",
    other: "{{count}} years"
  },
  overXYears: {
    one: "over 1 year",
    other: "over {{count}} years"
  },
  almostXYears: {
    one: "almost 1 year",
    other: "almost {{count}} years"
  }
};
var formatDistance = function formatDistance2(token, count, options) {
  var result;
  var tokenValue = formatDistanceLocale[token];
  if (typeof tokenValue === "string") {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace("{{count}}", count.toString());
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return "in " + result;
    } else {
      return result + " ago";
    }
  }
  return result;
};
var formatDistance_default = formatDistance;

// node_modules/date-fns/esm/locale/_lib/buildFormatLongFn/index.js
function buildFormatLongFn(args) {
  return function() {
    var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    var width = options.width ? String(options.width) : args.defaultWidth;
    var format2 = args.formats[width] || args.formats[args.defaultWidth];
    return format2;
  };
}

// node_modules/date-fns/esm/locale/en-US/_lib/formatLong/index.js
var dateFormats = {
  full: "EEEE, MMMM do, y",
  long: "MMMM do, y",
  medium: "MMM d, y",
  short: "MM/dd/yyyy"
};
var timeFormats = {
  full: "h:mm:ss a zzzz",
  long: "h:mm:ss a z",
  medium: "h:mm:ss a",
  short: "h:mm a"
};
var dateTimeFormats = {
  full: "{{date}} 'at' {{time}}",
  long: "{{date}} 'at' {{time}}",
  medium: "{{date}}, {{time}}",
  short: "{{date}}, {{time}}"
};
var formatLong = {
  date: buildFormatLongFn({
    formats: dateFormats,
    defaultWidth: "full"
  }),
  time: buildFormatLongFn({
    formats: timeFormats,
    defaultWidth: "full"
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats,
    defaultWidth: "full"
  })
};
var formatLong_default = formatLong;

// node_modules/date-fns/esm/locale/en-US/_lib/formatRelative/index.js
var formatRelativeLocale = {
  lastWeek: "'last' eeee 'at' p",
  yesterday: "'yesterday at' p",
  today: "'today at' p",
  tomorrow: "'tomorrow at' p",
  nextWeek: "eeee 'at' p",
  other: "P"
};
var formatRelative = function formatRelative2(token, _date, _baseDate, _options) {
  return formatRelativeLocale[token];
};
var formatRelative_default = formatRelative;

// node_modules/date-fns/esm/locale/_lib/buildLocalizeFn/index.js
function buildLocalizeFn(args) {
  return function(dirtyIndex, options) {
    var context = options !== null && options !== void 0 && options.context ? String(options.context) : "standalone";
    var valuesArray;
    if (context === "formatting" && args.formattingValues) {
      var defaultWidth = args.defaultFormattingWidth || args.defaultWidth;
      var width = options !== null && options !== void 0 && options.width ? String(options.width) : defaultWidth;
      valuesArray = args.formattingValues[width] || args.formattingValues[defaultWidth];
    } else {
      var _defaultWidth = args.defaultWidth;
      var _width = options !== null && options !== void 0 && options.width ? String(options.width) : args.defaultWidth;
      valuesArray = args.values[_width] || args.values[_defaultWidth];
    }
    var index = args.argumentCallback ? args.argumentCallback(dirtyIndex) : dirtyIndex;
    return valuesArray[index];
  };
}

// node_modules/date-fns/esm/locale/en-US/_lib/localize/index.js
var eraValues = {
  narrow: ["B", "A"],
  abbreviated: ["BC", "AD"],
  wide: ["Before Christ", "Anno Domini"]
};
var quarterValues = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["Q1", "Q2", "Q3", "Q4"],
  wide: ["1st quarter", "2nd quarter", "3rd quarter", "4th quarter"]
};
var monthValues = {
  narrow: ["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"],
  abbreviated: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
  wide: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]
};
var dayValues = {
  narrow: ["S", "M", "T", "W", "T", "F", "S"],
  short: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"],
  abbreviated: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
  wide: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]
};
var dayPeriodValues = {
  narrow: {
    am: "a",
    pm: "p",
    midnight: "mi",
    noon: "n",
    morning: "morning",
    afternoon: "afternoon",
    evening: "evening",
    night: "night"
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "midnight",
    noon: "noon",
    morning: "morning",
    afternoon: "afternoon",
    evening: "evening",
    night: "night"
  },
  wide: {
    am: "a.m.",
    pm: "p.m.",
    midnight: "midnight",
    noon: "noon",
    morning: "morning",
    afternoon: "afternoon",
    evening: "evening",
    night: "night"
  }
};
var formattingDayPeriodValues = {
  narrow: {
    am: "a",
    pm: "p",
    midnight: "mi",
    noon: "n",
    morning: "in the morning",
    afternoon: "in the afternoon",
    evening: "in the evening",
    night: "at night"
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "midnight",
    noon: "noon",
    morning: "in the morning",
    afternoon: "in the afternoon",
    evening: "in the evening",
    night: "at night"
  },
  wide: {
    am: "a.m.",
    pm: "p.m.",
    midnight: "midnight",
    noon: "noon",
    morning: "in the morning",
    afternoon: "in the afternoon",
    evening: "in the evening",
    night: "at night"
  }
};
var ordinalNumber = function ordinalNumber2(dirtyNumber, _options) {
  var number = Number(dirtyNumber);
  var rem100 = number % 100;
  if (rem100 > 20 || rem100 < 10) {
    switch (rem100 % 10) {
      case 1:
        return number + "st";
      case 2:
        return number + "nd";
      case 3:
        return number + "rd";
    }
  }
  return number + "th";
};
var localize = {
  ordinalNumber,
  era: buildLocalizeFn({
    values: eraValues,
    defaultWidth: "wide"
  }),
  quarter: buildLocalizeFn({
    values: quarterValues,
    defaultWidth: "wide",
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: buildLocalizeFn({
    values: monthValues,
    defaultWidth: "wide"
  }),
  day: buildLocalizeFn({
    values: dayValues,
    defaultWidth: "wide"
  }),
  dayPeriod: buildLocalizeFn({
    values: dayPeriodValues,
    defaultWidth: "wide",
    formattingValues: formattingDayPeriodValues,
    defaultFormattingWidth: "wide"
  })
};
var localize_default = localize;

// node_modules/date-fns/esm/locale/_lib/buildMatchFn/index.js
function buildMatchFn(args) {
  return function(string) {
    var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    var width = options.width;
    var matchPattern = width && args.matchPatterns[width] || args.matchPatterns[args.defaultMatchWidth];
    var matchResult = string.match(matchPattern);
    if (!matchResult) {
      return null;
    }
    var matchedString = matchResult[0];
    var parsePatterns = width && args.parsePatterns[width] || args.parsePatterns[args.defaultParseWidth];
    var key = Array.isArray(parsePatterns) ? findIndex(parsePatterns, function(pattern) {
      return pattern.test(matchedString);
    }) : findKey(parsePatterns, function(pattern) {
      return pattern.test(matchedString);
    });
    var value;
    value = args.valueCallback ? args.valueCallback(key) : key;
    value = options.valueCallback ? options.valueCallback(value) : value;
    var rest = string.slice(matchedString.length);
    return {
      value,
      rest
    };
  };
}
function findKey(object, predicate) {
  for (var key in object) {
    if (object.hasOwnProperty(key) && predicate(object[key])) {
      return key;
    }
  }
  return void 0;
}
function findIndex(array, predicate) {
  for (var key = 0; key < array.length; key++) {
    if (predicate(array[key])) {
      return key;
    }
  }
  return void 0;
}

// node_modules/date-fns/esm/locale/_lib/buildMatchPatternFn/index.js
function buildMatchPatternFn(args) {
  return function(string) {
    var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    var matchResult = string.match(args.matchPattern);
    if (!matchResult)
      return null;
    var matchedString = matchResult[0];
    var parseResult = string.match(args.parsePattern);
    if (!parseResult)
      return null;
    var value = args.valueCallback ? args.valueCallback(parseResult[0]) : parseResult[0];
    value = options.valueCallback ? options.valueCallback(value) : value;
    var rest = string.slice(matchedString.length);
    return {
      value,
      rest
    };
  };
}

// node_modules/date-fns/esm/locale/en-US/_lib/match/index.js
var matchOrdinalNumberPattern = /^(\d+)(th|st|nd|rd)?/i;
var parseOrdinalNumberPattern = /\d+/i;
var matchEraPatterns = {
  narrow: /^(b|a)/i,
  abbreviated: /^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,
  wide: /^(before christ|before common era|anno domini|common era)/i
};
var parseEraPatterns = {
  any: [/^b/i, /^(a|c)/i]
};
var matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^q[1234]/i,
  wide: /^[1234](th|st|nd|rd)? quarter/i
};
var parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var matchMonthPatterns = {
  narrow: /^[jfmasond]/i,
  abbreviated: /^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,
  wide: /^(january|february|march|april|may|june|july|august|september|october|november|december)/i
};
var parseMonthPatterns = {
  narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
  any: [/^ja/i, /^f/i, /^mar/i, /^ap/i, /^may/i, /^jun/i, /^jul/i, /^au/i, /^s/i, /^o/i, /^n/i, /^d/i]
};
var matchDayPatterns = {
  narrow: /^[smtwf]/i,
  short: /^(su|mo|tu|we|th|fr|sa)/i,
  abbreviated: /^(sun|mon|tue|wed|thu|fri|sat)/i,
  wide: /^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i
};
var parseDayPatterns = {
  narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],
  any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i]
};
var matchDayPeriodPatterns = {
  narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,
  any: /^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i
};
var parseDayPeriodPatterns = {
  any: {
    am: /^a/i,
    pm: /^p/i,
    midnight: /^mi/i,
    noon: /^no/i,
    morning: /morning/i,
    afternoon: /afternoon/i,
    evening: /evening/i,
    night: /night/i
  }
};
var match = {
  ordinalNumber: buildMatchPatternFn({
    matchPattern: matchOrdinalNumberPattern,
    parsePattern: parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: buildMatchFn({
    matchPatterns: matchEraPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: parseEraPatterns,
    defaultParseWidth: "any"
  }),
  quarter: buildMatchFn({
    matchPatterns: matchQuarterPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: parseQuarterPatterns,
    defaultParseWidth: "any",
    valueCallback: function valueCallback2(index) {
      return index + 1;
    }
  }),
  month: buildMatchFn({
    matchPatterns: matchMonthPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: parseMonthPatterns,
    defaultParseWidth: "any"
  }),
  day: buildMatchFn({
    matchPatterns: matchDayPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: parseDayPatterns,
    defaultParseWidth: "any"
  }),
  dayPeriod: buildMatchFn({
    matchPatterns: matchDayPeriodPatterns,
    defaultMatchWidth: "any",
    parsePatterns: parseDayPeriodPatterns,
    defaultParseWidth: "any"
  })
};
var match_default = match;

// node_modules/date-fns/esm/locale/en-US/index.js
var locale = {
  code: "en-US",
  formatDistance: formatDistance_default,
  formatLong: formatLong_default,
  formatRelative: formatRelative_default,
  localize: localize_default,
  match: match_default,
  options: {
    weekStartsOn: 0,
    firstWeekContainsDate: 1
  }
};
var en_US_default = locale;

// node_modules/date-fns/esm/_lib/defaultLocale/index.js
var defaultLocale_default = en_US_default;

// node_modules/date-fns/esm/format/index.js
var formattingTokensRegExp = /[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g;
var longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;
var escapedStringRegExp = /^'([^]*?)'?$/;
var doubleQuoteRegExp = /''/g;
var unescapedLatinCharacterRegExp = /[a-zA-Z]/;
function format(dirtyDate, dirtyFormatStr, options) {
  var _ref, _options$locale, _ref2, _ref3, _ref4, _options$firstWeekCon, _options$locale2, _options$locale2$opti, _defaultOptions$local, _defaultOptions$local2, _ref5, _ref6, _ref7, _options$weekStartsOn, _options$locale3, _options$locale3$opti, _defaultOptions$local3, _defaultOptions$local4;
  requiredArgs(2, arguments);
  var formatStr = String(dirtyFormatStr);
  var defaultOptions2 = getDefaultOptions();
  var locale2 = (_ref = (_options$locale = options === null || options === void 0 ? void 0 : options.locale) !== null && _options$locale !== void 0 ? _options$locale : defaultOptions2.locale) !== null && _ref !== void 0 ? _ref : defaultLocale_default;
  var firstWeekContainsDate = toInteger((_ref2 = (_ref3 = (_ref4 = (_options$firstWeekCon = options === null || options === void 0 ? void 0 : options.firstWeekContainsDate) !== null && _options$firstWeekCon !== void 0 ? _options$firstWeekCon : options === null || options === void 0 ? void 0 : (_options$locale2 = options.locale) === null || _options$locale2 === void 0 ? void 0 : (_options$locale2$opti = _options$locale2.options) === null || _options$locale2$opti === void 0 ? void 0 : _options$locale2$opti.firstWeekContainsDate) !== null && _ref4 !== void 0 ? _ref4 : defaultOptions2.firstWeekContainsDate) !== null && _ref3 !== void 0 ? _ref3 : (_defaultOptions$local = defaultOptions2.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) !== null && _ref2 !== void 0 ? _ref2 : 1);
  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {
    throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");
  }
  var weekStartsOn = toInteger((_ref5 = (_ref6 = (_ref7 = (_options$weekStartsOn = options === null || options === void 0 ? void 0 : options.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options === null || options === void 0 ? void 0 : (_options$locale3 = options.locale) === null || _options$locale3 === void 0 ? void 0 : (_options$locale3$opti = _options$locale3.options) === null || _options$locale3$opti === void 0 ? void 0 : _options$locale3$opti.weekStartsOn) !== null && _ref7 !== void 0 ? _ref7 : defaultOptions2.weekStartsOn) !== null && _ref6 !== void 0 ? _ref6 : (_defaultOptions$local3 = defaultOptions2.locale) === null || _defaultOptions$local3 === void 0 ? void 0 : (_defaultOptions$local4 = _defaultOptions$local3.options) === null || _defaultOptions$local4 === void 0 ? void 0 : _defaultOptions$local4.weekStartsOn) !== null && _ref5 !== void 0 ? _ref5 : 0);
  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
    throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");
  }
  if (!locale2.localize) {
    throw new RangeError("locale must contain localize property");
  }
  if (!locale2.formatLong) {
    throw new RangeError("locale must contain formatLong property");
  }
  var originalDate = toDate(dirtyDate);
  if (!isValid(originalDate)) {
    throw new RangeError("Invalid time value");
  }
  var timezoneOffset = getTimezoneOffsetInMilliseconds(originalDate);
  var utcDate = subMilliseconds(originalDate, timezoneOffset);
  var formatterOptions = {
    firstWeekContainsDate,
    weekStartsOn,
    locale: locale2,
    _originalDate: originalDate
  };
  var result = formatStr.match(longFormattingTokensRegExp).map(function(substring) {
    var firstCharacter = substring[0];
    if (firstCharacter === "p" || firstCharacter === "P") {
      var longFormatter = longFormatters_default[firstCharacter];
      return longFormatter(substring, locale2.formatLong);
    }
    return substring;
  }).join("").match(formattingTokensRegExp).map(function(substring) {
    if (substring === "''") {
      return "'";
    }
    var firstCharacter = substring[0];
    if (firstCharacter === "'") {
      return cleanEscapedString(substring);
    }
    var formatter = formatters_default[firstCharacter];
    if (formatter) {
      if (!(options !== null && options !== void 0 && options.useAdditionalWeekYearTokens) && isProtectedWeekYearToken(substring)) {
        throwProtectedError(substring, dirtyFormatStr, String(dirtyDate));
      }
      if (!(options !== null && options !== void 0 && options.useAdditionalDayOfYearTokens) && isProtectedDayOfYearToken(substring)) {
        throwProtectedError(substring, dirtyFormatStr, String(dirtyDate));
      }
      return formatter(utcDate, substring, locale2.localize, formatterOptions);
    }
    if (firstCharacter.match(unescapedLatinCharacterRegExp)) {
      throw new RangeError("Format string contains an unescaped latin alphabet character `" + firstCharacter + "`");
    }
    return substring;
  }).join("");
  return result;
}
function cleanEscapedString(input) {
  var matched = input.match(escapedStringRegExp);
  if (!matched) {
    return input;
  }
  return matched[1].replace(doubleQuoteRegExp, "'");
}

// node_modules/date-fns/esm/_lib/assign/index.js
function assign(target, object) {
  if (target == null) {
    throw new TypeError("assign requires that input parameter not be null or undefined");
  }
  for (var property in object) {
    if (Object.prototype.hasOwnProperty.call(object, property)) {
      ;
      target[property] = object[property];
    }
  }
  return target;
}

// node_modules/date-fns/esm/formatDistanceStrict/index.js
var MILLISECONDS_IN_MINUTE = 1e3 * 60;
var MINUTES_IN_DAY = 60 * 24;
var MINUTES_IN_MONTH = MINUTES_IN_DAY * 30;
var MINUTES_IN_YEAR = MINUTES_IN_DAY * 365;

// node_modules/date-fns/esm/getDay/index.js
function getDay(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var day = date.getDay();
  return day;
}

// node_modules/date-fns/esm/getDaysInMonth/index.js
function getDaysInMonth(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var year = date.getFullYear();
  var monthIndex = date.getMonth();
  var lastDayOfMonth2 = new Date(0);
  lastDayOfMonth2.setFullYear(year, monthIndex + 1, 0);
  lastDayOfMonth2.setHours(0, 0, 0, 0);
  return lastDayOfMonth2.getDate();
}

// node_modules/date-fns/esm/getHours/index.js
function getHours(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var hours = date.getHours();
  return hours;
}

// node_modules/date-fns/esm/getISOWeek/index.js
var MILLISECONDS_IN_WEEK3 = 6048e5;
function getISOWeek(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var diff = startOfISOWeek(date).getTime() - startOfISOWeekYear(date).getTime();
  return Math.round(diff / MILLISECONDS_IN_WEEK3) + 1;
}

// node_modules/date-fns/esm/getMinutes/index.js
function getMinutes(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var minutes = date.getMinutes();
  return minutes;
}

// node_modules/date-fns/esm/getMonth/index.js
function getMonth(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var month = date.getMonth();
  return month;
}

// node_modules/date-fns/esm/getOverlappingDaysInIntervals/index.js
var MILLISECONDS_IN_DAY3 = 24 * 60 * 60 * 1e3;

// node_modules/date-fns/esm/getSeconds/index.js
function getSeconds(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var seconds = date.getSeconds();
  return seconds;
}

// node_modules/date-fns/esm/getWeekYear/index.js
function getWeekYear(dirtyDate, options) {
  var _ref, _ref2, _ref3, _options$firstWeekCon, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var year = date.getFullYear();
  var defaultOptions2 = getDefaultOptions();
  var firstWeekContainsDate = toInteger((_ref = (_ref2 = (_ref3 = (_options$firstWeekCon = options === null || options === void 0 ? void 0 : options.firstWeekContainsDate) !== null && _options$firstWeekCon !== void 0 ? _options$firstWeekCon : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.firstWeekContainsDate) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions2.firstWeekContainsDate) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions2.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) !== null && _ref !== void 0 ? _ref : 1);
  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {
    throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");
  }
  var firstWeekOfNextYear = new Date(0);
  firstWeekOfNextYear.setFullYear(year + 1, 0, firstWeekContainsDate);
  firstWeekOfNextYear.setHours(0, 0, 0, 0);
  var startOfNextYear = startOfWeek(firstWeekOfNextYear, options);
  var firstWeekOfThisYear = new Date(0);
  firstWeekOfThisYear.setFullYear(year, 0, firstWeekContainsDate);
  firstWeekOfThisYear.setHours(0, 0, 0, 0);
  var startOfThisYear = startOfWeek(firstWeekOfThisYear, options);
  if (date.getTime() >= startOfNextYear.getTime()) {
    return year + 1;
  } else if (date.getTime() >= startOfThisYear.getTime()) {
    return year;
  } else {
    return year - 1;
  }
}

// node_modules/date-fns/esm/startOfWeekYear/index.js
function startOfWeekYear(dirtyDate, options) {
  var _ref, _ref2, _ref3, _options$firstWeekCon, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
  requiredArgs(1, arguments);
  var defaultOptions2 = getDefaultOptions();
  var firstWeekContainsDate = toInteger((_ref = (_ref2 = (_ref3 = (_options$firstWeekCon = options === null || options === void 0 ? void 0 : options.firstWeekContainsDate) !== null && _options$firstWeekCon !== void 0 ? _options$firstWeekCon : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.firstWeekContainsDate) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions2.firstWeekContainsDate) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions2.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) !== null && _ref !== void 0 ? _ref : 1);
  var year = getWeekYear(dirtyDate, options);
  var firstWeek = new Date(0);
  firstWeek.setFullYear(year, 0, firstWeekContainsDate);
  firstWeek.setHours(0, 0, 0, 0);
  var date = startOfWeek(firstWeek, options);
  return date;
}

// node_modules/date-fns/esm/getWeek/index.js
var MILLISECONDS_IN_WEEK4 = 6048e5;
function getWeek(dirtyDate, options) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var diff = startOfWeek(date, options).getTime() - startOfWeekYear(date, options).getTime();
  return Math.round(diff / MILLISECONDS_IN_WEEK4) + 1;
}

// node_modules/date-fns/esm/getYear/index.js
function getYear(dirtyDate) {
  requiredArgs(1, arguments);
  return toDate(dirtyDate).getFullYear();
}

// node_modules/date-fns/esm/isAfter/index.js
function isAfter(dirtyDate, dirtyDateToCompare) {
  requiredArgs(2, arguments);
  var date = toDate(dirtyDate);
  var dateToCompare = toDate(dirtyDateToCompare);
  return date.getTime() > dateToCompare.getTime();
}

// node_modules/date-fns/esm/isBefore/index.js
function isBefore(dirtyDate, dirtyDateToCompare) {
  requiredArgs(2, arguments);
  var date = toDate(dirtyDate);
  var dateToCompare = toDate(dirtyDateToCompare);
  return date.getTime() < dateToCompare.getTime();
}

// node_modules/date-fns/esm/isEqual/index.js
function isEqual(dirtyLeftDate, dirtyRightDate) {
  requiredArgs(2, arguments);
  var dateLeft = toDate(dirtyLeftDate);
  var dateRight = toDate(dirtyRightDate);
  return dateLeft.getTime() === dateRight.getTime();
}

// node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++)
    arr2[i2] = arr[i2];
  return arr2;
}

// node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js
function _unsupportedIterableToArray(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray(o, minLen);
}

// node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js
function _createForOfIteratorHelper(o, allowArrayLike) {
  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
  if (!it) {
    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
      if (it)
        o = it;
      var i2 = 0;
      var F = function F2() {
      };
      return {
        s: F,
        n: function n() {
          if (i2 >= o.length)
            return {
              done: true
            };
          return {
            done: false,
            value: o[i2++]
          };
        },
        e: function e2(_e) {
          throw _e;
        },
        f: F
      };
    }
    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  var normalCompletion = true, didErr = false, err;
  return {
    s: function s3() {
      it = it.call(o);
    },
    n: function n() {
      var step = it.next();
      normalCompletion = step.done;
      return step;
    },
    e: function e2(_e2) {
      didErr = true;
      err = _e2;
    },
    f: function f() {
      try {
        if (!normalCompletion && it["return"] != null)
          it["return"]();
      } finally {
        if (didErr)
          throw err;
      }
    }
  };
}

// node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js
function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self;
}

// node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js
function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf(o, p);
}

// node_modules/@babel/runtime/helpers/esm/inherits.js
function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  Object.defineProperty(subClass, "prototype", {
    writable: false
  });
  if (superClass)
    _setPrototypeOf(subClass, superClass);
}

// node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js
function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf2(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf(o);
}

// node_modules/@babel/runtime/helpers/esm/isNativeReflectConstruct.js
function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e2) {
    return false;
  }
}

// node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js
function _possibleConstructorReturn(self, call) {
  if (call && (_typeof(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }
  return _assertThisInitialized(self);
}

// node_modules/@babel/runtime/helpers/esm/createSuper.js
function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}

// node_modules/@babel/runtime/helpers/esm/classCallCheck.js
function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

// node_modules/@babel/runtime/helpers/esm/toPrimitive.js
function _toPrimitive(input, hint) {
  if (_typeof(input) !== "object" || input === null)
    return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== void 0) {
    var res = prim.call(input, hint || "default");
    if (_typeof(res) !== "object")
      return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}

// node_modules/@babel/runtime/helpers/esm/toPropertyKey.js
function _toPropertyKey(arg) {
  var key = _toPrimitive(arg, "string");
  return _typeof(key) === "symbol" ? key : String(key);
}

// node_modules/@babel/runtime/helpers/esm/createClass.js
function _defineProperties(target, props) {
  for (var i2 = 0; i2 < props.length; i2++) {
    var descriptor = props[i2];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
  }
}
function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}

// node_modules/@babel/runtime/helpers/esm/defineProperty.js
function _defineProperty(obj, key, value) {
  key = _toPropertyKey(key);
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}

// node_modules/date-fns/esm/parse/_lib/Setter.js
var TIMEZONE_UNIT_PRIORITY = 10;
var Setter = function() {
  function Setter2() {
    _classCallCheck(this, Setter2);
    _defineProperty(this, "priority", void 0);
    _defineProperty(this, "subPriority", 0);
  }
  _createClass(Setter2, [{
    key: "validate",
    value: function validate(_utcDate, _options) {
      return true;
    }
  }]);
  return Setter2;
}();
var ValueSetter = function(_Setter) {
  _inherits(ValueSetter2, _Setter);
  var _super = _createSuper(ValueSetter2);
  function ValueSetter2(value, validateValue, setValue, priority, subPriority) {
    var _this;
    _classCallCheck(this, ValueSetter2);
    _this = _super.call(this);
    _this.value = value;
    _this.validateValue = validateValue;
    _this.setValue = setValue;
    _this.priority = priority;
    if (subPriority) {
      _this.subPriority = subPriority;
    }
    return _this;
  }
  _createClass(ValueSetter2, [{
    key: "validate",
    value: function validate(utcDate, options) {
      return this.validateValue(utcDate, this.value, options);
    }
  }, {
    key: "set",
    value: function set2(utcDate, flags, options) {
      return this.setValue(utcDate, flags, this.value, options);
    }
  }]);
  return ValueSetter2;
}(Setter);
var DateToSystemTimezoneSetter = function(_Setter2) {
  _inherits(DateToSystemTimezoneSetter2, _Setter2);
  var _super2 = _createSuper(DateToSystemTimezoneSetter2);
  function DateToSystemTimezoneSetter2() {
    var _this2;
    _classCallCheck(this, DateToSystemTimezoneSetter2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this2 = _super2.call.apply(_super2, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this2), "priority", TIMEZONE_UNIT_PRIORITY);
    _defineProperty(_assertThisInitialized(_this2), "subPriority", -1);
    return _this2;
  }
  _createClass(DateToSystemTimezoneSetter2, [{
    key: "set",
    value: function set2(date, flags) {
      if (flags.timestampIsSet) {
        return date;
      }
      var convertedDate = new Date(0);
      convertedDate.setFullYear(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate());
      convertedDate.setHours(date.getUTCHours(), date.getUTCMinutes(), date.getUTCSeconds(), date.getUTCMilliseconds());
      return convertedDate;
    }
  }]);
  return DateToSystemTimezoneSetter2;
}(Setter);

// node_modules/date-fns/esm/parse/_lib/Parser.js
var Parser = function() {
  function Parser2() {
    _classCallCheck(this, Parser2);
    _defineProperty(this, "incompatibleTokens", void 0);
    _defineProperty(this, "priority", void 0);
    _defineProperty(this, "subPriority", void 0);
  }
  _createClass(Parser2, [{
    key: "run",
    value: function run(dateString, token, match2, options) {
      var result = this.parse(dateString, token, match2, options);
      if (!result) {
        return null;
      }
      return {
        setter: new ValueSetter(result.value, this.validate, this.set, this.priority, this.subPriority),
        rest: result.rest
      };
    }
  }, {
    key: "validate",
    value: function validate(_utcDate, _value, _options) {
      return true;
    }
  }]);
  return Parser2;
}();

// node_modules/date-fns/esm/parse/_lib/parsers/EraParser.js
var EraParser = function(_Parser) {
  _inherits(EraParser2, _Parser);
  var _super = _createSuper(EraParser2);
  function EraParser2() {
    var _this;
    _classCallCheck(this, EraParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 140);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["R", "u", "t", "T"]);
    return _this;
  }
  _createClass(EraParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "G":
        case "GG":
        case "GGG":
          return match2.era(dateString, {
            width: "abbreviated"
          }) || match2.era(dateString, {
            width: "narrow"
          });
        case "GGGGG":
          return match2.era(dateString, {
            width: "narrow"
          });
        case "GGGG":
        default:
          return match2.era(dateString, {
            width: "wide"
          }) || match2.era(dateString, {
            width: "abbreviated"
          }) || match2.era(dateString, {
            width: "narrow"
          });
      }
    }
  }, {
    key: "set",
    value: function set2(date, flags, value) {
      flags.era = value;
      date.setUTCFullYear(value, 0, 1);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return EraParser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/constants.js
var numericPatterns = {
  month: /^(1[0-2]|0?\d)/,
  // 0 to 12
  date: /^(3[0-1]|[0-2]?\d)/,
  // 0 to 31
  dayOfYear: /^(36[0-6]|3[0-5]\d|[0-2]?\d?\d)/,
  // 0 to 366
  week: /^(5[0-3]|[0-4]?\d)/,
  // 0 to 53
  hour23h: /^(2[0-3]|[0-1]?\d)/,
  // 0 to 23
  hour24h: /^(2[0-4]|[0-1]?\d)/,
  // 0 to 24
  hour11h: /^(1[0-1]|0?\d)/,
  // 0 to 11
  hour12h: /^(1[0-2]|0?\d)/,
  // 0 to 12
  minute: /^[0-5]?\d/,
  // 0 to 59
  second: /^[0-5]?\d/,
  // 0 to 59
  singleDigit: /^\d/,
  // 0 to 9
  twoDigits: /^\d{1,2}/,
  // 0 to 99
  threeDigits: /^\d{1,3}/,
  // 0 to 999
  fourDigits: /^\d{1,4}/,
  // 0 to 9999
  anyDigitsSigned: /^-?\d+/,
  singleDigitSigned: /^-?\d/,
  // 0 to 9, -0 to -9
  twoDigitsSigned: /^-?\d{1,2}/,
  // 0 to 99, -0 to -99
  threeDigitsSigned: /^-?\d{1,3}/,
  // 0 to 999, -0 to -999
  fourDigitsSigned: /^-?\d{1,4}/
  // 0 to 9999, -0 to -9999
};
var timezonePatterns = {
  basicOptionalMinutes: /^([+-])(\d{2})(\d{2})?|Z/,
  basic: /^([+-])(\d{2})(\d{2})|Z/,
  basicOptionalSeconds: /^([+-])(\d{2})(\d{2})((\d{2}))?|Z/,
  extended: /^([+-])(\d{2}):(\d{2})|Z/,
  extendedOptionalSeconds: /^([+-])(\d{2}):(\d{2})(:(\d{2}))?|Z/
};

// node_modules/date-fns/esm/parse/_lib/utils.js
function mapValue(parseFnResult, mapFn) {
  if (!parseFnResult) {
    return parseFnResult;
  }
  return {
    value: mapFn(parseFnResult.value),
    rest: parseFnResult.rest
  };
}
function parseNumericPattern(pattern, dateString) {
  var matchResult = dateString.match(pattern);
  if (!matchResult) {
    return null;
  }
  return {
    value: parseInt(matchResult[0], 10),
    rest: dateString.slice(matchResult[0].length)
  };
}
function parseTimezonePattern(pattern, dateString) {
  var matchResult = dateString.match(pattern);
  if (!matchResult) {
    return null;
  }
  if (matchResult[0] === "Z") {
    return {
      value: 0,
      rest: dateString.slice(1)
    };
  }
  var sign = matchResult[1] === "+" ? 1 : -1;
  var hours = matchResult[2] ? parseInt(matchResult[2], 10) : 0;
  var minutes = matchResult[3] ? parseInt(matchResult[3], 10) : 0;
  var seconds = matchResult[5] ? parseInt(matchResult[5], 10) : 0;
  return {
    value: sign * (hours * millisecondsInHour + minutes * millisecondsInMinute + seconds * millisecondsInSecond),
    rest: dateString.slice(matchResult[0].length)
  };
}
function parseAnyDigitsSigned(dateString) {
  return parseNumericPattern(numericPatterns.anyDigitsSigned, dateString);
}
function parseNDigits(n, dateString) {
  switch (n) {
    case 1:
      return parseNumericPattern(numericPatterns.singleDigit, dateString);
    case 2:
      return parseNumericPattern(numericPatterns.twoDigits, dateString);
    case 3:
      return parseNumericPattern(numericPatterns.threeDigits, dateString);
    case 4:
      return parseNumericPattern(numericPatterns.fourDigits, dateString);
    default:
      return parseNumericPattern(new RegExp("^\\d{1," + n + "}"), dateString);
  }
}
function parseNDigitsSigned(n, dateString) {
  switch (n) {
    case 1:
      return parseNumericPattern(numericPatterns.singleDigitSigned, dateString);
    case 2:
      return parseNumericPattern(numericPatterns.twoDigitsSigned, dateString);
    case 3:
      return parseNumericPattern(numericPatterns.threeDigitsSigned, dateString);
    case 4:
      return parseNumericPattern(numericPatterns.fourDigitsSigned, dateString);
    default:
      return parseNumericPattern(new RegExp("^-?\\d{1," + n + "}"), dateString);
  }
}
function dayPeriodEnumToHours(dayPeriod) {
  switch (dayPeriod) {
    case "morning":
      return 4;
    case "evening":
      return 17;
    case "pm":
    case "noon":
    case "afternoon":
      return 12;
    case "am":
    case "midnight":
    case "night":
    default:
      return 0;
  }
}
function normalizeTwoDigitYear(twoDigitYear, currentYear) {
  var isCommonEra = currentYear > 0;
  var absCurrentYear = isCommonEra ? currentYear : 1 - currentYear;
  var result;
  if (absCurrentYear <= 50) {
    result = twoDigitYear || 100;
  } else {
    var rangeEnd = absCurrentYear + 50;
    var rangeEndCentury = Math.floor(rangeEnd / 100) * 100;
    var isPreviousCentury = twoDigitYear >= rangeEnd % 100;
    result = twoDigitYear + rangeEndCentury - (isPreviousCentury ? 100 : 0);
  }
  return isCommonEra ? result : 1 - result;
}
function isLeapYearIndex(year) {
  return year % 400 === 0 || year % 4 === 0 && year % 100 !== 0;
}

// node_modules/date-fns/esm/parse/_lib/parsers/YearParser.js
var YearParser = function(_Parser) {
  _inherits(YearParser2, _Parser);
  var _super = _createSuper(YearParser2);
  function YearParser2() {
    var _this;
    _classCallCheck(this, YearParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 130);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["Y", "R", "u", "w", "I", "i", "e", "c", "t", "T"]);
    return _this;
  }
  _createClass(YearParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      var valueCallback3 = function valueCallback4(year) {
        return {
          year,
          isTwoDigitYear: token === "yy"
        };
      };
      switch (token) {
        case "y":
          return mapValue(parseNDigits(4, dateString), valueCallback3);
        case "yo":
          return mapValue(match2.ordinalNumber(dateString, {
            unit: "year"
          }), valueCallback3);
        default:
          return mapValue(parseNDigits(token.length, dateString), valueCallback3);
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value.isTwoDigitYear || value.year > 0;
    }
  }, {
    key: "set",
    value: function set2(date, flags, value) {
      var currentYear = date.getUTCFullYear();
      if (value.isTwoDigitYear) {
        var normalizedTwoDigitYear = normalizeTwoDigitYear(value.year, currentYear);
        date.setUTCFullYear(normalizedTwoDigitYear, 0, 1);
        date.setUTCHours(0, 0, 0, 0);
        return date;
      }
      var year = !("era" in flags) || flags.era === 1 ? value.year : 1 - value.year;
      date.setUTCFullYear(year, 0, 1);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return YearParser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/LocalWeekYearParser.js
var LocalWeekYearParser = function(_Parser) {
  _inherits(LocalWeekYearParser2, _Parser);
  var _super = _createSuper(LocalWeekYearParser2);
  function LocalWeekYearParser2() {
    var _this;
    _classCallCheck(this, LocalWeekYearParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 130);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["y", "R", "u", "Q", "q", "M", "L", "I", "d", "D", "i", "t", "T"]);
    return _this;
  }
  _createClass(LocalWeekYearParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      var valueCallback3 = function valueCallback4(year) {
        return {
          year,
          isTwoDigitYear: token === "YY"
        };
      };
      switch (token) {
        case "Y":
          return mapValue(parseNDigits(4, dateString), valueCallback3);
        case "Yo":
          return mapValue(match2.ordinalNumber(dateString, {
            unit: "year"
          }), valueCallback3);
        default:
          return mapValue(parseNDigits(token.length, dateString), valueCallback3);
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value.isTwoDigitYear || value.year > 0;
    }
  }, {
    key: "set",
    value: function set2(date, flags, value, options) {
      var currentYear = getUTCWeekYear(date, options);
      if (value.isTwoDigitYear) {
        var normalizedTwoDigitYear = normalizeTwoDigitYear(value.year, currentYear);
        date.setUTCFullYear(normalizedTwoDigitYear, 0, options.firstWeekContainsDate);
        date.setUTCHours(0, 0, 0, 0);
        return startOfUTCWeek(date, options);
      }
      var year = !("era" in flags) || flags.era === 1 ? value.year : 1 - value.year;
      date.setUTCFullYear(year, 0, options.firstWeekContainsDate);
      date.setUTCHours(0, 0, 0, 0);
      return startOfUTCWeek(date, options);
    }
  }]);
  return LocalWeekYearParser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/ISOWeekYearParser.js
var ISOWeekYearParser = function(_Parser) {
  _inherits(ISOWeekYearParser2, _Parser);
  var _super = _createSuper(ISOWeekYearParser2);
  function ISOWeekYearParser2() {
    var _this;
    _classCallCheck(this, ISOWeekYearParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 130);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["G", "y", "Y", "u", "Q", "q", "M", "L", "w", "d", "D", "e", "c", "t", "T"]);
    return _this;
  }
  _createClass(ISOWeekYearParser2, [{
    key: "parse",
    value: function parse2(dateString, token) {
      if (token === "R") {
        return parseNDigitsSigned(4, dateString);
      }
      return parseNDigitsSigned(token.length, dateString);
    }
  }, {
    key: "set",
    value: function set2(_date, _flags, value) {
      var firstWeekOfYear = new Date(0);
      firstWeekOfYear.setUTCFullYear(value, 0, 4);
      firstWeekOfYear.setUTCHours(0, 0, 0, 0);
      return startOfUTCISOWeek(firstWeekOfYear);
    }
  }]);
  return ISOWeekYearParser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/ExtendedYearParser.js
var ExtendedYearParser = function(_Parser) {
  _inherits(ExtendedYearParser2, _Parser);
  var _super = _createSuper(ExtendedYearParser2);
  function ExtendedYearParser2() {
    var _this;
    _classCallCheck(this, ExtendedYearParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 130);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["G", "y", "Y", "R", "w", "I", "i", "e", "c", "t", "T"]);
    return _this;
  }
  _createClass(ExtendedYearParser2, [{
    key: "parse",
    value: function parse2(dateString, token) {
      if (token === "u") {
        return parseNDigitsSigned(4, dateString);
      }
      return parseNDigitsSigned(token.length, dateString);
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value) {
      date.setUTCFullYear(value, 0, 1);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return ExtendedYearParser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/QuarterParser.js
var QuarterParser = function(_Parser) {
  _inherits(QuarterParser2, _Parser);
  var _super = _createSuper(QuarterParser2);
  function QuarterParser2() {
    var _this;
    _classCallCheck(this, QuarterParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 120);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["Y", "R", "q", "M", "L", "w", "I", "d", "D", "i", "e", "c", "t", "T"]);
    return _this;
  }
  _createClass(QuarterParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "Q":
        case "QQ":
          return parseNDigits(token.length, dateString);
        case "Qo":
          return match2.ordinalNumber(dateString, {
            unit: "quarter"
          });
        case "QQQ":
          return match2.quarter(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.quarter(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "QQQQQ":
          return match2.quarter(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "QQQQ":
        default:
          return match2.quarter(dateString, {
            width: "wide",
            context: "formatting"
          }) || match2.quarter(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.quarter(dateString, {
            width: "narrow",
            context: "formatting"
          });
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 1 && value <= 4;
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value) {
      date.setUTCMonth((value - 1) * 3, 1);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return QuarterParser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/StandAloneQuarterParser.js
var StandAloneQuarterParser = function(_Parser) {
  _inherits(StandAloneQuarterParser2, _Parser);
  var _super = _createSuper(StandAloneQuarterParser2);
  function StandAloneQuarterParser2() {
    var _this;
    _classCallCheck(this, StandAloneQuarterParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 120);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["Y", "R", "Q", "M", "L", "w", "I", "d", "D", "i", "e", "c", "t", "T"]);
    return _this;
  }
  _createClass(StandAloneQuarterParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "q":
        case "qq":
          return parseNDigits(token.length, dateString);
        case "qo":
          return match2.ordinalNumber(dateString, {
            unit: "quarter"
          });
        case "qqq":
          return match2.quarter(dateString, {
            width: "abbreviated",
            context: "standalone"
          }) || match2.quarter(dateString, {
            width: "narrow",
            context: "standalone"
          });
        case "qqqqq":
          return match2.quarter(dateString, {
            width: "narrow",
            context: "standalone"
          });
        case "qqqq":
        default:
          return match2.quarter(dateString, {
            width: "wide",
            context: "standalone"
          }) || match2.quarter(dateString, {
            width: "abbreviated",
            context: "standalone"
          }) || match2.quarter(dateString, {
            width: "narrow",
            context: "standalone"
          });
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 1 && value <= 4;
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value) {
      date.setUTCMonth((value - 1) * 3, 1);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return StandAloneQuarterParser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/MonthParser.js
var MonthParser = function(_Parser) {
  _inherits(MonthParser2, _Parser);
  var _super = _createSuper(MonthParser2);
  function MonthParser2() {
    var _this;
    _classCallCheck(this, MonthParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["Y", "R", "q", "Q", "L", "w", "I", "D", "i", "e", "c", "t", "T"]);
    _defineProperty(_assertThisInitialized(_this), "priority", 110);
    return _this;
  }
  _createClass(MonthParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      var valueCallback3 = function valueCallback4(value) {
        return value - 1;
      };
      switch (token) {
        case "M":
          return mapValue(parseNumericPattern(numericPatterns.month, dateString), valueCallback3);
        case "MM":
          return mapValue(parseNDigits(2, dateString), valueCallback3);
        case "Mo":
          return mapValue(match2.ordinalNumber(dateString, {
            unit: "month"
          }), valueCallback3);
        case "MMM":
          return match2.month(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.month(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "MMMMM":
          return match2.month(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "MMMM":
        default:
          return match2.month(dateString, {
            width: "wide",
            context: "formatting"
          }) || match2.month(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.month(dateString, {
            width: "narrow",
            context: "formatting"
          });
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 0 && value <= 11;
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value) {
      date.setUTCMonth(value, 1);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return MonthParser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/StandAloneMonthParser.js
var StandAloneMonthParser = function(_Parser) {
  _inherits(StandAloneMonthParser2, _Parser);
  var _super = _createSuper(StandAloneMonthParser2);
  function StandAloneMonthParser2() {
    var _this;
    _classCallCheck(this, StandAloneMonthParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 110);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["Y", "R", "q", "Q", "M", "w", "I", "D", "i", "e", "c", "t", "T"]);
    return _this;
  }
  _createClass(StandAloneMonthParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      var valueCallback3 = function valueCallback4(value) {
        return value - 1;
      };
      switch (token) {
        case "L":
          return mapValue(parseNumericPattern(numericPatterns.month, dateString), valueCallback3);
        case "LL":
          return mapValue(parseNDigits(2, dateString), valueCallback3);
        case "Lo":
          return mapValue(match2.ordinalNumber(dateString, {
            unit: "month"
          }), valueCallback3);
        case "LLL":
          return match2.month(dateString, {
            width: "abbreviated",
            context: "standalone"
          }) || match2.month(dateString, {
            width: "narrow",
            context: "standalone"
          });
        case "LLLLL":
          return match2.month(dateString, {
            width: "narrow",
            context: "standalone"
          });
        case "LLLL":
        default:
          return match2.month(dateString, {
            width: "wide",
            context: "standalone"
          }) || match2.month(dateString, {
            width: "abbreviated",
            context: "standalone"
          }) || match2.month(dateString, {
            width: "narrow",
            context: "standalone"
          });
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 0 && value <= 11;
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value) {
      date.setUTCMonth(value, 1);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return StandAloneMonthParser2;
}(Parser);

// node_modules/date-fns/esm/_lib/setUTCWeek/index.js
function setUTCWeek(dirtyDate, dirtyWeek, options) {
  requiredArgs(2, arguments);
  var date = toDate(dirtyDate);
  var week = toInteger(dirtyWeek);
  var diff = getUTCWeek(date, options) - week;
  date.setUTCDate(date.getUTCDate() - diff * 7);
  return date;
}

// node_modules/date-fns/esm/parse/_lib/parsers/LocalWeekParser.js
var LocalWeekParser = function(_Parser) {
  _inherits(LocalWeekParser2, _Parser);
  var _super = _createSuper(LocalWeekParser2);
  function LocalWeekParser2() {
    var _this;
    _classCallCheck(this, LocalWeekParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 100);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["y", "R", "u", "q", "Q", "M", "L", "I", "d", "D", "i", "t", "T"]);
    return _this;
  }
  _createClass(LocalWeekParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "w":
          return parseNumericPattern(numericPatterns.week, dateString);
        case "wo":
          return match2.ordinalNumber(dateString, {
            unit: "week"
          });
        default:
          return parseNDigits(token.length, dateString);
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 1 && value <= 53;
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value, options) {
      return startOfUTCWeek(setUTCWeek(date, value, options), options);
    }
  }]);
  return LocalWeekParser2;
}(Parser);

// node_modules/date-fns/esm/_lib/setUTCISOWeek/index.js
function setUTCISOWeek(dirtyDate, dirtyISOWeek) {
  requiredArgs(2, arguments);
  var date = toDate(dirtyDate);
  var isoWeek = toInteger(dirtyISOWeek);
  var diff = getUTCISOWeek(date) - isoWeek;
  date.setUTCDate(date.getUTCDate() - diff * 7);
  return date;
}

// node_modules/date-fns/esm/parse/_lib/parsers/ISOWeekParser.js
var ISOWeekParser = function(_Parser) {
  _inherits(ISOWeekParser2, _Parser);
  var _super = _createSuper(ISOWeekParser2);
  function ISOWeekParser2() {
    var _this;
    _classCallCheck(this, ISOWeekParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 100);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["y", "Y", "u", "q", "Q", "M", "L", "w", "d", "D", "e", "c", "t", "T"]);
    return _this;
  }
  _createClass(ISOWeekParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "I":
          return parseNumericPattern(numericPatterns.week, dateString);
        case "Io":
          return match2.ordinalNumber(dateString, {
            unit: "week"
          });
        default:
          return parseNDigits(token.length, dateString);
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 1 && value <= 53;
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value) {
      return startOfUTCISOWeek(setUTCISOWeek(date, value));
    }
  }]);
  return ISOWeekParser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/DateParser.js
var DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
var DAYS_IN_MONTH_LEAP_YEAR = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
var DateParser = function(_Parser) {
  _inherits(DateParser2, _Parser);
  var _super = _createSuper(DateParser2);
  function DateParser2() {
    var _this;
    _classCallCheck(this, DateParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 90);
    _defineProperty(_assertThisInitialized(_this), "subPriority", 1);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["Y", "R", "q", "Q", "w", "I", "D", "i", "e", "c", "t", "T"]);
    return _this;
  }
  _createClass(DateParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "d":
          return parseNumericPattern(numericPatterns.date, dateString);
        case "do":
          return match2.ordinalNumber(dateString, {
            unit: "date"
          });
        default:
          return parseNDigits(token.length, dateString);
      }
    }
  }, {
    key: "validate",
    value: function validate(date, value) {
      var year = date.getUTCFullYear();
      var isLeapYear2 = isLeapYearIndex(year);
      var month = date.getUTCMonth();
      if (isLeapYear2) {
        return value >= 1 && value <= DAYS_IN_MONTH_LEAP_YEAR[month];
      } else {
        return value >= 1 && value <= DAYS_IN_MONTH[month];
      }
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value) {
      date.setUTCDate(value);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return DateParser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/DayOfYearParser.js
var DayOfYearParser = function(_Parser) {
  _inherits(DayOfYearParser2, _Parser);
  var _super = _createSuper(DayOfYearParser2);
  function DayOfYearParser2() {
    var _this;
    _classCallCheck(this, DayOfYearParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 90);
    _defineProperty(_assertThisInitialized(_this), "subpriority", 1);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["Y", "R", "q", "Q", "M", "L", "w", "I", "d", "E", "i", "e", "c", "t", "T"]);
    return _this;
  }
  _createClass(DayOfYearParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "D":
        case "DD":
          return parseNumericPattern(numericPatterns.dayOfYear, dateString);
        case "Do":
          return match2.ordinalNumber(dateString, {
            unit: "date"
          });
        default:
          return parseNDigits(token.length, dateString);
      }
    }
  }, {
    key: "validate",
    value: function validate(date, value) {
      var year = date.getUTCFullYear();
      var isLeapYear2 = isLeapYearIndex(year);
      if (isLeapYear2) {
        return value >= 1 && value <= 366;
      } else {
        return value >= 1 && value <= 365;
      }
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value) {
      date.setUTCMonth(0, value);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return DayOfYearParser2;
}(Parser);

// node_modules/date-fns/esm/_lib/setUTCDay/index.js
function setUTCDay(dirtyDate, dirtyDay, options) {
  var _ref, _ref2, _ref3, _options$weekStartsOn, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
  requiredArgs(2, arguments);
  var defaultOptions2 = getDefaultOptions();
  var weekStartsOn = toInteger((_ref = (_ref2 = (_ref3 = (_options$weekStartsOn = options === null || options === void 0 ? void 0 : options.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.weekStartsOn) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions2.weekStartsOn) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions2.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.weekStartsOn) !== null && _ref !== void 0 ? _ref : 0);
  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
    throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");
  }
  var date = toDate(dirtyDate);
  var day = toInteger(dirtyDay);
  var currentDay = date.getUTCDay();
  var remainder = day % 7;
  var dayIndex = (remainder + 7) % 7;
  var diff = (dayIndex < weekStartsOn ? 7 : 0) + day - currentDay;
  date.setUTCDate(date.getUTCDate() + diff);
  return date;
}

// node_modules/date-fns/esm/parse/_lib/parsers/DayParser.js
var DayParser = function(_Parser) {
  _inherits(DayParser2, _Parser);
  var _super = _createSuper(DayParser2);
  function DayParser2() {
    var _this;
    _classCallCheck(this, DayParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 90);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["D", "i", "e", "c", "t", "T"]);
    return _this;
  }
  _createClass(DayParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "E":
        case "EE":
        case "EEE":
          return match2.day(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "short",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "EEEEE":
          return match2.day(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "EEEEEE":
          return match2.day(dateString, {
            width: "short",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "EEEE":
        default:
          return match2.day(dateString, {
            width: "wide",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "short",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "narrow",
            context: "formatting"
          });
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 0 && value <= 6;
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value, options) {
      date = setUTCDay(date, value, options);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return DayParser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/LocalDayParser.js
var LocalDayParser = function(_Parser) {
  _inherits(LocalDayParser2, _Parser);
  var _super = _createSuper(LocalDayParser2);
  function LocalDayParser2() {
    var _this;
    _classCallCheck(this, LocalDayParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 90);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["y", "R", "u", "q", "Q", "M", "L", "I", "d", "D", "E", "i", "c", "t", "T"]);
    return _this;
  }
  _createClass(LocalDayParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2, options) {
      var valueCallback3 = function valueCallback4(value) {
        var wholeWeekDays = Math.floor((value - 1) / 7) * 7;
        return (value + options.weekStartsOn + 6) % 7 + wholeWeekDays;
      };
      switch (token) {
        case "e":
        case "ee":
          return mapValue(parseNDigits(token.length, dateString), valueCallback3);
        case "eo":
          return mapValue(match2.ordinalNumber(dateString, {
            unit: "day"
          }), valueCallback3);
        case "eee":
          return match2.day(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "short",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "eeeee":
          return match2.day(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "eeeeee":
          return match2.day(dateString, {
            width: "short",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "eeee":
        default:
          return match2.day(dateString, {
            width: "wide",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "short",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "narrow",
            context: "formatting"
          });
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 0 && value <= 6;
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value, options) {
      date = setUTCDay(date, value, options);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return LocalDayParser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/StandAloneLocalDayParser.js
var StandAloneLocalDayParser = function(_Parser) {
  _inherits(StandAloneLocalDayParser2, _Parser);
  var _super = _createSuper(StandAloneLocalDayParser2);
  function StandAloneLocalDayParser2() {
    var _this;
    _classCallCheck(this, StandAloneLocalDayParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 90);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["y", "R", "u", "q", "Q", "M", "L", "I", "d", "D", "E", "i", "e", "t", "T"]);
    return _this;
  }
  _createClass(StandAloneLocalDayParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2, options) {
      var valueCallback3 = function valueCallback4(value) {
        var wholeWeekDays = Math.floor((value - 1) / 7) * 7;
        return (value + options.weekStartsOn + 6) % 7 + wholeWeekDays;
      };
      switch (token) {
        case "c":
        case "cc":
          return mapValue(parseNDigits(token.length, dateString), valueCallback3);
        case "co":
          return mapValue(match2.ordinalNumber(dateString, {
            unit: "day"
          }), valueCallback3);
        case "ccc":
          return match2.day(dateString, {
            width: "abbreviated",
            context: "standalone"
          }) || match2.day(dateString, {
            width: "short",
            context: "standalone"
          }) || match2.day(dateString, {
            width: "narrow",
            context: "standalone"
          });
        case "ccccc":
          return match2.day(dateString, {
            width: "narrow",
            context: "standalone"
          });
        case "cccccc":
          return match2.day(dateString, {
            width: "short",
            context: "standalone"
          }) || match2.day(dateString, {
            width: "narrow",
            context: "standalone"
          });
        case "cccc":
        default:
          return match2.day(dateString, {
            width: "wide",
            context: "standalone"
          }) || match2.day(dateString, {
            width: "abbreviated",
            context: "standalone"
          }) || match2.day(dateString, {
            width: "short",
            context: "standalone"
          }) || match2.day(dateString, {
            width: "narrow",
            context: "standalone"
          });
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 0 && value <= 6;
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value, options) {
      date = setUTCDay(date, value, options);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return StandAloneLocalDayParser2;
}(Parser);

// node_modules/date-fns/esm/_lib/setUTCISODay/index.js
function setUTCISODay(dirtyDate, dirtyDay) {
  requiredArgs(2, arguments);
  var day = toInteger(dirtyDay);
  if (day % 7 === 0) {
    day = day - 7;
  }
  var weekStartsOn = 1;
  var date = toDate(dirtyDate);
  var currentDay = date.getUTCDay();
  var remainder = day % 7;
  var dayIndex = (remainder + 7) % 7;
  var diff = (dayIndex < weekStartsOn ? 7 : 0) + day - currentDay;
  date.setUTCDate(date.getUTCDate() + diff);
  return date;
}

// node_modules/date-fns/esm/parse/_lib/parsers/ISODayParser.js
var ISODayParser = function(_Parser) {
  _inherits(ISODayParser2, _Parser);
  var _super = _createSuper(ISODayParser2);
  function ISODayParser2() {
    var _this;
    _classCallCheck(this, ISODayParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 90);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["y", "Y", "u", "q", "Q", "M", "L", "w", "d", "D", "E", "e", "c", "t", "T"]);
    return _this;
  }
  _createClass(ISODayParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      var valueCallback3 = function valueCallback4(value) {
        if (value === 0) {
          return 7;
        }
        return value;
      };
      switch (token) {
        case "i":
        case "ii":
          return parseNDigits(token.length, dateString);
        case "io":
          return match2.ordinalNumber(dateString, {
            unit: "day"
          });
        case "iii":
          return mapValue(match2.day(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "short",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "narrow",
            context: "formatting"
          }), valueCallback3);
        case "iiiii":
          return mapValue(match2.day(dateString, {
            width: "narrow",
            context: "formatting"
          }), valueCallback3);
        case "iiiiii":
          return mapValue(match2.day(dateString, {
            width: "short",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "narrow",
            context: "formatting"
          }), valueCallback3);
        case "iiii":
        default:
          return mapValue(match2.day(dateString, {
            width: "wide",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "short",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "narrow",
            context: "formatting"
          }), valueCallback3);
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 1 && value <= 7;
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value) {
      date = setUTCISODay(date, value);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return ISODayParser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/AMPMParser.js
var AMPMParser = function(_Parser) {
  _inherits(AMPMParser2, _Parser);
  var _super = _createSuper(AMPMParser2);
  function AMPMParser2() {
    var _this;
    _classCallCheck(this, AMPMParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 80);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["b", "B", "H", "k", "t", "T"]);
    return _this;
  }
  _createClass(AMPMParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "a":
        case "aa":
        case "aaa":
          return match2.dayPeriod(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.dayPeriod(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "aaaaa":
          return match2.dayPeriod(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "aaaa":
        default:
          return match2.dayPeriod(dateString, {
            width: "wide",
            context: "formatting"
          }) || match2.dayPeriod(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.dayPeriod(dateString, {
            width: "narrow",
            context: "formatting"
          });
      }
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value) {
      date.setUTCHours(dayPeriodEnumToHours(value), 0, 0, 0);
      return date;
    }
  }]);
  return AMPMParser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/AMPMMidnightParser.js
var AMPMMidnightParser = function(_Parser) {
  _inherits(AMPMMidnightParser2, _Parser);
  var _super = _createSuper(AMPMMidnightParser2);
  function AMPMMidnightParser2() {
    var _this;
    _classCallCheck(this, AMPMMidnightParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 80);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["a", "B", "H", "k", "t", "T"]);
    return _this;
  }
  _createClass(AMPMMidnightParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "b":
        case "bb":
        case "bbb":
          return match2.dayPeriod(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.dayPeriod(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "bbbbb":
          return match2.dayPeriod(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "bbbb":
        default:
          return match2.dayPeriod(dateString, {
            width: "wide",
            context: "formatting"
          }) || match2.dayPeriod(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.dayPeriod(dateString, {
            width: "narrow",
            context: "formatting"
          });
      }
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value) {
      date.setUTCHours(dayPeriodEnumToHours(value), 0, 0, 0);
      return date;
    }
  }]);
  return AMPMMidnightParser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/DayPeriodParser.js
var DayPeriodParser = function(_Parser) {
  _inherits(DayPeriodParser2, _Parser);
  var _super = _createSuper(DayPeriodParser2);
  function DayPeriodParser2() {
    var _this;
    _classCallCheck(this, DayPeriodParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 80);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["a", "b", "t", "T"]);
    return _this;
  }
  _createClass(DayPeriodParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "B":
        case "BB":
        case "BBB":
          return match2.dayPeriod(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.dayPeriod(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "BBBBB":
          return match2.dayPeriod(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "BBBB":
        default:
          return match2.dayPeriod(dateString, {
            width: "wide",
            context: "formatting"
          }) || match2.dayPeriod(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.dayPeriod(dateString, {
            width: "narrow",
            context: "formatting"
          });
      }
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value) {
      date.setUTCHours(dayPeriodEnumToHours(value), 0, 0, 0);
      return date;
    }
  }]);
  return DayPeriodParser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/Hour1to12Parser.js
var Hour1to12Parser = function(_Parser) {
  _inherits(Hour1to12Parser2, _Parser);
  var _super = _createSuper(Hour1to12Parser2);
  function Hour1to12Parser2() {
    var _this;
    _classCallCheck(this, Hour1to12Parser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 70);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["H", "K", "k", "t", "T"]);
    return _this;
  }
  _createClass(Hour1to12Parser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "h":
          return parseNumericPattern(numericPatterns.hour12h, dateString);
        case "ho":
          return match2.ordinalNumber(dateString, {
            unit: "hour"
          });
        default:
          return parseNDigits(token.length, dateString);
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 1 && value <= 12;
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value) {
      var isPM = date.getUTCHours() >= 12;
      if (isPM && value < 12) {
        date.setUTCHours(value + 12, 0, 0, 0);
      } else if (!isPM && value === 12) {
        date.setUTCHours(0, 0, 0, 0);
      } else {
        date.setUTCHours(value, 0, 0, 0);
      }
      return date;
    }
  }]);
  return Hour1to12Parser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/Hour0to23Parser.js
var Hour0to23Parser = function(_Parser) {
  _inherits(Hour0to23Parser2, _Parser);
  var _super = _createSuper(Hour0to23Parser2);
  function Hour0to23Parser2() {
    var _this;
    _classCallCheck(this, Hour0to23Parser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 70);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["a", "b", "h", "K", "k", "t", "T"]);
    return _this;
  }
  _createClass(Hour0to23Parser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "H":
          return parseNumericPattern(numericPatterns.hour23h, dateString);
        case "Ho":
          return match2.ordinalNumber(dateString, {
            unit: "hour"
          });
        default:
          return parseNDigits(token.length, dateString);
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 0 && value <= 23;
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value) {
      date.setUTCHours(value, 0, 0, 0);
      return date;
    }
  }]);
  return Hour0to23Parser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/Hour0To11Parser.js
var Hour0To11Parser = function(_Parser) {
  _inherits(Hour0To11Parser2, _Parser);
  var _super = _createSuper(Hour0To11Parser2);
  function Hour0To11Parser2() {
    var _this;
    _classCallCheck(this, Hour0To11Parser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 70);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["h", "H", "k", "t", "T"]);
    return _this;
  }
  _createClass(Hour0To11Parser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "K":
          return parseNumericPattern(numericPatterns.hour11h, dateString);
        case "Ko":
          return match2.ordinalNumber(dateString, {
            unit: "hour"
          });
        default:
          return parseNDigits(token.length, dateString);
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 0 && value <= 11;
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value) {
      var isPM = date.getUTCHours() >= 12;
      if (isPM && value < 12) {
        date.setUTCHours(value + 12, 0, 0, 0);
      } else {
        date.setUTCHours(value, 0, 0, 0);
      }
      return date;
    }
  }]);
  return Hour0To11Parser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/Hour1To24Parser.js
var Hour1To24Parser = function(_Parser) {
  _inherits(Hour1To24Parser2, _Parser);
  var _super = _createSuper(Hour1To24Parser2);
  function Hour1To24Parser2() {
    var _this;
    _classCallCheck(this, Hour1To24Parser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 70);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["a", "b", "h", "H", "K", "t", "T"]);
    return _this;
  }
  _createClass(Hour1To24Parser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "k":
          return parseNumericPattern(numericPatterns.hour24h, dateString);
        case "ko":
          return match2.ordinalNumber(dateString, {
            unit: "hour"
          });
        default:
          return parseNDigits(token.length, dateString);
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 1 && value <= 24;
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value) {
      var hours = value <= 24 ? value % 24 : value;
      date.setUTCHours(hours, 0, 0, 0);
      return date;
    }
  }]);
  return Hour1To24Parser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/MinuteParser.js
var MinuteParser = function(_Parser) {
  _inherits(MinuteParser2, _Parser);
  var _super = _createSuper(MinuteParser2);
  function MinuteParser2() {
    var _this;
    _classCallCheck(this, MinuteParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 60);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["t", "T"]);
    return _this;
  }
  _createClass(MinuteParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "m":
          return parseNumericPattern(numericPatterns.minute, dateString);
        case "mo":
          return match2.ordinalNumber(dateString, {
            unit: "minute"
          });
        default:
          return parseNDigits(token.length, dateString);
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 0 && value <= 59;
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value) {
      date.setUTCMinutes(value, 0, 0);
      return date;
    }
  }]);
  return MinuteParser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/SecondParser.js
var SecondParser = function(_Parser) {
  _inherits(SecondParser2, _Parser);
  var _super = _createSuper(SecondParser2);
  function SecondParser2() {
    var _this;
    _classCallCheck(this, SecondParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 50);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["t", "T"]);
    return _this;
  }
  _createClass(SecondParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "s":
          return parseNumericPattern(numericPatterns.second, dateString);
        case "so":
          return match2.ordinalNumber(dateString, {
            unit: "second"
          });
        default:
          return parseNDigits(token.length, dateString);
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 0 && value <= 59;
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value) {
      date.setUTCSeconds(value, 0);
      return date;
    }
  }]);
  return SecondParser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/FractionOfSecondParser.js
var FractionOfSecondParser = function(_Parser) {
  _inherits(FractionOfSecondParser2, _Parser);
  var _super = _createSuper(FractionOfSecondParser2);
  function FractionOfSecondParser2() {
    var _this;
    _classCallCheck(this, FractionOfSecondParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 30);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["t", "T"]);
    return _this;
  }
  _createClass(FractionOfSecondParser2, [{
    key: "parse",
    value: function parse2(dateString, token) {
      var valueCallback3 = function valueCallback4(value) {
        return Math.floor(value * Math.pow(10, -token.length + 3));
      };
      return mapValue(parseNDigits(token.length, dateString), valueCallback3);
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value) {
      date.setUTCMilliseconds(value);
      return date;
    }
  }]);
  return FractionOfSecondParser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/ISOTimezoneWithZParser.js
var ISOTimezoneWithZParser = function(_Parser) {
  _inherits(ISOTimezoneWithZParser2, _Parser);
  var _super = _createSuper(ISOTimezoneWithZParser2);
  function ISOTimezoneWithZParser2() {
    var _this;
    _classCallCheck(this, ISOTimezoneWithZParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 10);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["t", "T", "x"]);
    return _this;
  }
  _createClass(ISOTimezoneWithZParser2, [{
    key: "parse",
    value: function parse2(dateString, token) {
      switch (token) {
        case "X":
          return parseTimezonePattern(timezonePatterns.basicOptionalMinutes, dateString);
        case "XX":
          return parseTimezonePattern(timezonePatterns.basic, dateString);
        case "XXXX":
          return parseTimezonePattern(timezonePatterns.basicOptionalSeconds, dateString);
        case "XXXXX":
          return parseTimezonePattern(timezonePatterns.extendedOptionalSeconds, dateString);
        case "XXX":
        default:
          return parseTimezonePattern(timezonePatterns.extended, dateString);
      }
    }
  }, {
    key: "set",
    value: function set2(date, flags, value) {
      if (flags.timestampIsSet) {
        return date;
      }
      return new Date(date.getTime() - value);
    }
  }]);
  return ISOTimezoneWithZParser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/ISOTimezoneParser.js
var ISOTimezoneParser = function(_Parser) {
  _inherits(ISOTimezoneParser2, _Parser);
  var _super = _createSuper(ISOTimezoneParser2);
  function ISOTimezoneParser2() {
    var _this;
    _classCallCheck(this, ISOTimezoneParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 10);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["t", "T", "X"]);
    return _this;
  }
  _createClass(ISOTimezoneParser2, [{
    key: "parse",
    value: function parse2(dateString, token) {
      switch (token) {
        case "x":
          return parseTimezonePattern(timezonePatterns.basicOptionalMinutes, dateString);
        case "xx":
          return parseTimezonePattern(timezonePatterns.basic, dateString);
        case "xxxx":
          return parseTimezonePattern(timezonePatterns.basicOptionalSeconds, dateString);
        case "xxxxx":
          return parseTimezonePattern(timezonePatterns.extendedOptionalSeconds, dateString);
        case "xxx":
        default:
          return parseTimezonePattern(timezonePatterns.extended, dateString);
      }
    }
  }, {
    key: "set",
    value: function set2(date, flags, value) {
      if (flags.timestampIsSet) {
        return date;
      }
      return new Date(date.getTime() - value);
    }
  }]);
  return ISOTimezoneParser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/TimestampSecondsParser.js
var TimestampSecondsParser = function(_Parser) {
  _inherits(TimestampSecondsParser2, _Parser);
  var _super = _createSuper(TimestampSecondsParser2);
  function TimestampSecondsParser2() {
    var _this;
    _classCallCheck(this, TimestampSecondsParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 40);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", "*");
    return _this;
  }
  _createClass(TimestampSecondsParser2, [{
    key: "parse",
    value: function parse2(dateString) {
      return parseAnyDigitsSigned(dateString);
    }
  }, {
    key: "set",
    value: function set2(_date, _flags, value) {
      return [new Date(value * 1e3), {
        timestampIsSet: true
      }];
    }
  }]);
  return TimestampSecondsParser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/TimestampMillisecondsParser.js
var TimestampMillisecondsParser = function(_Parser) {
  _inherits(TimestampMillisecondsParser2, _Parser);
  var _super = _createSuper(TimestampMillisecondsParser2);
  function TimestampMillisecondsParser2() {
    var _this;
    _classCallCheck(this, TimestampMillisecondsParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 20);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", "*");
    return _this;
  }
  _createClass(TimestampMillisecondsParser2, [{
    key: "parse",
    value: function parse2(dateString) {
      return parseAnyDigitsSigned(dateString);
    }
  }, {
    key: "set",
    value: function set2(_date, _flags, value) {
      return [new Date(value), {
        timestampIsSet: true
      }];
    }
  }]);
  return TimestampMillisecondsParser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/index.js
var parsers = {
  G: new EraParser(),
  y: new YearParser(),
  Y: new LocalWeekYearParser(),
  R: new ISOWeekYearParser(),
  u: new ExtendedYearParser(),
  Q: new QuarterParser(),
  q: new StandAloneQuarterParser(),
  M: new MonthParser(),
  L: new StandAloneMonthParser(),
  w: new LocalWeekParser(),
  I: new ISOWeekParser(),
  d: new DateParser(),
  D: new DayOfYearParser(),
  E: new DayParser(),
  e: new LocalDayParser(),
  c: new StandAloneLocalDayParser(),
  i: new ISODayParser(),
  a: new AMPMParser(),
  b: new AMPMMidnightParser(),
  B: new DayPeriodParser(),
  h: new Hour1to12Parser(),
  H: new Hour0to23Parser(),
  K: new Hour0To11Parser(),
  k: new Hour1To24Parser(),
  m: new MinuteParser(),
  s: new SecondParser(),
  S: new FractionOfSecondParser(),
  X: new ISOTimezoneWithZParser(),
  x: new ISOTimezoneParser(),
  t: new TimestampSecondsParser(),
  T: new TimestampMillisecondsParser()
};

// node_modules/date-fns/esm/parse/index.js
var formattingTokensRegExp2 = /[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g;
var longFormattingTokensRegExp2 = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;
var escapedStringRegExp2 = /^'([^]*?)'?$/;
var doubleQuoteRegExp2 = /''/g;
var notWhitespaceRegExp = /\S/;
var unescapedLatinCharacterRegExp2 = /[a-zA-Z]/;
function parse(dirtyDateString, dirtyFormatString, dirtyReferenceDate, options) {
  var _ref, _options$locale, _ref2, _ref3, _ref4, _options$firstWeekCon, _options$locale2, _options$locale2$opti, _defaultOptions$local, _defaultOptions$local2, _ref5, _ref6, _ref7, _options$weekStartsOn, _options$locale3, _options$locale3$opti, _defaultOptions$local3, _defaultOptions$local4;
  requiredArgs(3, arguments);
  var dateString = String(dirtyDateString);
  var formatString = String(dirtyFormatString);
  var defaultOptions2 = getDefaultOptions();
  var locale2 = (_ref = (_options$locale = options === null || options === void 0 ? void 0 : options.locale) !== null && _options$locale !== void 0 ? _options$locale : defaultOptions2.locale) !== null && _ref !== void 0 ? _ref : defaultLocale_default;
  if (!locale2.match) {
    throw new RangeError("locale must contain match property");
  }
  var firstWeekContainsDate = toInteger((_ref2 = (_ref3 = (_ref4 = (_options$firstWeekCon = options === null || options === void 0 ? void 0 : options.firstWeekContainsDate) !== null && _options$firstWeekCon !== void 0 ? _options$firstWeekCon : options === null || options === void 0 ? void 0 : (_options$locale2 = options.locale) === null || _options$locale2 === void 0 ? void 0 : (_options$locale2$opti = _options$locale2.options) === null || _options$locale2$opti === void 0 ? void 0 : _options$locale2$opti.firstWeekContainsDate) !== null && _ref4 !== void 0 ? _ref4 : defaultOptions2.firstWeekContainsDate) !== null && _ref3 !== void 0 ? _ref3 : (_defaultOptions$local = defaultOptions2.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) !== null && _ref2 !== void 0 ? _ref2 : 1);
  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {
    throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");
  }
  var weekStartsOn = toInteger((_ref5 = (_ref6 = (_ref7 = (_options$weekStartsOn = options === null || options === void 0 ? void 0 : options.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options === null || options === void 0 ? void 0 : (_options$locale3 = options.locale) === null || _options$locale3 === void 0 ? void 0 : (_options$locale3$opti = _options$locale3.options) === null || _options$locale3$opti === void 0 ? void 0 : _options$locale3$opti.weekStartsOn) !== null && _ref7 !== void 0 ? _ref7 : defaultOptions2.weekStartsOn) !== null && _ref6 !== void 0 ? _ref6 : (_defaultOptions$local3 = defaultOptions2.locale) === null || _defaultOptions$local3 === void 0 ? void 0 : (_defaultOptions$local4 = _defaultOptions$local3.options) === null || _defaultOptions$local4 === void 0 ? void 0 : _defaultOptions$local4.weekStartsOn) !== null && _ref5 !== void 0 ? _ref5 : 0);
  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
    throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");
  }
  if (formatString === "") {
    if (dateString === "") {
      return toDate(dirtyReferenceDate);
    } else {
      return new Date(NaN);
    }
  }
  var subFnOptions = {
    firstWeekContainsDate,
    weekStartsOn,
    locale: locale2
  };
  var setters = [new DateToSystemTimezoneSetter()];
  var tokens = formatString.match(longFormattingTokensRegExp2).map(function(substring) {
    var firstCharacter = substring[0];
    if (firstCharacter in longFormatters_default) {
      var longFormatter = longFormatters_default[firstCharacter];
      return longFormatter(substring, locale2.formatLong);
    }
    return substring;
  }).join("").match(formattingTokensRegExp2);
  var usedTokens = [];
  var _iterator = _createForOfIteratorHelper(tokens), _step;
  try {
    var _loop = function _loop2() {
      var token = _step.value;
      if (!(options !== null && options !== void 0 && options.useAdditionalWeekYearTokens) && isProtectedWeekYearToken(token)) {
        throwProtectedError(token, formatString, dirtyDateString);
      }
      if (!(options !== null && options !== void 0 && options.useAdditionalDayOfYearTokens) && isProtectedDayOfYearToken(token)) {
        throwProtectedError(token, formatString, dirtyDateString);
      }
      var firstCharacter = token[0];
      var parser = parsers[firstCharacter];
      if (parser) {
        var incompatibleTokens = parser.incompatibleTokens;
        if (Array.isArray(incompatibleTokens)) {
          var incompatibleToken = usedTokens.find(function(usedToken) {
            return incompatibleTokens.includes(usedToken.token) || usedToken.token === firstCharacter;
          });
          if (incompatibleToken) {
            throw new RangeError("The format string mustn't contain `".concat(incompatibleToken.fullToken, "` and `").concat(token, "` at the same time"));
          }
        } else if (parser.incompatibleTokens === "*" && usedTokens.length > 0) {
          throw new RangeError("The format string mustn't contain `".concat(token, "` and any other token at the same time"));
        }
        usedTokens.push({
          token: firstCharacter,
          fullToken: token
        });
        var parseResult = parser.run(dateString, token, locale2.match, subFnOptions);
        if (!parseResult) {
          return {
            v: new Date(NaN)
          };
        }
        setters.push(parseResult.setter);
        dateString = parseResult.rest;
      } else {
        if (firstCharacter.match(unescapedLatinCharacterRegExp2)) {
          throw new RangeError("Format string contains an unescaped latin alphabet character `" + firstCharacter + "`");
        }
        if (token === "''") {
          token = "'";
        } else if (firstCharacter === "'") {
          token = cleanEscapedString2(token);
        }
        if (dateString.indexOf(token) === 0) {
          dateString = dateString.slice(token.length);
        } else {
          return {
            v: new Date(NaN)
          };
        }
      }
    };
    for (_iterator.s(); !(_step = _iterator.n()).done; ) {
      var _ret = _loop();
      if (_typeof(_ret) === "object")
        return _ret.v;
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  if (dateString.length > 0 && notWhitespaceRegExp.test(dateString)) {
    return new Date(NaN);
  }
  var uniquePrioritySetters = setters.map(function(setter2) {
    return setter2.priority;
  }).sort(function(a3, b2) {
    return b2 - a3;
  }).filter(function(priority, index, array) {
    return array.indexOf(priority) === index;
  }).map(function(priority) {
    return setters.filter(function(setter2) {
      return setter2.priority === priority;
    }).sort(function(a3, b2) {
      return b2.subPriority - a3.subPriority;
    });
  }).map(function(setterArray) {
    return setterArray[0];
  });
  var date = toDate(dirtyReferenceDate);
  if (isNaN(date.getTime())) {
    return new Date(NaN);
  }
  var utcDate = subMilliseconds(date, getTimezoneOffsetInMilliseconds(date));
  var flags = {};
  var _iterator2 = _createForOfIteratorHelper(uniquePrioritySetters), _step2;
  try {
    for (_iterator2.s(); !(_step2 = _iterator2.n()).done; ) {
      var setter = _step2.value;
      if (!setter.validate(utcDate, subFnOptions)) {
        return new Date(NaN);
      }
      var result = setter.set(utcDate, flags, subFnOptions);
      if (Array.isArray(result)) {
        utcDate = result[0];
        assign(flags, result[1]);
      } else {
        utcDate = result;
      }
    }
  } catch (err) {
    _iterator2.e(err);
  } finally {
    _iterator2.f();
  }
  return utcDate;
}
function cleanEscapedString2(input) {
  return input.match(escapedStringRegExp2)[1].replace(doubleQuoteRegExp2, "'");
}

// node_modules/date-fns/esm/subDays/index.js
function subDays(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var amount = toInteger(dirtyAmount);
  return addDays(dirtyDate, -amount);
}

// node_modules/date-fns/esm/parseISO/index.js
function parseISO(argument, options) {
  var _options$additionalDi;
  requiredArgs(1, arguments);
  var additionalDigits = toInteger((_options$additionalDi = options === null || options === void 0 ? void 0 : options.additionalDigits) !== null && _options$additionalDi !== void 0 ? _options$additionalDi : 2);
  if (additionalDigits !== 2 && additionalDigits !== 1 && additionalDigits !== 0) {
    throw new RangeError("additionalDigits must be 0, 1 or 2");
  }
  if (!(typeof argument === "string" || Object.prototype.toString.call(argument) === "[object String]")) {
    return new Date(NaN);
  }
  var dateStrings = splitDateString(argument);
  var date;
  if (dateStrings.date) {
    var parseYearResult = parseYear(dateStrings.date, additionalDigits);
    date = parseDate(parseYearResult.restDateString, parseYearResult.year);
  }
  if (!date || isNaN(date.getTime())) {
    return new Date(NaN);
  }
  var timestamp = date.getTime();
  var time = 0;
  var offset;
  if (dateStrings.time) {
    time = parseTime(dateStrings.time);
    if (isNaN(time)) {
      return new Date(NaN);
    }
  }
  if (dateStrings.timezone) {
    offset = parseTimezone(dateStrings.timezone);
    if (isNaN(offset)) {
      return new Date(NaN);
    }
  } else {
    var dirtyDate = new Date(timestamp + time);
    var result = new Date(0);
    result.setFullYear(dirtyDate.getUTCFullYear(), dirtyDate.getUTCMonth(), dirtyDate.getUTCDate());
    result.setHours(dirtyDate.getUTCHours(), dirtyDate.getUTCMinutes(), dirtyDate.getUTCSeconds(), dirtyDate.getUTCMilliseconds());
    return result;
  }
  return new Date(timestamp + time + offset);
}
var patterns = {
  dateTimeDelimiter: /[T ]/,
  timeZoneDelimiter: /[Z ]/i,
  timezone: /([Z+-].*)$/
};
var dateRegex = /^-?(?:(\d{3})|(\d{2})(?:-?(\d{2}))?|W(\d{2})(?:-?(\d{1}))?|)$/;
var timeRegex = /^(\d{2}(?:[.,]\d*)?)(?::?(\d{2}(?:[.,]\d*)?))?(?::?(\d{2}(?:[.,]\d*)?))?$/;
var timezoneRegex = /^([+-])(\d{2})(?::?(\d{2}))?$/;
function splitDateString(dateString) {
  var dateStrings = {};
  var array = dateString.split(patterns.dateTimeDelimiter);
  var timeString;
  if (array.length > 2) {
    return dateStrings;
  }
  if (/:/.test(array[0])) {
    timeString = array[0];
  } else {
    dateStrings.date = array[0];
    timeString = array[1];
    if (patterns.timeZoneDelimiter.test(dateStrings.date)) {
      dateStrings.date = dateString.split(patterns.timeZoneDelimiter)[0];
      timeString = dateString.substr(dateStrings.date.length, dateString.length);
    }
  }
  if (timeString) {
    var token = patterns.timezone.exec(timeString);
    if (token) {
      dateStrings.time = timeString.replace(token[1], "");
      dateStrings.timezone = token[1];
    } else {
      dateStrings.time = timeString;
    }
  }
  return dateStrings;
}
function parseYear(dateString, additionalDigits) {
  var regex = new RegExp("^(?:(\\d{4}|[+-]\\d{" + (4 + additionalDigits) + "})|(\\d{2}|[+-]\\d{" + (2 + additionalDigits) + "})$)");
  var captures = dateString.match(regex);
  if (!captures)
    return {
      year: NaN,
      restDateString: ""
    };
  var year = captures[1] ? parseInt(captures[1]) : null;
  var century = captures[2] ? parseInt(captures[2]) : null;
  return {
    year: century === null ? year : century * 100,
    restDateString: dateString.slice((captures[1] || captures[2]).length)
  };
}
function parseDate(dateString, year) {
  if (year === null)
    return new Date(NaN);
  var captures = dateString.match(dateRegex);
  if (!captures)
    return new Date(NaN);
  var isWeekDate = !!captures[4];
  var dayOfYear = parseDateUnit(captures[1]);
  var month = parseDateUnit(captures[2]) - 1;
  var day = parseDateUnit(captures[3]);
  var week = parseDateUnit(captures[4]);
  var dayOfWeek = parseDateUnit(captures[5]) - 1;
  if (isWeekDate) {
    if (!validateWeekDate(year, week, dayOfWeek)) {
      return new Date(NaN);
    }
    return dayOfISOWeekYear(year, week, dayOfWeek);
  } else {
    var date = new Date(0);
    if (!validateDate(year, month, day) || !validateDayOfYearDate(year, dayOfYear)) {
      return new Date(NaN);
    }
    date.setUTCFullYear(year, month, Math.max(dayOfYear, day));
    return date;
  }
}
function parseDateUnit(value) {
  return value ? parseInt(value) : 1;
}
function parseTime(timeString) {
  var captures = timeString.match(timeRegex);
  if (!captures)
    return NaN;
  var hours = parseTimeUnit(captures[1]);
  var minutes = parseTimeUnit(captures[2]);
  var seconds = parseTimeUnit(captures[3]);
  if (!validateTime(hours, minutes, seconds)) {
    return NaN;
  }
  return hours * millisecondsInHour + minutes * millisecondsInMinute + seconds * 1e3;
}
function parseTimeUnit(value) {
  return value && parseFloat(value.replace(",", ".")) || 0;
}
function parseTimezone(timezoneString) {
  if (timezoneString === "Z")
    return 0;
  var captures = timezoneString.match(timezoneRegex);
  if (!captures)
    return 0;
  var sign = captures[1] === "+" ? -1 : 1;
  var hours = parseInt(captures[2]);
  var minutes = captures[3] && parseInt(captures[3]) || 0;
  if (!validateTimezone(hours, minutes)) {
    return NaN;
  }
  return sign * (hours * millisecondsInHour + minutes * millisecondsInMinute);
}
function dayOfISOWeekYear(isoWeekYear, week, day) {
  var date = new Date(0);
  date.setUTCFullYear(isoWeekYear, 0, 4);
  var fourthOfJanuaryDay = date.getUTCDay() || 7;
  var diff = (week - 1) * 7 + day + 1 - fourthOfJanuaryDay;
  date.setUTCDate(date.getUTCDate() + diff);
  return date;
}
var daysInMonths = [31, null, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
function isLeapYearIndex2(year) {
  return year % 400 === 0 || year % 4 === 0 && year % 100 !== 0;
}
function validateDate(year, month, date) {
  return month >= 0 && month <= 11 && date >= 1 && date <= (daysInMonths[month] || (isLeapYearIndex2(year) ? 29 : 28));
}
function validateDayOfYearDate(year, dayOfYear) {
  return dayOfYear >= 1 && dayOfYear <= (isLeapYearIndex2(year) ? 366 : 365);
}
function validateWeekDate(_year, week, day) {
  return week >= 1 && week <= 53 && day >= 0 && day <= 6;
}
function validateTime(hours, minutes, seconds) {
  if (hours === 24) {
    return minutes === 0 && seconds === 0;
  }
  return seconds >= 0 && seconds < 60 && minutes >= 0 && minutes < 60 && hours >= 0 && hours < 25;
}
function validateTimezone(_hours, minutes) {
  return minutes >= 0 && minutes <= 59;
}

// node_modules/date-fns/esm/setMonth/index.js
function setMonth(dirtyDate, dirtyMonth) {
  requiredArgs(2, arguments);
  var date = toDate(dirtyDate);
  var month = toInteger(dirtyMonth);
  var year = date.getFullYear();
  var day = date.getDate();
  var dateWithDesiredMonth = new Date(0);
  dateWithDesiredMonth.setFullYear(year, month, 15);
  dateWithDesiredMonth.setHours(0, 0, 0, 0);
  var daysInMonth = getDaysInMonth(dateWithDesiredMonth);
  date.setMonth(month, Math.min(day, daysInMonth));
  return date;
}

// node_modules/date-fns/esm/set/index.js
function set(dirtyDate, values) {
  requiredArgs(2, arguments);
  if (_typeof(values) !== "object" || values === null) {
    throw new RangeError("values parameter must be an object");
  }
  var date = toDate(dirtyDate);
  if (isNaN(date.getTime())) {
    return new Date(NaN);
  }
  if (values.year != null) {
    date.setFullYear(values.year);
  }
  if (values.month != null) {
    date = setMonth(date, values.month);
  }
  if (values.date != null) {
    date.setDate(toInteger(values.date));
  }
  if (values.hours != null) {
    date.setHours(toInteger(values.hours));
  }
  if (values.minutes != null) {
    date.setMinutes(toInteger(values.minutes));
  }
  if (values.seconds != null) {
    date.setSeconds(toInteger(values.seconds));
  }
  if (values.milliseconds != null) {
    date.setMilliseconds(toInteger(values.milliseconds));
  }
  return date;
}

// node_modules/date-fns/esm/setHours/index.js
function setHours(dirtyDate, dirtyHours) {
  requiredArgs(2, arguments);
  var date = toDate(dirtyDate);
  var hours = toInteger(dirtyHours);
  date.setHours(hours);
  return date;
}

// node_modules/date-fns/esm/setMilliseconds/index.js
function setMilliseconds(dirtyDate, dirtyMilliseconds) {
  requiredArgs(2, arguments);
  var date = toDate(dirtyDate);
  var milliseconds2 = toInteger(dirtyMilliseconds);
  date.setMilliseconds(milliseconds2);
  return date;
}

// node_modules/date-fns/esm/setMinutes/index.js
function setMinutes(dirtyDate, dirtyMinutes) {
  requiredArgs(2, arguments);
  var date = toDate(dirtyDate);
  var minutes = toInteger(dirtyMinutes);
  date.setMinutes(minutes);
  return date;
}

// node_modules/date-fns/esm/setSeconds/index.js
function setSeconds(dirtyDate, dirtySeconds) {
  requiredArgs(2, arguments);
  var date = toDate(dirtyDate);
  var seconds = toInteger(dirtySeconds);
  date.setSeconds(seconds);
  return date;
}

// node_modules/date-fns/esm/setYear/index.js
function setYear(dirtyDate, dirtyYear) {
  requiredArgs(2, arguments);
  var date = toDate(dirtyDate);
  var year = toInteger(dirtyYear);
  if (isNaN(date.getTime())) {
    return new Date(NaN);
  }
  date.setFullYear(year);
  return date;
}

// node_modules/date-fns/esm/subMonths/index.js
function subMonths(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var amount = toInteger(dirtyAmount);
  return addMonths(dirtyDate, -amount);
}

// node_modules/date-fns/esm/sub/index.js
function sub(date, duration) {
  requiredArgs(2, arguments);
  if (!duration || _typeof(duration) !== "object")
    return new Date(NaN);
  var years = duration.years ? toInteger(duration.years) : 0;
  var months = duration.months ? toInteger(duration.months) : 0;
  var weeks = duration.weeks ? toInteger(duration.weeks) : 0;
  var days = duration.days ? toInteger(duration.days) : 0;
  var hours = duration.hours ? toInteger(duration.hours) : 0;
  var minutes = duration.minutes ? toInteger(duration.minutes) : 0;
  var seconds = duration.seconds ? toInteger(duration.seconds) : 0;
  var dateWithoutMonths = subMonths(date, months + years * 12);
  var dateWithoutDays = subDays(dateWithoutMonths, days + weeks * 7);
  var minutestoSub = minutes + hours * 60;
  var secondstoSub = seconds + minutestoSub * 60;
  var mstoSub = secondstoSub * 1e3;
  var finalDate = new Date(dateWithoutDays.getTime() - mstoSub);
  return finalDate;
}

// node_modules/date-fns/esm/subYears/index.js
function subYears(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var amount = toInteger(dirtyAmount);
  return addYears(dirtyDate, -amount);
}

// node_modules/@vuepic/vue-datepicker/dist/vue-datepicker.js
function jt() {
  return openBlock(), createElementBlock(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 32 32",
      fill: "currentColor",
      "aria-hidden": "true",
      class: "dp__icon"
    },
    [
      createBaseVNode("path", {
        d: "M29.333 8c0-2.208-1.792-4-4-4h-18.667c-2.208 0-4 1.792-4 4v18.667c0 2.208 1.792 4 4 4h18.667c2.208 0 4-1.792 4-4v-18.667zM26.667 8v18.667c0 0.736-0.597 1.333-1.333 1.333 0 0-18.667 0-18.667 0-0.736 0-1.333-0.597-1.333-1.333 0 0 0-18.667 0-18.667 0-0.736 0.597-1.333 1.333-1.333 0 0 18.667 0 18.667 0 0.736 0 1.333 0.597 1.333 1.333z"
      }),
      createBaseVNode("path", {
        d: "M20 2.667v5.333c0 0.736 0.597 1.333 1.333 1.333s1.333-0.597 1.333-1.333v-5.333c0-0.736-0.597-1.333-1.333-1.333s-1.333 0.597-1.333 1.333z"
      }),
      createBaseVNode("path", {
        d: "M9.333 2.667v5.333c0 0.736 0.597 1.333 1.333 1.333s1.333-0.597 1.333-1.333v-5.333c0-0.736-0.597-1.333-1.333-1.333s-1.333 0.597-1.333 1.333z"
      }),
      createBaseVNode("path", {
        d: "M4 14.667h24c0.736 0 1.333-0.597 1.333-1.333s-0.597-1.333-1.333-1.333h-24c-0.736 0-1.333 0.597-1.333 1.333s0.597 1.333 1.333 1.333z"
      })
    ]
  );
}
function wa() {
  return openBlock(), createElementBlock(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 32 32",
      fill: "currentColor",
      "aria-hidden": "true",
      class: "dp__icon"
    },
    [
      createBaseVNode("path", {
        d: "M23.057 7.057l-16 16c-0.52 0.52-0.52 1.365 0 1.885s1.365 0.52 1.885 0l16-16c0.52-0.52 0.52-1.365 0-1.885s-1.365-0.52-1.885 0z"
      }),
      createBaseVNode("path", {
        d: "M7.057 8.943l16 16c0.52 0.52 1.365 0.52 1.885 0s0.52-1.365 0-1.885l-16-16c-0.52-0.52-1.365-0.52-1.885 0s-0.52 1.365 0 1.885z"
      })
    ]
  );
}
function Pn() {
  return openBlock(), createElementBlock(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 32 32",
      fill: "currentColor",
      "aria-hidden": "true",
      class: "dp__icon"
    },
    [
      createBaseVNode("path", {
        d: "M20.943 23.057l-7.057-7.057c0 0 7.057-7.057 7.057-7.057 0.52-0.52 0.52-1.365 0-1.885s-1.365-0.52-1.885 0l-8 8c-0.521 0.521-0.521 1.365 0 1.885l8 8c0.52 0.52 1.365 0.52 1.885 0s0.52-1.365 0-1.885z"
      })
    ]
  );
}
function Cn() {
  return openBlock(), createElementBlock(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 32 32",
      fill: "currentColor",
      "aria-hidden": "true",
      class: "dp__icon"
    },
    [
      createBaseVNode("path", {
        d: "M12.943 24.943l8-8c0.521-0.521 0.521-1.365 0-1.885l-8-8c-0.52-0.52-1.365-0.52-1.885 0s-0.52 1.365 0 1.885l7.057 7.057c0 0-7.057 7.057-7.057 7.057-0.52 0.52-0.52 1.365 0 1.885s1.365 0.52 1.885 0z"
      })
    ]
  );
}
function Zn() {
  return openBlock(), createElementBlock(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 32 32",
      fill: "currentColor",
      "aria-hidden": "true",
      class: "dp__icon"
    },
    [
      createBaseVNode("path", {
        d: "M16 1.333c-8.095 0-14.667 6.572-14.667 14.667s6.572 14.667 14.667 14.667c8.095 0 14.667-6.572 14.667-14.667s-6.572-14.667-14.667-14.667zM16 4c6.623 0 12 5.377 12 12s-5.377 12-12 12c-6.623 0-12-5.377-12-12s5.377-12 12-12z"
      }),
      createBaseVNode("path", {
        d: "M14.667 8v8c0 0.505 0.285 0.967 0.737 1.193l5.333 2.667c0.658 0.329 1.46 0.062 1.789-0.596s0.062-1.46-0.596-1.789l-4.596-2.298c0 0 0-7.176 0-7.176 0-0.736-0.597-1.333-1.333-1.333s-1.333 0.597-1.333 1.333z"
      })
    ]
  );
}
function qn() {
  return openBlock(), createElementBlock(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 32 32",
      fill: "currentColor",
      "aria-hidden": "true",
      class: "dp__icon"
    },
    [
      createBaseVNode("path", {
        d: "M24.943 19.057l-8-8c-0.521-0.521-1.365-0.521-1.885 0l-8 8c-0.52 0.52-0.52 1.365 0 1.885s1.365 0.52 1.885 0l7.057-7.057c0 0 7.057 7.057 7.057 7.057 0.52 0.52 1.365 0.52 1.885 0s0.52-1.365 0-1.885z"
      })
    ]
  );
}
function Xn() {
  return openBlock(), createElementBlock(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 32 32",
      fill: "currentColor",
      "aria-hidden": "true",
      class: "dp__icon"
    },
    [
      createBaseVNode("path", {
        d: "M7.057 12.943l8 8c0.521 0.521 1.365 0.521 1.885 0l8-8c0.52-0.52 0.52-1.365 0-1.885s-1.365-0.52-1.885 0l-7.057 7.057c0 0-7.057-7.057-7.057-7.057-0.52-0.52-1.365-0.52-1.885 0s-0.52 1.365 0 1.885z"
      })
    ]
  );
}
var Nn = (e2, n, a3, t2, s3) => {
  const m3 = parse(e2, n.slice(0, e2.length), new Date());
  return isValid(m3) && isDate(m3) ? t2 || s3 ? m3 : set(m3, {
    hours: +a3.hours,
    minutes: +(a3 == null ? void 0 : a3.minutes),
    seconds: +(a3 == null ? void 0 : a3.seconds),
    milliseconds: 0
  }) : null;
};
var ba = (e2, n, a3, t2, s3) => {
  const m3 = Array.isArray(a3) ? a3[0] : a3;
  if (typeof n == "string")
    return Nn(e2, n, m3, t2, s3);
  if (Array.isArray(n)) {
    let g = null;
    for (const C of n)
      if (g = Nn(e2, C, m3, t2, s3), g)
        break;
    return g;
  }
  return typeof n == "function" ? n(e2) : null;
};
var T2 = (e2) => e2 ? new Date(e2) : new Date();
var Da = (e2, n, a3) => {
  if (n) {
    const s3 = (e2.getMonth() + 1).toString().padStart(2, "0"), m3 = e2.getDate().toString().padStart(2, "0"), g = e2.getHours().toString().padStart(2, "0"), C = e2.getMinutes().toString().padStart(2, "0"), E2 = a3 ? e2.getSeconds().toString().padStart(2, "0") : "00";
    return `${e2.getFullYear()}-${s3}-${m3}T${g}:${C}:${E2}.000Z`;
  }
  const t2 = Date.UTC(
    e2.getUTCFullYear(),
    e2.getUTCMonth(),
    e2.getUTCDate(),
    e2.getUTCHours(),
    e2.getUTCMinutes(),
    e2.getUTCSeconds()
  );
  return new Date(t2).toISOString();
};
var Ke = (e2) => {
  let n = T2(JSON.parse(JSON.stringify(e2)));
  return n = setHours(n, 0), n = setMinutes(n, 0), n = setSeconds(n, 0), n = setMilliseconds(n, 0), n;
};
var je = (e2, n, a3, t2) => {
  let s3 = e2 ? T2(e2) : T2();
  return (n || n === 0) && (s3 = setHours(s3, +n)), (a3 || a3 === 0) && (s3 = setMinutes(s3, +a3)), (t2 || t2 === 0) && (s3 = setSeconds(s3, +t2)), setMilliseconds(s3, 0);
};
var Ve = (e2, n) => !e2 || !n ? false : isBefore(Ke(e2), Ke(n));
var pe = (e2, n) => !e2 || !n ? false : isEqual(Ke(e2), Ke(n));
var Fe = (e2, n) => !e2 || !n ? false : isAfter(Ke(e2), Ke(n));
var Jn = (e2, n, a3) => e2 && e2[0] && e2[1] ? Fe(a3, e2[0]) && Ve(a3, e2[1]) : e2 && e2[0] && n ? Fe(a3, e2[0]) && Ve(a3, n) || Ve(a3, e2[0]) && Fe(a3, n) : false;
var St = (e2) => {
  const n = set(new Date(e2), { date: 1 });
  return Ke(n);
};
var Jt = (e2, n, a3) => n && (a3 || a3 === 0) ? Object.fromEntries(
  ["hours", "minutes", "seconds"].map((t2) => t2 === n ? [t2, a3] : [t2, isNaN(+e2[t2]) ? void 0 : +e2[t2]])
) : {
  hours: isNaN(+e2.hours) ? void 0 : +e2.hours,
  minutes: isNaN(+e2.minutes) ? void 0 : +e2.minutes,
  seconds: isNaN(+e2.seconds) ? void 0 : +e2.seconds
};
var Et = (e2) => ({
  hours: getHours(e2),
  minutes: getMinutes(e2),
  seconds: getSeconds(e2)
});
var Pt = reactive({
  menuFocused: false,
  shiftKeyInMenu: false
});
var Qn = () => {
  const e2 = (t2) => {
    Pt.menuFocused = t2;
  }, n = (t2) => {
    Pt.shiftKeyInMenu !== t2 && (Pt.shiftKeyInMenu = t2);
  };
  return {
    control: computed(() => ({ shiftKeyInMenu: Pt.shiftKeyInMenu, menuFocused: Pt.menuFocused })),
    setMenuFocused: e2,
    setShiftKey: n
  };
};
function wn(e2) {
  return e2 && e2.__esModule && Object.prototype.hasOwnProperty.call(e2, "default") ? e2.default : e2;
}
var ea = { exports: {} };
(function(e2) {
  function n(a3) {
    return a3 && a3.__esModule ? a3 : {
      default: a3
    };
  }
  e2.exports = n, e2.exports.__esModule = true, e2.exports.default = e2.exports;
})(ea);
var $a = ea.exports;
var cn = { exports: {} };
(function(e2, n) {
  Object.defineProperty(n, "__esModule", {
    value: true
  }), n.default = a3;
  function a3(t2) {
    if (t2 === null || t2 === true || t2 === false)
      return NaN;
    var s3 = Number(t2);
    return isNaN(s3) ? s3 : s3 < 0 ? Math.ceil(s3) : Math.floor(s3);
  }
  e2.exports = n.default;
})(cn, cn.exports);
var Ma = cn.exports;
var Ta = wn(Ma);
var fn = { exports: {} };
(function(e2, n) {
  Object.defineProperty(n, "__esModule", {
    value: true
  }), n.default = a3;
  function a3(t2) {
    var s3 = new Date(Date.UTC(t2.getFullYear(), t2.getMonth(), t2.getDate(), t2.getHours(), t2.getMinutes(), t2.getSeconds(), t2.getMilliseconds()));
    return s3.setUTCFullYear(t2.getFullYear()), t2.getTime() - s3.getTime();
  }
  e2.exports = n.default;
})(fn, fn.exports);
var Aa = fn.exports;
var _n = wn(Aa);
function Sa(e2, n) {
  var a3 = _a(n);
  return a3.formatToParts ? Ca(a3, e2) : Na(a3, e2);
}
var Pa = {
  year: 0,
  month: 1,
  day: 2,
  hour: 3,
  minute: 4,
  second: 5
};
function Ca(e2, n) {
  try {
    for (var a3 = e2.formatToParts(n), t2 = [], s3 = 0; s3 < a3.length; s3++) {
      var m3 = Pa[a3[s3].type];
      m3 >= 0 && (t2[m3] = parseInt(a3[s3].value, 10));
    }
    return t2;
  } catch (g) {
    if (g instanceof RangeError)
      return [NaN];
    throw g;
  }
}
function Na(e2, n) {
  var a3 = e2.format(n).replace(/\u200E/g, ""), t2 = /(\d+)\/(\d+)\/(\d+),? (\d+):(\d+):(\d+)/.exec(a3);
  return [t2[3], t2[1], t2[2], t2[4], t2[5], t2[6]];
}
var Qt = {};
function _a(e2) {
  if (!Qt[e2]) {
    var n = new Intl.DateTimeFormat("en-US", {
      hour12: false,
      timeZone: "America/New_York",
      year: "numeric",
      month: "numeric",
      day: "2-digit",
      hour: "2-digit",
      minute: "2-digit",
      second: "2-digit"
    }).format(new Date("2014-06-25T04:00:00.123Z")), a3 = n === "06/25/2014, 00:00:00" || n === "‎06‎/‎25‎/‎2014‎ ‎00‎:‎00‎:‎00";
    Qt[e2] = a3 ? new Intl.DateTimeFormat("en-US", {
      hour12: false,
      timeZone: e2,
      year: "numeric",
      month: "numeric",
      day: "2-digit",
      hour: "2-digit",
      minute: "2-digit",
      second: "2-digit"
    }) : new Intl.DateTimeFormat("en-US", {
      hourCycle: "h23",
      timeZone: e2,
      year: "numeric",
      month: "numeric",
      day: "2-digit",
      hour: "2-digit",
      minute: "2-digit",
      second: "2-digit"
    });
  }
  return Qt[e2];
}
function bn(e2, n, a3, t2, s3, m3, g) {
  var C = new Date(0);
  return C.setUTCFullYear(e2, n, a3), C.setUTCHours(t2, s3, m3, g), C;
}
var Rn = 36e5;
var Ra = 6e4;
var en = {
  timezone: /([Z+-].*)$/,
  timezoneZ: /^(Z)$/,
  timezoneHH: /^([+-]\d{2})$/,
  timezoneHHMM: /^([+-]\d{2}):?(\d{2})$/
};
function Dn(e2, n, a3) {
  var t2, s3;
  if (!e2 || (t2 = en.timezoneZ.exec(e2), t2))
    return 0;
  var m3;
  if (t2 = en.timezoneHH.exec(e2), t2)
    return m3 = parseInt(t2[1], 10), On(m3) ? -(m3 * Rn) : NaN;
  if (t2 = en.timezoneHHMM.exec(e2), t2) {
    m3 = parseInt(t2[1], 10);
    var g = parseInt(t2[2], 10);
    return On(m3, g) ? (s3 = Math.abs(m3) * Rn + g * Ra, m3 > 0 ? -s3 : s3) : NaN;
  }
  if (Ba(e2)) {
    n = new Date(n || Date.now());
    var C = a3 ? n : Oa(n), E2 = vn(C, e2), S3 = a3 ? E2 : Ia(n, E2, e2);
    return -S3;
  }
  return NaN;
}
function Oa(e2) {
  return bn(
    e2.getFullYear(),
    e2.getMonth(),
    e2.getDate(),
    e2.getHours(),
    e2.getMinutes(),
    e2.getSeconds(),
    e2.getMilliseconds()
  );
}
function vn(e2, n) {
  var a3 = Sa(e2, n), t2 = bn(
    a3[0],
    a3[1] - 1,
    a3[2],
    a3[3] % 24,
    a3[4],
    a3[5],
    0
  ).getTime(), s3 = e2.getTime(), m3 = s3 % 1e3;
  return s3 -= m3 >= 0 ? m3 : 1e3 + m3, t2 - s3;
}
function Ia(e2, n, a3) {
  var t2 = e2.getTime(), s3 = t2 - n, m3 = vn(new Date(s3), a3);
  if (n === m3)
    return n;
  s3 -= m3 - n;
  var g = vn(new Date(s3), a3);
  return m3 === g ? m3 : Math.max(m3, g);
}
function On(e2, n) {
  return -23 <= e2 && e2 <= 23 && (n == null || 0 <= n && n <= 59);
}
var In = {};
function Ba(e2) {
  if (In[e2])
    return true;
  try {
    return new Intl.DateTimeFormat(void 0, { timeZone: e2 }), In[e2] = true, true;
  } catch {
    return false;
  }
}
var Ya = /(Z|[+-]\d{2}(?::?\d{2})?| UTC| [a-zA-Z]+\/[a-zA-Z_]+(?:\/[a-zA-Z_]+)?)$/;
var ta = Ya;
var tn = 36e5;
var Bn = 6e4;
var Va = 2;
var Le = {
  dateTimePattern: /^([0-9W+-]+)(T| )(.*)/,
  datePattern: /^([0-9W+-]+)(.*)/,
  plainTime: /:/,
  // year tokens
  YY: /^(\d{2})$/,
  YYY: [
    /^([+-]\d{2})$/,
    // 0 additional digits
    /^([+-]\d{3})$/,
    // 1 additional digit
    /^([+-]\d{4})$/
    // 2 additional digits
  ],
  YYYY: /^(\d{4})/,
  YYYYY: [
    /^([+-]\d{4})/,
    // 0 additional digits
    /^([+-]\d{5})/,
    // 1 additional digit
    /^([+-]\d{6})/
    // 2 additional digits
  ],
  // date tokens
  MM: /^-(\d{2})$/,
  DDD: /^-?(\d{3})$/,
  MMDD: /^-?(\d{2})-?(\d{2})$/,
  Www: /^-?W(\d{2})$/,
  WwwD: /^-?W(\d{2})-?(\d{1})$/,
  HH: /^(\d{2}([.,]\d*)?)$/,
  HHMM: /^(\d{2}):?(\d{2}([.,]\d*)?)$/,
  HHMMSS: /^(\d{2}):?(\d{2}):?(\d{2}([.,]\d*)?)$/,
  // time zone tokens (to identify the presence of a tz)
  timeZone: ta
};
function mn(e2, n) {
  if (arguments.length < 1)
    throw new TypeError("1 argument required, but only " + arguments.length + " present");
  if (e2 === null)
    return new Date(NaN);
  var a3 = n || {}, t2 = a3.additionalDigits == null ? Va : Ta(a3.additionalDigits);
  if (t2 !== 2 && t2 !== 1 && t2 !== 0)
    throw new RangeError("additionalDigits must be 0, 1 or 2");
  if (e2 instanceof Date || typeof e2 == "object" && Object.prototype.toString.call(e2) === "[object Date]")
    return new Date(e2.getTime());
  if (typeof e2 == "number" || Object.prototype.toString.call(e2) === "[object Number]")
    return new Date(e2);
  if (!(typeof e2 == "string" || Object.prototype.toString.call(e2) === "[object String]"))
    return new Date(NaN);
  var s3 = Ea(e2), m3 = La(s3.date, t2), g = m3.year, C = m3.restDateString, E2 = Fa(C, g);
  if (isNaN(E2))
    return new Date(NaN);
  if (E2) {
    var S3 = E2.getTime(), F = 0, P;
    if (s3.time && (F = Ua(s3.time), isNaN(F)))
      return new Date(NaN);
    if (s3.timeZone || a3.timeZone) {
      if (P = Dn(s3.timeZone || a3.timeZone, new Date(S3 + F)), isNaN(P))
        return new Date(NaN);
    } else
      P = _n(new Date(S3 + F)), P = _n(new Date(S3 + F + P));
    return new Date(S3 + F + P);
  } else
    return new Date(NaN);
}
function Ea(e2) {
  var n = {}, a3 = Le.dateTimePattern.exec(e2), t2;
  if (a3 ? (n.date = a3[1], t2 = a3[3]) : (a3 = Le.datePattern.exec(e2), a3 ? (n.date = a3[1], t2 = a3[2]) : (n.date = null, t2 = e2)), t2) {
    var s3 = Le.timeZone.exec(t2);
    s3 ? (n.time = t2.replace(s3[1], ""), n.timeZone = s3[1].trim()) : n.time = t2;
  }
  return n;
}
function La(e2, n) {
  var a3 = Le.YYY[n], t2 = Le.YYYYY[n], s3;
  if (s3 = Le.YYYY.exec(e2) || t2.exec(e2), s3) {
    var m3 = s3[1];
    return {
      year: parseInt(m3, 10),
      restDateString: e2.slice(m3.length)
    };
  }
  if (s3 = Le.YY.exec(e2) || a3.exec(e2), s3) {
    var g = s3[1];
    return {
      year: parseInt(g, 10) * 100,
      restDateString: e2.slice(g.length)
    };
  }
  return {
    year: null
  };
}
function Fa(e2, n) {
  if (n === null)
    return null;
  var a3, t2, s3, m3;
  if (e2.length === 0)
    return t2 = new Date(0), t2.setUTCFullYear(n), t2;
  if (a3 = Le.MM.exec(e2), a3)
    return t2 = new Date(0), s3 = parseInt(a3[1], 10) - 1, Vn(n, s3) ? (t2.setUTCFullYear(n, s3), t2) : new Date(NaN);
  if (a3 = Le.DDD.exec(e2), a3) {
    t2 = new Date(0);
    var g = parseInt(a3[1], 10);
    return xa(n, g) ? (t2.setUTCFullYear(n, 0, g), t2) : new Date(NaN);
  }
  if (a3 = Le.MMDD.exec(e2), a3) {
    t2 = new Date(0), s3 = parseInt(a3[1], 10) - 1;
    var C = parseInt(a3[2], 10);
    return Vn(n, s3, C) ? (t2.setUTCFullYear(n, s3, C), t2) : new Date(NaN);
  }
  if (a3 = Le.Www.exec(e2), a3)
    return m3 = parseInt(a3[1], 10) - 1, En(n, m3) ? Yn(n, m3) : new Date(NaN);
  if (a3 = Le.WwwD.exec(e2), a3) {
    m3 = parseInt(a3[1], 10) - 1;
    var E2 = parseInt(a3[2], 10) - 1;
    return En(n, m3, E2) ? Yn(n, m3, E2) : new Date(NaN);
  }
  return null;
}
function Ua(e2) {
  var n, a3, t2;
  if (n = Le.HH.exec(e2), n)
    return a3 = parseFloat(n[1].replace(",", ".")), nn(a3) ? a3 % 24 * tn : NaN;
  if (n = Le.HHMM.exec(e2), n)
    return a3 = parseInt(n[1], 10), t2 = parseFloat(n[2].replace(",", ".")), nn(a3, t2) ? a3 % 24 * tn + t2 * Bn : NaN;
  if (n = Le.HHMMSS.exec(e2), n) {
    a3 = parseInt(n[1], 10), t2 = parseInt(n[2], 10);
    var s3 = parseFloat(n[3].replace(",", "."));
    return nn(a3, t2, s3) ? a3 % 24 * tn + t2 * Bn + s3 * 1e3 : NaN;
  }
  return null;
}
function Yn(e2, n, a3) {
  n = n || 0, a3 = a3 || 0;
  var t2 = new Date(0);
  t2.setUTCFullYear(e2, 0, 4);
  var s3 = t2.getUTCDay() || 7, m3 = n * 7 + a3 + 1 - s3;
  return t2.setUTCDate(t2.getUTCDate() + m3), t2;
}
var Wa = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
var Ha = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
function na(e2) {
  return e2 % 400 === 0 || e2 % 4 === 0 && e2 % 100 !== 0;
}
function Vn(e2, n, a3) {
  if (n < 0 || n > 11)
    return false;
  if (a3 != null) {
    if (a3 < 1)
      return false;
    var t2 = na(e2);
    if (t2 && a3 > Ha[n] || !t2 && a3 > Wa[n])
      return false;
  }
  return true;
}
function xa(e2, n) {
  if (n < 1)
    return false;
  var a3 = na(e2);
  return !(a3 && n > 366 || !a3 && n > 365);
}
function En(e2, n, a3) {
  return !(n < 0 || n > 52 || a3 != null && (a3 < 0 || a3 > 6));
}
function nn(e2, n, a3) {
  return !(e2 != null && (e2 < 0 || e2 >= 25) || n != null && (n < 0 || n >= 60) || a3 != null && (a3 < 0 || a3 >= 60));
}
var yn = { exports: {} };
var gn = { exports: {} };
(function(e2, n) {
  Object.defineProperty(n, "__esModule", {
    value: true
  }), n.default = a3;
  function a3(t2, s3) {
    if (t2 == null)
      throw new TypeError("assign requires that input parameter not be null or undefined");
    for (var m3 in s3)
      Object.prototype.hasOwnProperty.call(s3, m3) && (t2[m3] = s3[m3]);
    return t2;
  }
  e2.exports = n.default;
})(gn, gn.exports);
var za = gn.exports;
(function(e2, n) {
  var a3 = $a.default;
  Object.defineProperty(n, "__esModule", {
    value: true
  }), n.default = s3;
  var t2 = a3(za);
  function s3(m3) {
    return (0, t2.default)({}, m3);
  }
  e2.exports = n.default;
})(yn, yn.exports);
var ja = yn.exports;
var Ka = wn(ja);
function Ga(e2, n, a3) {
  var t2 = mn(e2, a3), s3 = Dn(n, t2, true), m3 = new Date(t2.getTime() - s3), g = new Date(0);
  return g.setFullYear(m3.getUTCFullYear(), m3.getUTCMonth(), m3.getUTCDate()), g.setHours(m3.getUTCHours(), m3.getUTCMinutes(), m3.getUTCSeconds(), m3.getUTCMilliseconds()), g;
}
function Za(e2, n, a3) {
  if (typeof e2 == "string" && !e2.match(ta)) {
    var t2 = Ka(a3);
    return t2.timeZone = n, mn(e2, t2);
  }
  var s3 = mn(e2, a3), m3 = bn(
    s3.getFullYear(),
    s3.getMonth(),
    s3.getDate(),
    s3.getHours(),
    s3.getMinutes(),
    s3.getSeconds(),
    s3.getMilliseconds()
  ).getTime(), g = Dn(n, new Date(m3));
  return new Date(m3 + g);
}
var qa = (e2, n = 3) => {
  const a3 = [];
  for (let t2 = 0; t2 < e2.length; t2 += n)
    a3.push([e2[t2], e2[t2 + 1], e2[t2 + 2]]);
  return a3;
};
var Xa = (e2, n) => {
  const a3 = [1, 2, 3, 4, 5, 6, 7].map((m3) => new Intl.DateTimeFormat(e2, { weekday: "short", timeZone: "UTC" }).format(new Date(`2017-01-0${m3}T00:00:00+00:00`)).slice(0, 2)), t2 = a3.slice(0, n), s3 = a3.slice(n + 1, a3.length);
  return [a3[n]].concat(...s3).concat(...t2);
};
var Ja = (e2, n) => {
  const a3 = [];
  for (let t2 = +e2[0]; t2 <= +e2[1]; t2++)
    a3.push({ value: +t2, text: `${t2}` });
  return n ? a3.reverse() : a3;
};
var Qa = (e2, n) => {
  const a3 = new Intl.DateTimeFormat(e2, { month: n, timeZone: "UTC" });
  return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12].map((s3) => {
    const m3 = s3 < 10 ? `0${s3}` : s3;
    return new Date(`2017-${m3}-01T00:00:00+00:00`);
  }).map((s3, m3) => {
    const g = a3.format(s3);
    return {
      text: g.charAt(0).toUpperCase() + g.substring(1),
      value: m3
    };
  });
};
var el = (e2) => [12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11][e2];
var Te = (e2) => {
  const n = unref(e2);
  return n != null && n.$el ? n == null ? void 0 : n.$el : n;
};
var tl = (e2) => Object.assign({ type: "dot" }, e2);
var aa = (e2) => Array.isArray(e2) ? !!e2[0] && !!e2[1] : false;
var zt = {
  prop: (e2) => `"${e2}" prop must be enabled!`,
  dateArr: (e2) => `You need to use array as "model-value" binding in order to support "${e2}"`
};
var Pe = (e2) => e2;
var Ln = (e2) => e2 === 0 ? e2 : !e2 || isNaN(+e2) ? null : +e2;
var nl = (e2) => {
  if (e2)
    return [...e2.querySelectorAll("input, button, select, textarea, a[href]")][0];
};
var Fn = (e2) => Object.assign(
  {
    menuAppear: "",
    open: "dp-slide-down",
    close: "dp-slide-up",
    next: "calendar-next",
    previous: "calendar-prev",
    vNext: "dp-slide-up",
    vPrevious: "dp-slide-down"
  },
  e2
);
var al = (e2) => Object.assign(
  {
    toggleOverlay: "Toggle overlay",
    menu: "Datepicker menu",
    input: "Datepicker input",
    calendarWrap: "Calendar wrapper",
    calendarDays: "Calendar days",
    openTimePicker: "Open time picker",
    closeTimePicker: "Close time Picker",
    incrementValue: (n) => `Increment ${n}`,
    decrementValue: (n) => `Decrement ${n}`,
    openTpOverlay: (n) => `Open ${n} overlay`,
    amPmButton: "Switch AM/PM mode",
    openYearsOverlay: "Open years overlay",
    openMonthsOverlay: "Open months overlay",
    nextMonth: "Next month",
    prevMonth: "Previous month",
    day: () => ""
  },
  e2
);
var ll = (e2) => e2 === null ? 0 : typeof e2 == "boolean" ? e2 ? 2 : 0 : +e2 >= 2 ? +e2 : 2;
var rl = (e2, n, a3) => e2 || (typeof a3 == "string" ? a3 : n);
var ol = (e2) => typeof e2 == "boolean" ? e2 ? Fn({}) : false : Fn(e2);
var sl = () => ({
  enterSubmit: true,
  tabSubmit: true,
  openMenu: true,
  rangeSeparator: " - "
});
var ul = (e2) => Object.assign({ months: [], years: [], times: { hours: [], minutes: [], seconds: [] } }, e2);
var il = (e2) => Object.assign({ showSelect: true, showCancel: true, showNow: false, showPreview: true }, e2);
var xe = (e2) => {
  const n = () => {
    if (e2.partialRange)
      return null;
    throw new Error(zt.prop("partial-range"));
  }, a3 = computed(() => ({
    ariaLabels: al(e2.ariaLabels),
    textInputOptions: Object.assign(sl(), e2.textInputOptions),
    multiCalendars: ll(e2.multiCalendars),
    previewFormat: rl(e2.previewFormat, e2.format, m3()),
    filters: ul(e2.filters),
    transitions: ol(e2.transitions),
    startTime: c2(),
    actionRow: il(e2.actionRow)
  })), t2 = (l) => {
    if (e2.range)
      return l();
    throw new Error(zt.prop("range"));
  }, s3 = () => {
    const l = e2.enableSeconds ? ":ss" : "";
    return e2.is24 ? `HH:mm${l}` : `hh:mm${l} aa`;
  }, m3 = () => e2.format ? e2.format : e2.monthPicker ? "MM/yyyy" : e2.timePicker ? s3() : e2.weekPicker ? "MM/dd/yyyy" : e2.yearPicker ? "yyyy" : e2.enableTimePicker ? `MM/dd/yyyy, ${s3()}` : "MM/dd/yyyy", g = (l, v) => {
    if (typeof e2.format == "function")
      return e2.format(l);
    const R2 = v || m3(), i2 = e2.formatLocale ? { locale: e2.formatLocale } : void 0;
    return Array.isArray(l) ? `${format(l[0], R2, i2)}${e2.modelAuto && !l[1] ? "" : a3.value.textInputOptions.rangeSeparator || "-"}${l[1] ? format(l[1], R2, i2) : ""}` : format(l, R2, i2);
  }, C = (l) => e2.timezone ? Ga(l, e2.timezone) : l, E2 = (l) => e2.timezone ? Za(l, e2.timezone) : l, S3 = computed(() => (l) => {
    var v;
    return (v = e2.hideNavigation) == null ? void 0 : v.includes(l);
  }), F = (l) => {
    var ee, We;
    const v = e2.maxDate ? Fe(C(l), C(T2(e2.maxDate))) : false, R2 = e2.minDate ? Ve(C(l), C(T2(e2.minDate))) : false, i2 = B2(
      l,
      (ee = e2.arrMapValues) != null && ee.disabledDates ? e2.arrMapValues.disabledDates : e2.disabledDates
    ), Y2 = a3.value.filters.months.map((Ie) => +Ie).includes(getMonth(l)), le = e2.disabledWeekDays.length ? e2.disabledWeekDays.some((Ie) => +Ie === getDay(l)) : false, Ae = B2(
      l,
      (We = e2.arrMapValues) != null && We.allowedDates ? e2.arrMapValues.allowedDates : e2.allowedDates
    ), Se = getYear(l), be = Se < +e2.yearRange[0] || Se > +e2.yearRange[1];
    return !(v || R2 || i2 || Y2 || be || le || Ae);
  }, P = (l) => {
    const v = {
      hours: getHours(T2()),
      minutes: getMinutes(T2()),
      seconds: e2.enableSeconds ? getSeconds(T2()) : 0
    };
    return Object.assign(v, l);
  }, c2 = () => e2.range ? e2.startTime && Array.isArray(e2.startTime) ? [P(e2.startTime[0]), P(e2.startTime[1])] : null : e2.startTime && !Array.isArray(e2.startTime) ? P(e2.startTime) : null, k2 = (l) => !F(l), Q2 = (l) => Array.isArray(l) ? isValid(l[0]) && (l[1] ? isValid(l[1]) : true) : l ? isValid(l) : false, j = (l) => l instanceof Date ? l : parseISO(l), x2 = (l) => {
    const v = startOfWeek(C(l), { weekStartsOn: +e2.weekStart }), R2 = endOfWeek(C(l), { weekStartsOn: +e2.weekStart });
    return [v, R2];
  }, B2 = (l, v) => l ? v instanceof Map ? !!v.get(z2(l)) : Array.isArray(v) ? v.some((R2) => pe(C(T2(R2)), C(l))) : v(T2(JSON.parse(JSON.stringify(l)))) : true, U = (l, v, R2) => {
    let i2 = l ? T2(l) : T2();
    return (v || v === 0) && (i2 = setMonth(i2, v)), R2 && (i2 = setYear(i2, R2)), i2;
  }, O2 = (l) => set(T2(), Et(l)), q2 = (l) => set(T2(), {
    hours: +l.hours || 0,
    minutes: +l.minutes || 0,
    seconds: +l.seconds || 0
  }), K2 = (l, v, R2, i2) => {
    if (!l)
      return true;
    if (i2) {
      const r = R2 === "max" ? isBefore(l, v) : isAfter(l, v), Y2 = { seconds: 0, milliseconds: 0 };
      return r || isEqual(set(l, Y2), set(v, Y2));
    }
    return R2 === "max" ? l.getTime() <= v.getTime() : l.getTime() >= v.getTime();
  }, ne = () => !e2.enableTimePicker || e2.monthPicker || e2.yearPicker || e2.ignoreTimeValidation, se = (l) => Array.isArray(l) ? [l[0] ? O2(l[0]) : null, l[1] ? O2(l[1]) : null] : O2(l), de = (l) => {
    const v = e2.maxTime ? q2(e2.maxTime) : T2(e2.maxDate);
    return Array.isArray(l) ? K2(l[0], v, "max", !!e2.maxDate) && K2(l[1], v, "max", !!e2.maxDate) : K2(l, v, "max", !!e2.maxDate);
  }, ue = (l, v) => {
    const R2 = e2.minTime ? q2(e2.minTime) : T2(e2.minDate);
    return Array.isArray(l) ? K2(l[0], R2, "min", !!e2.minDate) && K2(l[1], R2, "min", !!e2.minDate) && v : K2(l, R2, "min", !!e2.minDate) && v;
  }, ve = (l) => {
    let v = true;
    if (!l || ne())
      return true;
    const R2 = !e2.minDate && !e2.maxDate ? se(l) : l;
    if ((e2.maxTime || e2.maxDate) && (v = de(Pe(R2))), (e2.minTime || e2.minDate) && (v = ue(Pe(R2), v)), e2.disabledTimes) {
      const i2 = Array.isArray(l) ? [Et(l[0]), l[1] ? Et(l[1]) : void 0] : Et(l);
      v = !e2.disabledTimes(i2);
    }
    return v;
  }, V = (l, v) => {
    const R2 = T2(JSON.parse(JSON.stringify(l))), i2 = [];
    for (let r = 0; r < 7; r++) {
      const Y2 = addDays(R2, r), le = getMonth(Y2) !== v;
      i2.push({
        text: e2.hideOffsetDates && le ? "" : Y2.getDate(),
        value: Y2,
        current: !le,
        classData: {}
      });
    }
    return i2;
  }, D2 = (l, v) => {
    const R2 = [], i2 = T2(C(new Date(v, l))), r = T2(C(new Date(v, l + 1, 0))), Y2 = e2.weekStart, le = startOfWeek(i2, { weekStartsOn: Y2 }), Ae = (Se) => {
      const be = V(Se, l);
      if (R2.push({ days: be }), !R2[R2.length - 1].days.some(
        (ee) => pe(Ke(ee.value), Ke(r))
      )) {
        const ee = addDays(Se, 7);
        Ae(ee);
      }
    };
    if (Ae(le), e2.sixWeeks && R2.length < 6) {
      const Se = 6 - R2.length, be = (i2.getDay() + 7 - Y2) % 7, We = 6 - (r.getDay() + 7 - Y2) % 7, [Ie, Re] = (() => {
        switch (e2.sixWeeks === true ? "append" : e2.sixWeeks) {
          case "prepend":
            return [true, false];
          case "center":
            return [be == 0, true];
          case "fair":
            return [be == 0 || We > be, true];
          default:
          case "append":
            return [false, false];
        }
      })();
      for (let Ze = 1; Ze <= Se; Ze++)
        if (Re ? !!(Ze % 2) == Ie : Ie) {
          const Je = R2[0].days[0], nt = V(addDays(Je.value, -7), getMonth(i2));
          R2.unshift({ days: nt });
        } else {
          const Je = R2[R2.length - 1], nt = Je.days[Je.days.length - 1], ze = V(addDays(nt.value, 1), getMonth(i2));
          R2.push({ days: ze });
        }
    }
    return R2;
  }, d3 = (l, v, R2) => [set(T2(l), { date: 1 }), set(T2(), { month: v, year: R2, date: 1 })], N = (l, v) => Ve(...d3(e2.minDate, l, v)) || pe(...d3(e2.minDate, l, v)), _ = (l, v) => Fe(...d3(e2.maxDate, l, v)) || pe(...d3(e2.maxDate, l, v)), w2 = (l, v, R2) => {
    let i2 = false;
    return e2.maxDate && R2 && _(l, v) && (i2 = true), e2.minDate && !R2 && N(l, v) && (i2 = true), i2;
  }, y3 = (l, v, R2, i2) => {
    let r = false;
    return i2 ? e2.minDate && e2.maxDate ? r = w2(l, v, R2) : (e2.minDate && N(l, v) || e2.maxDate && _(l, v)) && (r = true) : r = true, r;
  }, z2 = (l) => {
    const v = Ke(C(T2(l))).toISOString(), [R2] = v.split("T");
    return R2;
  }, f = (l) => new Map(l.map((v) => [z2(v), true])), u2 = (l) => Array.isArray(l);
  return {
    checkPartialRangeValue: n,
    checkRangeEnabled: t2,
    getZonedDate: C,
    getZonedToUtc: E2,
    formatDate: g,
    getDefaultPattern: m3,
    validateDate: F,
    getDefaultStartTime: c2,
    isDisabled: k2,
    isValidDate: Q2,
    sanitizeDate: j,
    getWeekFromDate: x2,
    matchDate: B2,
    setDateMonthOrYear: U,
    isValidTime: ve,
    getCalendarDays: D2,
    validateMonthYearInRange: y3,
    validateMaxDate: _,
    validateMinDate: N,
    assignDefaultTime: P,
    mapDatesArrToMap: (l) => {
      u2(e2.allowedDates) && (l.allowedDates = f(e2.allowedDates)), u2(e2.highlight) && (l.highlightedDates = f(e2.highlight)), u2(e2.disabledDates) && (l.disabledDates = f(e2.disabledDates));
    },
    defaults: a3,
    hideNavigationButtons: S3
  };
};
var we = reactive({
  monthYear: [],
  calendar: [],
  time: [],
  actionRow: [],
  selectionGrid: [],
  timePicker: {
    0: [],
    1: []
  },
  monthPicker: []
});
var an = ref(null);
var Lt = ref(false);
var ln = ref(false);
var rn = ref(false);
var on = ref(false);
var Ee = ref(0);
var Oe = ref(0);
var ct = () => {
  const e2 = computed(() => Lt.value ? [...we.selectionGrid, we.actionRow].filter((B2) => B2.length) : ln.value ? [
    ...we.timePicker[0],
    ...we.timePicker[1],
    on.value ? [] : [an.value],
    we.actionRow
  ].filter((B2) => B2.length) : rn.value ? [...we.monthPicker, we.actionRow] : [we.monthYear, ...we.calendar, we.time, we.actionRow].filter((B2) => B2.length)), n = (B2) => {
    Ee.value = B2 ? Ee.value + 1 : Ee.value - 1;
    let U = null;
    e2.value[Oe.value] && (U = e2.value[Oe.value][Ee.value]), U || (Ee.value = B2 ? Ee.value - 1 : Ee.value + 1);
  }, a3 = (B2) => {
    if (Oe.value === 0 && !B2 || Oe.value === e2.value.length && B2)
      return;
    Oe.value = B2 ? Oe.value + 1 : Oe.value - 1, e2.value[Oe.value] ? e2.value[Oe.value] && !e2.value[Oe.value][Ee.value] && Ee.value !== 0 && (Ee.value = e2.value[Oe.value].length - 1) : Oe.value = B2 ? Oe.value - 1 : Oe.value + 1;
  }, t2 = (B2) => {
    let U = null;
    e2.value[Oe.value] && (U = e2.value[Oe.value][Ee.value]), U ? U.focus({ preventScroll: !Lt.value }) : Ee.value = B2 ? Ee.value - 1 : Ee.value + 1;
  }, s3 = () => {
    n(true), t2(true);
  }, m3 = () => {
    n(false), t2(false);
  }, g = () => {
    a3(false), t2(true);
  }, C = () => {
    a3(true), t2(true);
  }, E2 = (B2, U) => {
    we[U] = B2;
  }, S3 = (B2, U) => {
    we[U] = B2;
  }, F = () => {
    Ee.value = 0, Oe.value = 0;
  };
  return {
    buildMatrix: E2,
    buildMultiLevelMatrix: S3,
    setTimePickerBackRef: (B2) => {
      an.value = B2;
    },
    setSelectionGrid: (B2) => {
      Lt.value = B2, F(), B2 || (we.selectionGrid = []);
    },
    setTimePicker: (B2, U = false) => {
      ln.value = B2, on.value = U, F(), B2 || (we.timePicker[0] = [], we.timePicker[1] = []);
    },
    setTimePickerElements: (B2, U = 0) => {
      we.timePicker[U] = B2;
    },
    arrowRight: s3,
    arrowLeft: m3,
    arrowUp: g,
    arrowDown: C,
    clearArrowNav: () => {
      we.monthYear = [], we.calendar = [], we.time = [], we.actionRow = [], we.selectionGrid = [], we.timePicker[0] = [], we.timePicker[1] = [], Lt.value = false, ln.value = false, on.value = false, rn.value = false, F(), an.value = null;
    },
    setMonthPicker: (B2) => {
      rn.value = B2, F();
    },
    refSets: we
    // exposed for testing
  };
};
var Un = (e2) => Array.isArray(e2);
var mt = (e2) => Array.isArray(e2);
var Wn = (e2) => Array.isArray(e2) && e2.length === 2;
var dl = (e2, n, a3, t2, s3) => {
  const {
    getDefaultStartTime: m3,
    isDisabled: g,
    sanitizeDate: C,
    getWeekFromDate: E2,
    setDateMonthOrYear: S3,
    validateMonthYearInRange: F,
    defaults: P
  } = xe(e2), c2 = computed({
    get: () => e2.internalModelValue,
    set: (o) => {
      !e2.readonly && !e2.disabled && n("update:internal-model-value", o);
    }
  }), k2 = ref([]);
  watch(c2, (o, b2) => {
    e2.range ? se() : isEqual(o, b2) || se();
  });
  const Q2 = toRef(e2, "multiCalendars");
  watch(Q2, () => {
    ze(0);
  });
  const j = ref([{ month: getMonth(T2()), year: getYear(T2()) }]), x2 = reactive({
    hours: e2.range ? [getHours(T2()), getHours(T2())] : getHours(T2()),
    minutes: e2.range ? [getMinutes(T2()), getMinutes(T2())] : getMinutes(T2()),
    seconds: e2.range ? [0, 0] : 0
  }), B2 = computed(
    () => (o) => j.value[o] ? j.value[o].month : 0
  ), U = computed(
    () => (o) => j.value[o] ? j.value[o].year : 0
  ), O2 = computed(() => e2.flow && e2.flow.length && !e2.partialFlow ? s3.value === e2.flow.length : true), q2 = (o, b2, X2) => {
    var te, De;
    j.value[o] || (j.value[o] = { month: 0, year: 0 }), j.value[o].month = b2 === null ? (te = j.value[o]) == null ? void 0 : te.month : b2, j.value[o].year = X2 === null ? (De = j.value[o]) == null ? void 0 : De.year : X2;
  }, K2 = (o, b2) => {
    x2[o] = b2;
  }, ne = () => {
    e2.startDate && (q2(0, getMonth(T2(e2.startDate)), getYear(T2(e2.startDate))), P.value.multiCalendars && ze(0));
  };
  onMounted(() => {
    c2.value || (ne(), P.value.startTime && y3()), se(true), e2.focusStartDate && e2.startDate && ne();
  });
  const se = (o = false) => {
    if (c2.value)
      return Array.isArray(c2.value) ? (k2.value = c2.value, D2(o)) : ue(c2.value, o);
    if (e2.timePicker)
      return d3();
    if (e2.monthPicker && !e2.range)
      return N();
    if (e2.yearPicker && !e2.range)
      return _();
    if (P.value.multiCalendars && o && !e2.startDate)
      return de(T2(), o);
  }, de = (o, b2 = false) => {
    if ((!P.value.multiCalendars || !e2.multiStatic || b2) && q2(0, getMonth(o), getYear(o)), P.value.multiCalendars)
      for (let X2 = 1; X2 < P.value.multiCalendars; X2++) {
        const te = set(T2(), { month: B2.value(X2 - 1), year: U.value(X2 - 1) }), De = add(te, { months: 1 });
        j.value[X2] = { month: getMonth(De), year: getYear(De) };
      }
  }, ue = (o, b2) => {
    de(o), K2("hours", getHours(o)), K2("minutes", getMinutes(o)), K2("seconds", getSeconds(o)), P.value.multiCalendars && b2 && f();
  }, ve = (o, b2) => {
    o[1] && e2.showLastInRange ? de(o[1], b2) : de(o[0], b2);
    const X2 = (te, De) => [
      te(o[0]),
      o[1] ? te(o[1]) : x2[De][1]
    ];
    K2("hours", X2(getHours, "hours")), K2("minutes", X2(getMinutes, "minutes")), K2("seconds", X2(getSeconds, "seconds"));
  }, V = (o, b2) => {
    if ((e2.range || e2.weekPicker) && !e2.multiDates)
      return ve(o, b2);
    if (e2.multiDates) {
      const X2 = o[o.length - 1];
      return ue(X2, b2);
    }
  }, D2 = (o) => {
    const b2 = c2.value;
    V(b2, o), P.value.multiCalendars && e2.multiCalendarsSolo && f();
  }, d3 = () => {
    if (y3(), !e2.range)
      c2.value = je(T2(), x2.hours, x2.minutes, w2());
    else {
      const o = x2.hours, b2 = x2.minutes;
      c2.value = [
        je(T2(), o[0], b2[0], w2()),
        je(T2(), o[1], b2[1], w2(false))
      ];
    }
  }, N = () => {
    e2.multiDates ? c2.value = [S3(T2(), B2.value(0), U.value(0))] : c2.value = S3(T2(), B2.value(0), U.value(0));
  }, _ = () => {
    c2.value = T2();
  }, w2 = (o = true) => e2.enableSeconds ? Array.isArray(x2.seconds) ? o ? x2.seconds[0] : x2.seconds[1] : x2.seconds : 0, y3 = () => {
    const o = m3();
    if (o) {
      const b2 = Array.isArray(o), X2 = b2 ? [+o[0].hours, +o[1].hours] : +o.hours, te = b2 ? [+o[0].minutes, +o[1].minutes] : +o.minutes, De = b2 ? [+o[0].seconds, +o[1].seconds] : +o.seconds;
      K2("hours", X2), K2("minutes", te), e2.enableSeconds && K2("seconds", De);
    }
  }, z2 = () => Array.isArray(c2.value) && c2.value.length ? c2.value[c2.value.length - 1] : null, f = () => {
    if (Array.isArray(c2.value) && c2.value.length === 2) {
      const o = T2(
        T2(c2.value[1] ? c2.value[1] : addMonths(c2.value[0], 1))
      ), [b2, X2] = [getMonth(c2.value[0]), getYear(c2.value[0])], [te, De] = [getMonth(c2.value[1]), getYear(c2.value[1])];
      (b2 !== te || b2 === te && X2 !== De) && e2.multiCalendarsSolo && q2(1, getMonth(o), getYear(o));
    } else
      c2.value && !Array.isArray(c2.value) && q2(0, getMonth(c2.value), getYear(c2.value));
  }, u2 = (o) => {
    const b2 = addMonths(o, 1);
    return { month: getMonth(b2), year: getYear(b2) };
  }, $ = (o) => {
    const b2 = getMonth(T2(o)), X2 = getYear(T2(o));
    if (q2(0, b2, X2), P.value.multiCalendars > 0)
      for (let te = 1; te < P.value.multiCalendars; te++) {
        const De = u2(
          set(T2(o), { year: B2.value(te - 1), month: U.value(te - 1) })
        );
        q2(te, De.month, De.year);
      }
  }, l = (o) => {
    if (c2.value && Array.isArray(c2.value))
      if (c2.value.some((b2) => pe(o, b2))) {
        const b2 = c2.value.filter((X2) => !pe(X2, o));
        c2.value = b2.length ? b2 : null;
      } else
        (e2.multiDatesLimit && +e2.multiDatesLimit > c2.value.length || !e2.multiDatesLimit) && c2.value.push(o);
    else
      c2.value = [o];
  }, v = (o, b2) => {
    const X2 = Fe(o, b2) ? b2 : o, te = Fe(b2, o) ? b2 : o;
    return eachDayOfInterval({ start: X2, end: te });
  }, R2 = (o, b2 = 0) => {
    if (Array.isArray(c2.value) && c2.value[b2]) {
      const X2 = differenceInCalendarDays(o, c2.value[b2]), te = v(c2.value[b2], o), De = te.length === 1 ? 0 : te.filter((st) => g(st)).length, Qe = Math.abs(X2) - De;
      if (e2.minRange && e2.maxRange)
        return Qe >= +e2.minRange && Qe <= +e2.maxRange;
      if (e2.minRange)
        return Qe >= +e2.minRange;
      if (e2.maxRange)
        return Qe <= +e2.maxRange;
    }
    return true;
  }, i2 = (o) => Array.isArray(c2.value) && c2.value.length === 2 ? e2.fixedStart && (Fe(o, c2.value[0]) || pe(o, c2.value[0])) ? [c2.value[0], o] : e2.fixedEnd && (Ve(o, c2.value[1]) || pe(o, c2.value[1])) ? [o, c2.value[1]] : (n("invalid-fixed-range", o), c2.value) : [], r = () => {
    e2.autoApply && O2.value && n("auto-apply", e2.partialFlow);
  }, Y2 = () => {
    e2.autoApply && n("select-date");
  }, le = (o) => !eachDayOfInterval({ start: o[0], end: o[1] }).some((X2) => g(X2)), Ae = (o) => (c2.value = E2(T2(o.value)), r()), Se = (o) => {
    const b2 = je(T2(o.value), x2.hours, x2.minutes, w2());
    e2.multiDates ? l(b2) : c2.value = b2, a3(), r();
  }, be = () => {
    k2.value = c2.value ? c2.value.slice() : [], k2.value.length === 2 && !(e2.fixedStart || e2.fixedEnd) && (k2.value = []);
  }, ee = (o, b2) => {
    const X2 = [T2(o.value), addDays(T2(o.value), +e2.autoRange)];
    le(X2) && (b2 && $(o.value), k2.value = X2);
  }, We = (o) => {
    Ie(o.value) || !R2(o.value, e2.fixedStart ? 0 : 1) || (k2.value = i2(T2(o.value)));
  }, Ie = (o) => e2.noDisabledRange ? v(k2.value[0], o).some((X2) => g(X2)) : false, Re = (o, b2) => {
    if (be(), e2.autoRange)
      return ee(o, b2);
    if (e2.fixedStart || e2.fixedEnd)
      return We(o);
    k2.value[0] ? R2(T2(o.value)) && !Ie(o.value) && (Ve(T2(o.value), T2(k2.value[0])) ? (k2.value.unshift(T2(o.value)), n("range-end", k2.value[0])) : (k2.value[1] = T2(o.value), n("range-end", k2.value[1]))) : (k2.value[0] = T2(o.value), n("range-start", k2.value[0]));
  }, Ze = (o) => {
    k2.value[o] = je(
      k2.value[o],
      x2.hours[o],
      x2.minutes[o],
      w2(o !== 1)
    );
  }, wt = () => {
    k2.value.length && (k2.value[0] && !k2.value[1] ? Ze(0) : (Ze(0), Ze(1), a3()), c2.value = k2.value.slice(), k2.value[0] && k2.value[1] && e2.autoApply && n("auto-apply"), k2.value[0] && !k2.value[1] && e2.modelAuto && e2.autoApply && n("auto-apply"));
  }, Je = (o, b2 = false) => {
    if (!(g(o.value) || !o.current && e2.hideOffsetDates)) {
      if (e2.weekPicker)
        return Ae(o);
      if (!e2.range)
        return Se(o);
      mt(x2.hours) && mt(x2.minutes) && !e2.multiDates && (Re(o, b2), wt());
    }
  }, nt = (o) => {
    const b2 = o[0];
    return e2.weekNumbers === "local" ? getWeek(b2.value, { weekStartsOn: +e2.weekStart }) : e2.weekNumbers === "iso" ? getISOWeek(b2.value) : typeof e2.weekNumbers == "function" ? e2.weekNumbers(b2.value) : "";
  }, ze = (o) => {
    for (let b2 = o - 1; b2 >= 0; b2--) {
      const X2 = subMonths(set(T2(), { month: B2.value(b2 + 1), year: U.value(b2 + 1) }), 1);
      q2(b2, getMonth(X2), getYear(X2));
    }
    for (let b2 = o + 1; b2 <= P.value.multiCalendars - 1; b2++) {
      const X2 = addMonths(set(T2(), { month: B2.value(b2 - 1), year: U.value(b2 - 1) }), 1);
      q2(b2, getMonth(X2), getYear(X2));
    }
  }, Z = (o) => S3(T2(), B2.value(o), U.value(o)), oe = (o) => je(o, x2.hours, x2.minutes, w2()), re = (o) => {
    l(Z(o));
  }, Tt = (o, b2) => {
    const X2 = e2.monthPicker ? B2.value(o) !== b2.month || !b2.fromNav : U.value(o) !== b2.year || !b2.fromNav;
    if (q2(o, b2.month, b2.year), P.value.multiCalendars && !e2.multiCalendarsSolo && ze(o), e2.monthPicker || e2.yearPicker)
      if (e2.multiDates)
        X2 && re(o);
      else if (e2.range) {
        if (X2 && R2(Z(o))) {
          let te = c2.value ? c2.value.slice() : [];
          te.length === 2 && te[1] !== null && (te = []), te.length ? Ve(Z(o), te[0]) ? te.unshift(Z(o)) : te[1] = Z(o) : te = [Z(o)], c2.value = te;
        }
      } else
        c2.value = Z(o);
    n("update-month-year", { instance: o, month: b2.month, year: b2.year }), t2(e2.multiCalendarsSolo ? o : void 0);
  }, vt = async (o = false) => {
    if (e2.autoApply && (e2.monthPicker || e2.yearPicker)) {
      await nextTick();
      const b2 = e2.monthPicker ? o : false;
      e2.range ? n("auto-apply", b2 || !c2.value || c2.value.length === 1) : n("auto-apply", b2);
    }
    a3();
  }, Bt = (o, b2) => {
    const X2 = set(T2(), { month: B2.value(b2), year: U.value(b2) }), te = o < 0 ? addMonths(X2, 1) : subMonths(X2, 1);
    F(getMonth(te), getYear(te), o < 0, e2.preventMinMaxNavigation) && (q2(b2, getMonth(te), getYear(te)), P.value.multiCalendars && !e2.multiCalendarsSolo && ze(b2), n("update-month-year", { instance: b2, month: getMonth(te), year: getYear(te) }), t2());
  }, At = (o) => {
    Un(o) && Un(c2.value) && mt(x2.hours) && mt(x2.minutes) ? (o[0] && c2.value[0] && (c2.value[0] = je(o[0], x2.hours[0], x2.minutes[0], w2())), o[1] && c2.value[1] && (c2.value[1] = je(o[1], x2.hours[1], x2.minutes[1], w2(false)))) : e2.multiDates && Array.isArray(c2.value) ? c2.value[c2.value.length - 1] = oe(o) : !e2.range && !Wn(o) && (c2.value = oe(o)), n("time-update");
  }, Gt = (o, b2 = true, X2 = false) => {
    const te = b2 ? o : x2.hours, De = !b2 && !X2 ? o : x2.minutes, Qe = X2 ? o : x2.seconds;
    if (e2.range && Wn(c2.value) && mt(te) && mt(De) && mt(Qe) && !e2.disableTimeRangeValidation) {
      const st = (W) => je(c2.value[W], te[W], De[W], Qe[W]), h3 = (W) => setMilliseconds(c2.value[W], 0);
      if (pe(c2.value[0], c2.value[1]) && (isAfter(st(0), h3(1)) || isBefore(st(1), h3(0))))
        return;
    }
    if (K2("hours", te), K2("minutes", De), K2("seconds", Qe), c2.value)
      if (e2.multiDates) {
        const st = z2();
        st && At(st);
      } else
        At(c2.value);
    else
      e2.timePicker && At(e2.range ? [T2(), T2()] : T2());
    a3();
  }, Zt = (o, b2) => {
    e2.monthChangeOnScroll && Bt(e2.monthChangeOnScroll !== "inverse" ? -o.deltaY : o.deltaY, b2);
  }, qt = (o, b2, X2 = false) => {
    e2.monthChangeOnArrows && e2.vertical === X2 && Yt(o, b2);
  }, Yt = (o, b2) => {
    Bt(o === "right" ? -1 : 1, b2);
  };
  return {
    time: x2,
    month: B2,
    year: U,
    modelValue: c2,
    calendars: j,
    monthYearSelect: vt,
    isDisabled: g,
    updateTime: Gt,
    getWeekNum: nt,
    selectDate: Je,
    updateMonthYear: Tt,
    handleScroll: Zt,
    getMarker: (o) => e2.markers.find((b2) => pe(C(o.value), C(b2.date))),
    handleArrow: qt,
    handleSwipe: Yt,
    selectCurrentDate: () => {
      e2.range ? c2.value && Array.isArray(c2.value) && c2.value[0] ? c2.value = Ve(T2(), c2.value[0]) ? [T2(), c2.value[0]] : [c2.value[0], T2()] : c2.value = [T2()] : c2.value = T2(), Y2();
    },
    presetDateRange: (o, b2) => {
      b2 || o.length && o.length <= 2 && e2.range && (c2.value = o.map((X2) => T2(X2)), Y2(), e2.multiCalendars && nextTick().then(() => se(true)));
    }
  };
};
var cl = (e2, n, a3) => {
  const t2 = ref(), {
    getZonedToUtc: s3,
    getZonedDate: m3,
    formatDate: g,
    getDefaultPattern: C,
    checkRangeEnabled: E2,
    checkPartialRangeValue: S3,
    isValidDate: F,
    setDateMonthOrYear: P,
    defaults: c2
  } = xe(n), k2 = ref(""), Q2 = toRef(n, "format");
  watch(t2, () => {
    e2("internal-model-change", t2.value);
  }), watch(Q2, () => {
    z2();
  });
  const j = (r) => {
    const Y2 = r || T2();
    return n.modelType ? u2(Y2) : {
      hours: getHours(Y2),
      minutes: getMinutes(Y2),
      seconds: n.enableSeconds ? getSeconds(Y2) : 0
    };
  }, x2 = (r) => n.modelType ? u2(r) : { month: getMonth(r), year: getYear(r) }, B2 = (r) => Array.isArray(r) ? E2(() => [
    setYear(T2(), r[0]),
    r[1] ? setYear(T2(), r[1]) : S3()
  ]) : setYear(T2(), +r), U = (r, Y2) => (typeof r == "string" || typeof r == "number") && n.modelType ? f(r) : Y2, O2 = (r) => Array.isArray(r) ? [
    U(
      r[0],
      je(null, +r[0].hours, +r[0].minutes, r[0].seconds)
    ),
    U(
      r[1],
      je(null, +r[1].hours, +r[1].minutes, r[1].seconds)
    )
  ] : U(r, je(null, r.hours, r.minutes, r.seconds)), q2 = (r) => Array.isArray(r) ? n.multiDates ? r.map((Y2) => U(Y2, P(null, +Y2.month, +Y2.year))) : E2(() => [
    U(r[0], P(null, +r[0].month, +r[0].year)),
    U(
      r[1],
      r[1] ? P(null, +r[1].month, +r[1].year) : S3()
    )
  ]) : U(r, P(null, +r.month, +r.year)), K2 = (r) => {
    if (Array.isArray(r))
      return r.map((Y2) => f(Y2));
    throw new Error(zt.dateArr("multi-dates"));
  }, ne = (r) => {
    if (Array.isArray(r))
      return [T2(r[0]), T2(r[1])];
    throw new Error(zt.dateArr("week-picker"));
  }, se = (r) => n.modelAuto ? Array.isArray(r) ? [f(r[0]), f(r[1])] : n.autoApply ? [f(r)] : [f(r), null] : Array.isArray(r) ? E2(() => [
    f(r[0]),
    r[1] ? f(r[1]) : S3()
  ]) : f(r), de = () => {
    Array.isArray(t2.value) && n.range && t2.value.length === 1 && t2.value.push(S3());
  }, ue = () => {
    const r = t2.value;
    return [
      u2(r[0]),
      r[1] ? u2(r[1]) : S3()
    ];
  }, ve = () => t2.value[1] ? ue() : u2(Pe(t2.value[0])), V = () => (t2.value || []).map((r) => u2(r)), D2 = () => (de(), n.modelAuto ? ve() : n.multiDates ? V() : Array.isArray(t2.value) ? E2(() => ue()) : u2(Pe(t2.value))), d3 = (r) => r ? n.timePicker ? O2(Pe(r)) : n.monthPicker ? q2(Pe(r)) : n.yearPicker ? B2(Pe(r)) : n.multiDates ? K2(Pe(r)) : n.weekPicker ? ne(Pe(r)) : se(Pe(r)) : null, N = (r) => {
    const Y2 = d3(r);
    F(Pe(Y2)) ? (t2.value = Pe(Y2), z2()) : (t2.value = null, k2.value = "");
  }, _ = () => {
    var Y2;
    const r = (le) => {
      var Ae;
      return format(le, (Ae = c2.value.textInputOptions) == null ? void 0 : Ae.format);
    };
    return `${r(t2.value[0])} ${(Y2 = c2.value.textInputOptions) == null ? void 0 : Y2.rangeSeparator} ${t2.value[1] ? r(t2.value[1]) : ""}`;
  }, w2 = () => {
    var r;
    return a3.value && t2.value ? Array.isArray(t2.value) ? _() : format(t2.value, (r = c2.value.textInputOptions) == null ? void 0 : r.format) : g(t2.value);
  }, y3 = () => {
    var r;
    return t2.value ? n.multiDates ? t2.value.map((Y2) => g(Y2)).join("; ") : n.textInput && typeof ((r = c2.value.textInputOptions) == null ? void 0 : r.format) == "string" ? w2() : g(t2.value) : "";
  }, z2 = () => {
    !n.format || typeof n.format == "string" ? k2.value = y3() : k2.value = n.format(t2.value);
  }, f = (r) => {
    if (n.utc) {
      const Y2 = new Date(r);
      return n.utc === "preserve" ? new Date(Y2.getTime() + Y2.getTimezoneOffset() * 6e4) : Y2;
    }
    return n.modelType ? n.modelType === "date" || n.modelType === "timestamp" ? m3(new Date(r)) : n.modelType === "format" && (typeof n.format == "string" || !n.format) ? parse(r, C(), new Date()) : m3(parse(r, n.modelType, new Date())) : m3(new Date(r));
  }, u2 = (r) => r ? n.utc ? Da(r, n.utc === "preserve", n.enableSeconds) : n.modelType ? n.modelType === "timestamp" ? +s3(r) : n.modelType === "format" && (typeof n.format == "string" || !n.format) ? g(s3(r)) : g(s3(r), n.modelType) : s3(r) : "", $ = (r) => {
    e2("update:model-value", r);
  }, l = (r) => Array.isArray(t2.value) ? n.multiDates ? t2.value.map((Y2) => r(Y2)) : [
    r(t2.value[0]),
    t2.value[1] ? r(t2.value[1]) : S3()
  ] : r(Pe(t2.value)), v = (r) => $(Pe(l(r)));
  return {
    inputValue: k2,
    internalModelValue: t2,
    checkBeforeEmit: () => t2.value ? n.range ? n.partialRange ? t2.value.length >= 1 : t2.value.length === 2 : !!t2.value : false,
    parseExternalModelValue: N,
    formatInputValue: z2,
    emitModelValue: () => (z2(), n.monthPicker ? v(x2) : n.timePicker ? v(j) : n.yearPicker ? v(getYear) : n.weekPicker ? $(t2.value) : $(D2()))
  };
};
var fl = (e2, n) => {
  const { validateMonthYearInRange: a3, validateMaxDate: t2, validateMinDate: s3, defaults: m3 } = xe(e2), g = (P, c2) => {
    let k2 = P;
    return m3.value.filters.months.includes(getMonth(k2)) ? (k2 = c2 ? addMonths(P, 1) : subMonths(P, 1), g(k2, c2)) : k2;
  }, C = (P, c2) => {
    let k2 = P;
    return m3.value.filters.years.includes(getYear(k2)) ? (k2 = c2 ? addYears(P, 1) : subYears(P, 1), C(k2, c2)) : k2;
  }, E2 = (P) => {
    const c2 = set(new Date(), { month: e2.month, year: e2.year });
    let k2 = P ? addMonths(c2, 1) : subMonths(c2, 1);
    e2.disableYearSelect && (k2 = setYear(k2, e2.year));
    let Q2 = getMonth(k2), j = getYear(k2);
    m3.value.filters.months.includes(Q2) && (k2 = g(k2, P), Q2 = getMonth(k2), j = getYear(k2)), m3.value.filters.years.includes(j) && (k2 = C(k2, P), j = getYear(k2)), a3(Q2, j, P, e2.preventMinMaxNavigation) && S3(Q2, j);
  }, S3 = (P, c2) => {
    n("update-month-year", { month: P, year: c2 });
  }, F = computed(() => (P) => {
    if (!e2.preventMinMaxNavigation || P && !e2.maxDate || !P && !e2.minDate)
      return false;
    const c2 = set(new Date(), { month: e2.month, year: e2.year }), k2 = P ? addMonths(c2, 1) : subMonths(c2, 1), Q2 = [getMonth(k2), getYear(k2)];
    return P ? !t2(...Q2) : !s3(...Q2);
  });
  return { handleMonthYearChange: E2, isDisabled: F, updateMonthYear: S3 };
};
var xt = ((e2) => (e2.center = "center", e2.left = "left", e2.right = "right", e2))(xt || {});
var vl = (e2, n, a3, t2) => {
  const s3 = ref({
    top: "0",
    left: "0",
    transform: "none",
    opacity: "0"
  }), m3 = ref(false), g = toRef(t2, "teleportCenter"), C = computed(() => m3.value ? "-100%" : "0"), E2 = () => {
    S3(), s3.value.opacity = "0";
  };
  watch(g, () => {
    U();
  }), onMounted(() => {
    S3();
  });
  const S3 = () => {
    const D2 = Te(n);
    if (D2) {
      const { top: d3, left: N, width: _, height: w2 } = Q2(D2);
      s3.value.top = `${d3 + w2 / 2}px`, k2(N, _, 50);
    }
  }, F = (D2) => {
    if (t2.teleport) {
      const d3 = D2.getBoundingClientRect();
      return {
        left: d3.left + window.scrollX,
        top: d3.top + window.scrollY
      };
    }
    return { top: 0, left: 0 };
  }, P = (D2, d3) => {
    s3.value.left = `${D2 + d3}px`, s3.value.transform = `translate(-100%, ${C.value})`;
  }, c2 = (D2) => {
    s3.value.left = `${D2}px`, s3.value.transform = `translate(0, ${C.value})`;
  }, k2 = (D2, d3, N) => {
    t2.position === xt.left && c2(D2), t2.position === xt.right && P(D2, d3), t2.position === xt.center && (s3.value.left = `${D2 + d3 / 2}px`, s3.value.transform = N ? `translate(-50%, -${N}%)` : `translate(-50%, ${C.value})`);
  }, Q2 = (D2) => {
    const { width: d3, height: N } = D2.getBoundingClientRect(), { top: _, left: w2 } = t2.altPosition ? t2.altPosition(D2) : F(D2);
    return { top: +_, left: +w2, width: d3, height: N };
  }, j = () => {
    const D2 = Te(n);
    if (D2) {
      const { top: d3, left: N, width: _, height: w2 } = Q2(D2), y3 = se();
      s3.value.top = `${d3 + w2 / 2}px`, k2(N, _, y3 === "top" ? 100 : 0);
    }
  }, x2 = () => {
    s3.value.left = "50%", s3.value.top = "50%", s3.value.transform = "translate(-50%, -50%)", s3.value.position = "fixed", delete s3.value.opacity;
  }, B2 = () => {
    const D2 = Te(n), { top: d3, left: N, transform: _ } = t2.altPosition(D2);
    s3.value = { top: `${d3}px`, left: `${N}px`, transform: _ || "" };
  }, U = (D2 = true) => {
    if (!t2.inline)
      return g.value ? x2() : t2.altPosition !== null ? B2() : (D2 && a3("recalculate-position"), ue());
  }, O2 = ({
    inputEl: D2,
    menuEl: d3,
    left: N,
    width: _
  }) => {
    window.screen.width > 768 && k2(N, _), ne(D2, d3);
  }, q2 = (D2, d3) => {
    const { top: N, left: _, height: w2, width: y3 } = Q2(D2);
    s3.value.top = `${w2 + N + +t2.offset}px`, m3.value = false, O2({ inputEl: D2, menuEl: d3, left: _, width: y3 });
  }, K2 = (D2, d3) => {
    const { top: N, left: _, width: w2 } = Q2(D2);
    s3.value.top = `${N - +t2.offset}px`, m3.value = true, O2({ inputEl: D2, menuEl: d3, left: _, width: w2 });
  }, ne = (D2, d3) => {
    if (t2.autoPosition) {
      const { left: N, width: _ } = Q2(D2), { left: w2, right: y3 } = d3.getBoundingClientRect();
      return w2 <= 0 ? c2(N) : y3 >= document.documentElement.clientWidth ? P(N, _) : k2(N, _);
    }
  }, se = () => {
    const D2 = Te(e2), d3 = Te(n);
    if (D2 && d3) {
      const { height: N } = D2.getBoundingClientRect(), { top: _, height: w2 } = d3.getBoundingClientRect(), z2 = window.innerHeight - _ - w2, f = _;
      return N <= z2 ? "bottom" : N > z2 && N <= f ? "top" : z2 >= f ? "bottom" : "top";
    }
    return "bottom";
  }, de = (D2, d3) => se() === "bottom" ? q2(D2, d3) : K2(D2, d3), ue = () => {
    const D2 = Te(n), d3 = Te(e2);
    if (D2 && d3)
      return t2.autoPosition ? de(D2, d3) : q2(D2, d3);
  }, ve = function(D2) {
    if (D2) {
      const d3 = D2.scrollHeight > D2.clientHeight, _ = window.getComputedStyle(D2).overflowY.indexOf("hidden") !== -1;
      return d3 && !_;
    }
    return true;
  }, V = function(D2) {
    return !D2 || D2 === document.body || D2.nodeType === Node.DOCUMENT_FRAGMENT_NODE ? window : ve(D2) ? D2 : V(D2.parentNode);
  };
  return { openOnTop: m3, menuStyle: s3, resetPosition: E2, setMenuPosition: U, setInitialPosition: j, getScrollableParent: V };
};
var bt = [
  { name: "clock-icon", use: ["time", "calendar"] },
  { name: "arrow-left", use: ["month-year", "calendar"] },
  { name: "arrow-right", use: ["month-year", "calendar"] },
  { name: "arrow-up", use: ["time", "calendar", "month-year"] },
  { name: "arrow-down", use: ["time", "calendar", "month-year"] },
  { name: "calendar-icon", use: ["month-year", "time", "calendar"] },
  { name: "day", use: ["calendar"] },
  { name: "month-overlay-value", use: ["calendar", "month-year"] },
  { name: "year-overlay-value", use: ["calendar", "month-year"] },
  { name: "year-overlay", use: ["month-year"] },
  { name: "month-overlay", use: ["month-year"] },
  { name: "month-overlay-header", use: ["month-year"] },
  { name: "year-overlay-header", use: ["month-year"] },
  { name: "hours-overlay-value", use: ["calendar", "time"] },
  { name: "minutes-overlay-value", use: ["calendar", "time"] },
  { name: "seconds-overlay-value", use: ["calendar", "time"] },
  { name: "hours", use: ["calendar", "time"] },
  { name: "minutes", use: ["calendar", "time"] },
  { name: "month", use: ["calendar", "month-year"] },
  { name: "year", use: ["calendar", "month-year"] },
  { name: "action-buttons", use: ["action"] },
  { name: "action-preview", use: ["action"] },
  { name: "calendar-header", use: ["calendar"] },
  { name: "marker-tooltip", use: ["calendar"] },
  { name: "action-extra", use: ["menu"] },
  { name: "time-picker-overlay", use: ["calendar", "time"] },
  { name: "am-pm-button", use: ["calendar", "time"] },
  { name: "left-sidebar", use: ["menu"] },
  { name: "right-sidebar", use: ["menu"] },
  { name: "month-year", use: ["month-year"] },
  { name: "time-picker", use: ["menu"] },
  { name: "action-row", use: ["action"] }
];
var ml = [{ name: "trigger" }, { name: "input-icon" }, { name: "clear-icon" }, { name: "dp-input" }];
var yl = {
  all: () => bt,
  monthYear: () => bt.filter((e2) => e2.use.includes("month-year")),
  input: () => ml,
  timePicker: () => bt.filter((e2) => e2.use.includes("time")),
  action: () => bt.filter((e2) => e2.use.includes("action")),
  calendar: () => bt.filter((e2) => e2.use.includes("calendar")),
  menu: () => bt.filter((e2) => e2.use.includes("menu"))
};
var pt = (e2, n, a3) => {
  const t2 = [];
  return yl[n]().forEach((s3) => {
    e2[s3.name] && t2.push(s3.name);
  }), a3 && a3.length && a3.forEach((s3) => {
    s3.slot && t2.push(s3.slot);
  }), t2;
};
var Kt = (e2) => ({ transitionName: computed(() => (a3) => e2 && typeof e2 != "boolean" ? a3 ? e2.open : e2.close : ""), showTransition: !!e2 });
var ft = {
  multiCalendars: { type: [Boolean, Number, String], default: null },
  modelValue: { type: [String, Date, Array, Object, Number], default: null },
  modelType: { type: String, default: null },
  position: { type: String, default: "center" },
  dark: { type: Boolean, default: false },
  format: {
    type: [String, Function],
    default: () => null
  },
  closeOnScroll: { type: Boolean, default: false },
  autoPosition: { type: Boolean, default: true },
  closeOnAutoApply: { type: Boolean, default: true },
  altPosition: { type: Function, default: null },
  transitions: { type: [Boolean, Object], default: true },
  formatLocale: { type: Object, default: null },
  utc: { type: [Boolean, String], default: false },
  ariaLabels: { type: Object, default: () => ({}) },
  offset: { type: [Number, String], default: 10 },
  hideNavigation: { type: Array, default: () => [] },
  timezone: { type: String, default: null },
  vertical: { type: Boolean, default: false },
  disableMonthYearSelect: { type: Boolean, default: false },
  disableYearSelect: { type: Boolean, default: false },
  menuClassName: { type: String, default: null },
  dayClass: { type: Function, default: null },
  yearRange: { type: Array, default: () => [1900, 2100] },
  multiCalendarsSolo: { type: Boolean, default: false },
  calendarCellClassName: { type: String, default: null },
  enableTimePicker: { type: Boolean, default: true },
  autoApply: { type: Boolean, default: false },
  disabledDates: { type: [Array, Function], default: () => [] },
  monthNameFormat: { type: String, default: "short" },
  startDate: { type: [Date, String], default: null },
  startTime: { type: [Object, Array], default: null },
  hideOffsetDates: { type: Boolean, default: false },
  autoRange: { type: [Number, String], default: null },
  noToday: { type: Boolean, default: false },
  disabledWeekDays: { type: Array, default: () => [] },
  allowedDates: { type: Array, default: () => [] },
  showNowButton: { type: Boolean, default: false },
  nowButtonLabel: { type: String, default: "Now" },
  markers: { type: Array, default: () => [] },
  modeHeight: { type: [Number, String], default: 255 },
  escClose: { type: Boolean, default: true },
  spaceConfirm: { type: Boolean, default: true },
  monthChangeOnArrows: { type: Boolean, default: true },
  presetRanges: { type: Array, default: () => [] },
  flow: { type: Array, default: () => [] },
  partialFlow: { type: Boolean, default: false },
  preventMinMaxNavigation: { type: Boolean, default: false },
  minRange: { type: [Number, String], default: null },
  maxRange: { type: [Number, String], default: null },
  multiDatesLimit: { type: [Number, String], default: null },
  reverseYears: { type: Boolean, default: false },
  keepActionRow: { type: Boolean, default: false },
  weekPicker: { type: Boolean, default: false },
  filters: { type: Object, default: () => ({}) },
  arrowNavigation: { type: Boolean, default: false },
  multiStatic: { type: Boolean, default: true },
  disableTimeRangeValidation: { type: Boolean, default: false },
  highlight: {
    type: [Array, Function],
    default: null
  },
  highlightWeekDays: {
    type: Array,
    default: null
  },
  highlightDisabledDays: { type: Boolean, default: false },
  teleport: { type: [String, Boolean], default: null },
  teleportCenter: { type: Boolean, default: false },
  locale: { type: String, default: "en-Us" },
  weekNumName: { type: String, default: "W" },
  weekStart: { type: [Number, String], default: 1 },
  weekNumbers: {
    type: [String, Function],
    default: null
  },
  calendarClassName: { type: String, default: null },
  noSwipe: { type: Boolean, default: false },
  monthChangeOnScroll: { type: [Boolean, String], default: true },
  dayNames: {
    type: [Function, Array],
    default: null
  },
  monthPicker: { type: Boolean, default: false },
  customProps: { type: Object, default: null },
  yearPicker: { type: Boolean, default: false },
  modelAuto: { type: Boolean, default: false },
  selectText: { type: String, default: "Select" },
  cancelText: { type: String, default: "Cancel" },
  previewFormat: {
    type: [String, Function],
    default: () => ""
  },
  multiDates: { type: Boolean, default: false },
  partialRange: { type: Boolean, default: true },
  ignoreTimeValidation: { type: Boolean, default: false },
  minDate: { type: [Date, String], default: null },
  maxDate: { type: [Date, String], default: null },
  minTime: { type: Object, default: null },
  maxTime: { type: Object, default: null },
  name: { type: String, default: null },
  placeholder: { type: String, default: "" },
  hideInputIcon: { type: Boolean, default: false },
  clearable: { type: Boolean, default: true },
  state: { type: Boolean, default: null },
  required: { type: Boolean, default: false },
  autocomplete: { type: String, default: "off" },
  inputClassName: { type: String, default: null },
  inlineWithInput: { type: Boolean, default: false },
  textInputOptions: { type: Object, default: () => null },
  fixedStart: { type: Boolean, default: false },
  fixedEnd: { type: Boolean, default: false },
  timePicker: { type: Boolean, default: false },
  enableSeconds: { type: Boolean, default: false },
  is24: { type: Boolean, default: true },
  noHoursOverlay: { type: Boolean, default: false },
  noMinutesOverlay: { type: Boolean, default: false },
  noSecondsOverlay: { type: Boolean, default: false },
  hoursGridIncrement: { type: [String, Number], default: 1 },
  minutesGridIncrement: { type: [String, Number], default: 5 },
  secondsGridIncrement: { type: [String, Number], default: 5 },
  hoursIncrement: { type: [Number, String], default: 1 },
  minutesIncrement: { type: [Number, String], default: 1 },
  secondsIncrement: { type: [Number, String], default: 1 },
  range: { type: Boolean, default: false },
  uid: { type: String, default: null },
  disabled: { type: Boolean, default: false },
  readonly: { type: Boolean, default: false },
  inline: { type: Boolean, default: false },
  textInput: { type: Boolean, default: false },
  onClickOutside: { type: Function, default: null },
  noDisabledRange: { type: Boolean, default: false },
  sixWeeks: { type: [Boolean, String], default: false },
  actionRow: { type: Object, default: () => ({}) },
  allowPreventDefault: { type: Boolean, default: false },
  closeOnClearValue: { type: Boolean, default: true },
  focusStartDate: { type: Boolean, default: false },
  disabledTimes: { type: Function, default: void 0 },
  showLastInRange: { type: Boolean, default: true }
};
var gl = {
  key: 1,
  class: "dp__input_wrap"
};
var hl = ["id", "name", "inputmode", "placeholder", "disabled", "readonly", "required", "value", "autocomplete", "aria-label", "onKeydown"];
var pl = {
  key: 0,
  class: "dp__input_icon"
};
var kl = {
  key: 2,
  class: "dp__clear_icon"
};
var wl = defineComponent({
  __name: "DatepickerInput",
  props: {
    isMenuOpen: { type: Boolean, default: false },
    inputValue: { type: String, default: "" },
    ...ft
  },
  emits: [
    "clear",
    "open",
    "update:input-value",
    "set-input-date",
    "close",
    "select-date",
    "set-empty-date",
    "toggle",
    "focus-prev",
    "focus",
    "blur",
    "real-blur"
  ],
  setup(e2, { expose: n, emit: a3 }) {
    const t2 = e2, { getDefaultPattern: s3, isValidDate: m3, defaults: g, getDefaultStartTime: C, assignDefaultTime: E2 } = xe(t2), S3 = ref(), F = ref(null), P = ref(false), c2 = ref(false), k2 = computed(
      () => ({
        dp__pointer: !t2.disabled && !t2.readonly && !t2.textInput,
        dp__disabled: t2.disabled,
        dp__input_readonly: !t2.textInput,
        dp__input: true,
        dp__input_icon_pad: !t2.hideInputIcon,
        dp__input_valid: t2.state,
        dp__input_invalid: t2.state === false,
        dp__input_focus: P.value || t2.isMenuOpen,
        dp__input_reg: !t2.textInput,
        [t2.inputClassName]: !!t2.inputClassName
      })
    ), Q2 = () => {
      a3("set-input-date", null), t2.autoApply && (a3("set-empty-date"), S3.value = null);
    }, j = (d3) => {
      var _;
      const N = C();
      return ba(
        d3,
        ((_ = g.value.textInputOptions) == null ? void 0 : _.format) || s3(),
        N || E2({}),
        t2.inputValue,
        c2.value
      );
    }, x2 = (d3) => {
      const { rangeSeparator: N } = g.value.textInputOptions, [_, w2] = d3.split(`${N}`);
      if (_) {
        const y3 = j(_.trim()), z2 = w2 ? j(w2.trim()) : null, f = y3 && z2 ? [y3, z2] : [y3];
        S3.value = y3 ? f : null;
      }
    }, B2 = () => {
      c2.value = true;
    }, U = (d3) => {
      if (t2.range)
        x2(d3);
      else if (t2.multiDates) {
        const N = d3.split(";");
        S3.value = N.map((_) => j(_.trim())).filter((_) => _);
      } else
        S3.value = j(d3);
    }, O2 = (d3) => {
      var _;
      const { value: N } = d3.target;
      N !== "" ? ((_ = g.value.textInputOptions) != null && _.openMenu && !t2.isMenuOpen && a3("open"), U(N), a3("set-input-date", S3.value)) : Q2(), c2.value = false, a3("update:input-value", N);
    }, q2 = (d3) => {
      var N, _;
      t2.textInput ? (U(d3.target.value), (N = g.value.textInputOptions) != null && N.enterSubmit && m3(S3.value) && t2.inputValue !== "" ? (a3("set-input-date", S3.value, true), S3.value = null) : (_ = g.value.textInputOptions) != null && _.enterSubmit && t2.inputValue === "" && (S3.value = null, a3("clear"))) : se(d3);
    }, K2 = (d3) => {
      var N, _, w2;
      t2.textInput && ((N = g.value.textInputOptions) != null && N.tabSubmit) && U(d3.target.value), (_ = g.value.textInputOptions) != null && _.tabSubmit && m3(S3.value) && t2.inputValue !== "" ? (a3("set-input-date", S3.value, true), S3.value = null) : (w2 = g.value.textInputOptions) != null && w2.tabSubmit && t2.inputValue === "" && (S3.value = null, a3("clear"));
    }, ne = () => {
      P.value = true, a3("focus");
    }, se = (d3) => {
      var N;
      d3.preventDefault(), d3.stopImmediatePropagation(), d3.stopPropagation(), t2.textInput && ((N = g.value.textInputOptions) != null && N.openMenu) && !t2.inlineWithInput ? (a3("toggle"), g.value.textInputOptions.enterSubmit && a3("select-date")) : t2.textInput || a3("toggle");
    }, de = () => {
      a3("real-blur"), P.value = false, t2.isMenuOpen || a3("blur"), t2.autoApply && t2.textInput && S3.value && !t2.isMenuOpen && (a3("set-input-date", S3.value), a3("select-date"), S3.value = null);
    }, ue = () => {
      a3("clear");
    }, ve = (d3) => {
      if (!t2.textInput) {
        if (d3.code === "Tab")
          return;
        d3.preventDefault();
      }
    };
    return n({
      focusInput: () => {
        var d3;
        (d3 = F.value) == null || d3.focus({ preventScroll: true });
      },
      setParsedDate: (d3) => {
        S3.value = d3;
      }
    }), (d3, N) => {
      var _;
      return openBlock(), createElementBlock("div", { onClick: se }, [
        d3.$slots.trigger && !d3.$slots["dp-input"] && !d3.inline ? renderSlot(d3.$slots, "trigger", { key: 0 }) : createCommentVNode("", true),
        !d3.$slots.trigger && (!d3.inline || d3.inlineWithInput) ? (openBlock(), createElementBlock("div", gl, [
          d3.$slots["dp-input"] && !d3.$slots.trigger && !d3.inline ? renderSlot(d3.$slots, "dp-input", {
            key: 0,
            value: e2.inputValue,
            isMenuOpen: e2.isMenuOpen,
            onInput: O2,
            onEnter: q2,
            onTab: K2,
            onClear: ue,
            onBlur: de,
            onKeypress: ve,
            onPaste: B2
          }) : createCommentVNode("", true),
          d3.$slots["dp-input"] ? createCommentVNode("", true) : (openBlock(), createElementBlock("input", {
            key: 1,
            ref_key: "inputRef",
            ref: F,
            id: d3.uid ? `dp-input-${d3.uid}` : void 0,
            name: d3.name,
            class: normalizeClass(k2.value),
            inputmode: d3.textInput ? "text" : "none",
            placeholder: d3.placeholder,
            disabled: d3.disabled,
            readonly: d3.readonly,
            required: d3.required,
            value: e2.inputValue,
            autocomplete: d3.autocomplete,
            "aria-label": (_ = unref(g).ariaLabels) == null ? void 0 : _.input,
            onInput: O2,
            onKeydown: [
              withKeys(q2, ["enter"]),
              withKeys(K2, ["tab"]),
              ve
            ],
            onBlur: de,
            onFocus: ne,
            onKeypress: ve,
            onPaste: B2
          }, null, 42, hl)),
          createBaseVNode("div", {
            onClick: N[0] || (N[0] = (w2) => a3("toggle"))
          }, [
            d3.$slots["input-icon"] && !d3.hideInputIcon ? (openBlock(), createElementBlock("span", pl, [
              renderSlot(d3.$slots, "input-icon")
            ])) : createCommentVNode("", true),
            !d3.$slots["input-icon"] && !d3.hideInputIcon && !d3.$slots["dp-input"] ? (openBlock(), createBlock(unref(jt), {
              key: 1,
              class: "dp__input_icon dp__input_icons"
            })) : createCommentVNode("", true)
          ]),
          d3.$slots["clear-icon"] && e2.inputValue && d3.clearable && !d3.disabled && !d3.readonly ? (openBlock(), createElementBlock("span", kl, [
            renderSlot(d3.$slots, "clear-icon", { clear: ue })
          ])) : createCommentVNode("", true),
          d3.clearable && !d3.$slots["clear-icon"] && e2.inputValue && !d3.disabled && !d3.readonly ? (openBlock(), createBlock(unref(wa), {
            key: 3,
            class: "dp__clear_icon dp__input_icons",
            onClick: withModifiers(ue, ["stop", "prevent"])
          }, null, 8, ["onClick"])) : createCommentVNode("", true)
        ])) : createCommentVNode("", true)
      ]);
    };
  }
});
var bl = ["title"];
var Dl = { class: "dp__action_buttons" };
var $l = ["onKeydown", "disabled"];
var Ml = defineComponent({
  __name: "ActionRow",
  props: {
    menuMount: { type: Boolean, default: false },
    internalModelValue: { type: [Date, Array], default: null },
    calendarWidth: { type: Number, default: 0 },
    ...ft
  },
  emits: ["close-picker", "select-date", "select-now", "invalid-select"],
  setup(e2, { emit: n }) {
    const a3 = e2, { formatDate: t2, isValidTime: s3, defaults: m3 } = xe(a3), { buildMatrix: g } = ct(), C = ref(null), E2 = ref(null);
    onMounted(() => {
      a3.arrowNavigation && g([Te(C), Te(E2)], "actionRow");
    });
    const S3 = computed(() => a3.range && !a3.partialRange && a3.internalModelValue ? a3.internalModelValue.length === 2 : true), F = computed(() => !P.value || !c2.value || !S3.value), P = computed(() => !a3.enableTimePicker || a3.ignoreTimeValidation ? true : s3(a3.internalModelValue)), c2 = computed(() => a3.monthPicker ? a3.range && Array.isArray(a3.internalModelValue) ? !a3.internalModelValue.filter((q2) => !B2(q2)).length : B2(a3.internalModelValue) : true), k2 = () => {
      const O2 = m3.value.previewFormat;
      return a3.timePicker || a3.monthPicker, O2(Pe(a3.internalModelValue));
    }, Q2 = () => {
      const O2 = a3.internalModelValue;
      return m3.value.multiCalendars > 0 ? `${t2(O2[0])} - ${t2(O2[1])}` : [t2(O2[0]), t2(O2[1])];
    }, j = computed(() => !a3.internalModelValue || !a3.menuMount ? "" : typeof m3.value.previewFormat == "string" ? Array.isArray(a3.internalModelValue) ? a3.internalModelValue.length === 2 && a3.internalModelValue[1] ? Q2() : a3.multiDates ? a3.internalModelValue.map((O2) => `${t2(O2)}`) : a3.modelAuto ? `${t2(a3.internalModelValue[0])}` : `${t2(a3.internalModelValue[0])} -` : t2(a3.internalModelValue) : k2()), x2 = computed(
      () => Array.isArray(j.value) ? j.value.join(a3.multiDates ? "; " : " - ") : j.value
    ), B2 = (O2) => {
      if (!a3.monthPicker)
        return true;
      let q2 = true;
      const K2 = T2(St(O2));
      if (a3.minDate && a3.maxDate) {
        const ne = T2(St(a3.minDate)), se = T2(St(a3.maxDate));
        return Fe(K2, ne) && Ve(K2, se) || pe(K2, ne) || pe(K2, se);
      }
      if (a3.minDate) {
        const ne = T2(St(a3.minDate));
        q2 = Fe(K2, ne) || pe(K2, ne);
      }
      if (a3.maxDate) {
        const ne = T2(St(a3.maxDate));
        q2 = Ve(K2, ne) || pe(K2, ne);
      }
      return q2;
    }, U = () => {
      P.value && c2.value && S3.value ? n("select-date") : n("invalid-select");
    };
    return (O2, q2) => (openBlock(), createElementBlock("div", {
      class: "dp__action_row",
      style: normalizeStyle(e2.calendarWidth ? { width: `${e2.calendarWidth}px` } : {})
    }, [
      O2.$slots["action-row"] ? renderSlot(O2.$slots, "action-row", normalizeProps(mergeProps({ key: 0 }, {
        internalModelValue: e2.internalModelValue,
        disabled: F.value,
        selectDate: () => O2.$emit("select-date"),
        closePicker: () => O2.$emit("close-picker")
      }))) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
        unref(m3).actionRow.showPreview ? (openBlock(), createElementBlock("div", {
          key: 0,
          class: "dp__selection_preview",
          title: x2.value
        }, [
          O2.$slots["action-preview"] ? renderSlot(O2.$slots, "action-preview", {
            key: 0,
            value: e2.internalModelValue
          }) : createCommentVNode("", true),
          O2.$slots["action-preview"] ? createCommentVNode("", true) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
            createTextVNode(toDisplayString(x2.value), 1)
          ], 64))
        ], 8, bl)) : createCommentVNode("", true),
        createBaseVNode("div", Dl, [
          O2.$slots["action-buttons"] ? renderSlot(O2.$slots, "action-buttons", {
            key: 0,
            value: e2.internalModelValue
          }) : createCommentVNode("", true),
          O2.$slots["action-buttons"] ? createCommentVNode("", true) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
            !O2.inline && unref(m3).actionRow.showCancel ? (openBlock(), createElementBlock("button", {
              key: 0,
              type: "button",
              ref_key: "cancelButtonRef",
              ref: C,
              class: "dp__action_button dp__action_cancel",
              onClick: q2[0] || (q2[0] = (K2) => O2.$emit("close-picker")),
              onKeydown: [
                q2[1] || (q2[1] = withKeys((K2) => O2.$emit("close-picker"), ["enter"])),
                q2[2] || (q2[2] = withKeys((K2) => O2.$emit("close-picker"), ["space"]))
              ]
            }, toDisplayString(O2.cancelText), 545)) : createCommentVNode("", true),
            O2.showNowButton || unref(m3).actionRow.showNow ? (openBlock(), createElementBlock("button", {
              key: 1,
              type: "button",
              ref_key: "cancelButtonRef",
              ref: C,
              class: "dp__action_button dp__action_cancel",
              onClick: q2[3] || (q2[3] = (K2) => O2.$emit("select-now")),
              onKeydown: [
                q2[4] || (q2[4] = withKeys((K2) => O2.$emit("select-now"), ["enter"])),
                q2[5] || (q2[5] = withKeys((K2) => O2.$emit("select-now"), ["space"]))
              ]
            }, toDisplayString(O2.nowButtonLabel), 545)) : createCommentVNode("", true),
            unref(m3).actionRow.showSelect ? (openBlock(), createElementBlock("button", {
              key: 2,
              type: "button",
              class: "dp__action_button dp__action_select",
              onKeydown: [
                withKeys(U, ["enter"]),
                withKeys(U, ["space"])
              ],
              onClick: U,
              disabled: F.value,
              ref_key: "selectButtonRef",
              ref: E2
            }, toDisplayString(O2.selectText), 41, $l)) : createCommentVNode("", true)
          ], 64))
        ])
      ], 64))
    ], 4));
  }
});
var Tl = ["aria-label"];
var Al = {
  class: "dp__calendar_header",
  role: "row"
};
var Sl = {
  key: 0,
  class: "dp__calendar_header_item",
  role: "gridcell"
};
var Pl = createBaseVNode("div", { class: "dp__calendar_header_separator" }, null, -1);
var Cl = ["aria-label"];
var Nl = {
  key: 0,
  role: "gridcell",
  class: "dp__calendar_item dp__week_num"
};
var _l = { class: "dp__cell_inner" };
var Rl = ["aria-selected", "aria-disabled", "aria-label", "onClick", "onKeydown", "onMouseenter", "onMouseleave"];
var Ol = defineComponent({
  __name: "Calendar",
  props: {
    mappedDates: { type: Array, default: () => [] },
    getWeekNum: {
      type: Function,
      default: () => ""
    },
    specificMode: { type: Boolean, default: false },
    instance: { type: Number, default: 0 },
    month: { type: Number, default: 0 },
    year: { type: Number, default: 0 },
    ...ft
  },
  emits: [
    "select-date",
    "set-hover-date",
    "handle-scroll",
    "mount",
    "handle-swipe",
    "handle-space",
    "tooltip-open",
    "tooltip-close"
  ],
  setup(e2, { expose: n, emit: a3 }) {
    const t2 = e2, { buildMultiLevelMatrix: s3 } = ct(), { setDateMonthOrYear: m3, defaults: g } = xe(t2), C = ref(null), E2 = ref({
      bottom: "",
      left: "",
      transform: ""
    }), S3 = ref([]), F = ref(null), P = ref(true), c2 = ref(""), k2 = ref({ startX: 0, endX: 0, startY: 0, endY: 0 }), Q2 = ref([]), j = ref({ left: "50%" }), x2 = computed(() => t2.dayNames ? Array.isArray(t2.dayNames) ? t2.dayNames : t2.dayNames(t2.locale, +t2.weekStart) : Xa(t2.locale, +t2.weekStart));
    onMounted(() => {
      a3("mount", { cmp: "calendar", refs: S3 }), t2.noSwipe || F.value && (F.value.addEventListener("touchstart", V, { passive: false }), F.value.addEventListener("touchend", D2, { passive: false }), F.value.addEventListener("touchmove", d3, { passive: false })), t2.monthChangeOnScroll && F.value && F.value.addEventListener("wheel", w2, { passive: false });
    });
    const B2 = (y3) => y3 ? t2.vertical ? "vNext" : "next" : t2.vertical ? "vPrevious" : "previous", U = (y3, z2) => {
      if (t2.transitions) {
        const f = Ke(m3(T2(), t2.month, t2.year));
        c2.value = Fe(Ke(m3(T2(), y3, z2)), f) ? g.value.transitions[B2(true)] : g.value.transitions[B2(false)], P.value = false, nextTick(() => {
          P.value = true;
        });
      }
    }, O2 = computed(
      () => ({
        [t2.calendarClassName]: !!t2.calendarClassName
      })
    ), q2 = computed(() => (y3) => {
      const z2 = tl(y3);
      return {
        dp__marker_dot: z2.type === "dot",
        dp__marker_line: z2.type === "line"
      };
    }), K2 = computed(() => (y3) => pe(y3, C.value)), ne = computed(() => ({
      dp__calendar: true,
      dp__calendar_next: g.value.multiCalendars > 0 && t2.instance !== 0
    })), se = computed(() => (y3) => t2.hideOffsetDates ? y3.current : true), de = computed(() => t2.specificMode ? { height: `${t2.modeHeight}px` } : void 0), ue = async (y3, z2, f) => {
      var u2, $;
      if (a3("set-hover-date", y3), ($ = (u2 = y3.marker) == null ? void 0 : u2.tooltip) != null && $.length) {
        const l = Te(S3.value[z2][f]);
        if (l) {
          const { width: v, height: R2 } = l.getBoundingClientRect();
          C.value = y3.value;
          let i2 = { left: `${v / 2}px` }, r = -50;
          if (await nextTick(), Q2.value[0]) {
            const { left: Y2, width: le } = Q2.value[0].getBoundingClientRect();
            Y2 < 0 && (i2 = { left: "0" }, r = 0, j.value.left = `${v / 2}px`), window.innerWidth < Y2 + le && (i2 = { right: "0" }, r = 0, j.value.left = `${le - v / 2}px`);
          }
          E2.value = {
            bottom: `${R2}px`,
            ...i2,
            transform: `translateX(${r}%)`
          }, a3("tooltip-open", y3.marker);
        }
      }
    }, ve = (y3) => {
      C.value && (C.value = null, E2.value = JSON.parse(JSON.stringify({ bottom: "", left: "", transform: "" })), a3("tooltip-close", y3.marker));
    }, V = (y3) => {
      k2.value.startX = y3.changedTouches[0].screenX, k2.value.startY = y3.changedTouches[0].screenY;
    }, D2 = (y3) => {
      k2.value.endX = y3.changedTouches[0].screenX, k2.value.endY = y3.changedTouches[0].screenY, N();
    }, d3 = (y3) => {
      t2.vertical && !t2.inline && y3.preventDefault();
    }, N = () => {
      const y3 = t2.vertical ? "Y" : "X";
      Math.abs(k2.value[`start${y3}`] - k2.value[`end${y3}`]) > 10 && a3("handle-swipe", k2.value[`start${y3}`] > k2.value[`end${y3}`] ? "right" : "left");
    }, _ = (y3, z2, f) => {
      y3 && (Array.isArray(S3.value[z2]) ? S3.value[z2][f] = y3 : S3.value[z2] = [y3]), t2.arrowNavigation && s3(S3.value, "calendar");
    }, w2 = (y3) => {
      t2.monthChangeOnScroll && (y3.preventDefault(), a3("handle-scroll", y3));
    };
    return n({ triggerTransition: U }), (y3, z2) => {
      var f;
      return openBlock(), createElementBlock("div", {
        class: normalizeClass(ne.value)
      }, [
        createBaseVNode("div", {
          style: normalizeStyle(de.value),
          ref_key: "calendarWrapRef",
          ref: F,
          role: "grid",
          class: normalizeClass(O2.value),
          "aria-label": (f = unref(g).ariaLabels) == null ? void 0 : f.calendarWrap
        }, [
          e2.specificMode ? createCommentVNode("", true) : (openBlock(), createElementBlock(Fragment, { key: 0 }, [
            createBaseVNode("div", Al, [
              y3.weekNumbers ? (openBlock(), createElementBlock("div", Sl, toDisplayString(y3.weekNumName), 1)) : createCommentVNode("", true),
              (openBlock(true), createElementBlock(Fragment, null, renderList(x2.value, (u2, $) => (openBlock(), createElementBlock("div", {
                class: "dp__calendar_header_item",
                role: "gridcell",
                key: $
              }, [
                y3.$slots["calendar-header"] ? renderSlot(y3.$slots, "calendar-header", {
                  key: 0,
                  day: u2,
                  index: $
                }) : createCommentVNode("", true),
                y3.$slots["calendar-header"] ? createCommentVNode("", true) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
                  createTextVNode(toDisplayString(u2), 1)
                ], 64))
              ]))), 128))
            ]),
            Pl,
            createVNode(Transition, {
              name: c2.value,
              css: !!y3.transitions
            }, {
              default: withCtx(() => {
                var u2;
                return [
                  P.value ? (openBlock(), createElementBlock("div", {
                    key: 0,
                    class: "dp__calendar",
                    role: "grid",
                    "aria-label": (u2 = unref(g).ariaLabels) == null ? void 0 : u2.calendarDays
                  }, [
                    (openBlock(true), createElementBlock(Fragment, null, renderList(e2.mappedDates, ($, l) => (openBlock(), createElementBlock("div", {
                      class: "dp__calendar_row",
                      role: "row",
                      key: l
                    }, [
                      y3.weekNumbers ? (openBlock(), createElementBlock("div", Nl, [
                        createBaseVNode("div", _l, toDisplayString(e2.getWeekNum($.days)), 1)
                      ])) : createCommentVNode("", true),
                      (openBlock(true), createElementBlock(Fragment, null, renderList($.days, (v, R2) => {
                        var i2, r, Y2;
                        return openBlock(), createElementBlock("div", {
                          role: "gridcell",
                          class: "dp__calendar_item",
                          ref_for: true,
                          ref: (le) => _(le, l, R2),
                          key: R2 + l,
                          "aria-selected": v.classData.dp__active_date || v.classData.dp__range_start || v.classData.dp__range_start,
                          "aria-disabled": v.classData.dp__cell_disabled,
                          "aria-label": (r = (i2 = unref(g).ariaLabels) == null ? void 0 : i2.day) == null ? void 0 : r.call(i2, v),
                          tabindex: "0",
                          onClick: withModifiers((le) => y3.$emit("select-date", v), ["stop", "prevent"]),
                          onKeydown: [
                            withKeys((le) => y3.$emit("select-date", v), ["enter"]),
                            withKeys((le) => y3.$emit("handle-space", v), ["space"])
                          ],
                          onMouseenter: (le) => ue(v, l, R2),
                          onMouseleave: (le) => ve(v)
                        }, [
                          createBaseVNode("div", {
                            class: normalizeClass(["dp__cell_inner", v.classData])
                          }, [
                            y3.$slots.day && se.value(v) ? renderSlot(y3.$slots, "day", {
                              key: 0,
                              day: +v.text,
                              date: v.value
                            }) : createCommentVNode("", true),
                            y3.$slots.day ? createCommentVNode("", true) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
                              createTextVNode(toDisplayString(v.text), 1)
                            ], 64)),
                            v.marker && se.value(v) ? (openBlock(), createElementBlock("div", {
                              key: 2,
                              class: normalizeClass(q2.value(v.marker)),
                              style: normalizeStyle(v.marker.color ? { backgroundColor: v.marker.color } : {})
                            }, null, 6)) : createCommentVNode("", true),
                            K2.value(v.value) ? (openBlock(), createElementBlock("div", {
                              key: 3,
                              class: "dp__marker_tooltip",
                              ref_for: true,
                              ref_key: "activeTooltip",
                              ref: Q2,
                              style: normalizeStyle(E2.value)
                            }, [
                              (Y2 = v.marker) != null && Y2.tooltip ? (openBlock(), createElementBlock("div", {
                                key: 0,
                                class: "dp__tooltip_content",
                                onClick: z2[0] || (z2[0] = withModifiers(() => {
                                }, ["stop"]))
                              }, [
                                (openBlock(true), createElementBlock(Fragment, null, renderList(v.marker.tooltip, (le, Ae) => (openBlock(), createElementBlock("div", {
                                  key: Ae,
                                  class: "dp__tooltip_text"
                                }, [
                                  y3.$slots["marker-tooltip"] ? renderSlot(y3.$slots, "marker-tooltip", {
                                    key: 0,
                                    tooltip: le,
                                    day: v.value
                                  }) : createCommentVNode("", true),
                                  y3.$slots["marker-tooltip"] ? createCommentVNode("", true) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
                                    createBaseVNode("div", {
                                      class: "dp__tooltip_mark",
                                      style: normalizeStyle(le.color ? { backgroundColor: le.color } : {})
                                    }, null, 4),
                                    createBaseVNode("div", null, toDisplayString(le.text), 1)
                                  ], 64))
                                ]))), 128)),
                                createBaseVNode("div", {
                                  class: "dp__arrow_bottom_tp",
                                  style: normalizeStyle(j.value)
                                }, null, 4)
                              ])) : createCommentVNode("", true)
                            ], 4)) : createCommentVNode("", true)
                          ], 2)
                        ], 40, Rl);
                      }), 128))
                    ]))), 128))
                  ], 8, Cl)) : createCommentVNode("", true)
                ];
              }),
              _: 3
            }, 8, ["name", "css"])
          ], 64))
        ], 14, Tl)
      ], 2);
    };
  }
});
var Il = ["aria-label", "aria-disabled"];
var sn = defineComponent({
  __name: "ActionIcon",
  props: {
    ariaLabel: {},
    disabled: { type: Boolean }
  },
  emits: ["activate", "set-ref"],
  setup(e2, { emit: n }) {
    const a3 = ref(null);
    return onMounted(() => n("set-ref", a3)), (t2, s3) => (openBlock(), createElementBlock("button", {
      type: "button",
      class: "dp__btn dp__month_year_col_nav",
      onClick: s3[0] || (s3[0] = (m3) => t2.$emit("activate")),
      onKeydown: [
        s3[1] || (s3[1] = withKeys(withModifiers((m3) => t2.$emit("activate"), ["prevent"]), ["enter"])),
        s3[2] || (s3[2] = withKeys(withModifiers((m3) => t2.$emit("activate"), ["prevent"]), ["space"]))
      ],
      tabindex: "0",
      "aria-label": t2.ariaLabel,
      "aria-disabled": t2.disabled,
      ref_key: "elRef",
      ref: a3
    }, [
      createBaseVNode("span", {
        class: normalizeClass(["dp__inner_nav", { dp__inner_nav_disabled: t2.disabled }])
      }, [
        renderSlot(t2.$slots, "default")
      ], 2)
    ], 40, Il));
  }
});
var Bl = ["onKeydown"];
var Yl = { class: "dp__selection_grid_header" };
var Vl = ["aria-selected", "aria-disabled", "onClick", "onKeydown", "onMouseover"];
var El = ["aria-label", "onKeydown"];
var _t = defineComponent({
  __name: "SelectionGrid",
  props: {
    items: { type: Array, default: () => [] },
    modelValue: { type: [String, Number], default: null },
    multiModelValue: { type: Array, default: () => [] },
    disabledValues: { type: Array, default: () => [] },
    minValue: { type: [Number, String], default: null },
    maxValue: { type: [Number, String], default: null },
    year: { type: Number, default: 0 },
    skipActive: { type: Boolean, default: false },
    headerRefs: { type: Array, default: () => [] },
    skipButtonRef: { type: Boolean, default: false },
    monthPicker: { type: Boolean, default: false },
    yearPicker: { type: Boolean, default: false },
    escClose: { type: Boolean, default: true },
    type: { type: String, default: null },
    arrowNavigation: { type: Boolean, default: false },
    autoApply: { type: Boolean, default: false },
    textInput: { type: Boolean, default: false },
    ariaLabels: { type: Object, default: () => ({}) },
    hideNavigation: { type: Array, default: () => [] }
  },
  emits: ["update:model-value", "selected", "toggle", "reset-flow"],
  setup(e2, { expose: n, emit: a3 }) {
    const t2 = e2, { setSelectionGrid: s3, buildMultiLevelMatrix: m3, setMonthPicker: g } = ct(), { hideNavigationButtons: C } = xe(t2), E2 = ref(false), S3 = ref(null), F = ref(null), P = ref([]), c2 = ref(), k2 = ref(null), Q2 = ref(0), j = ref(null);
    onBeforeUpdate(() => {
      S3.value = null;
    }), onMounted(() => {
      nextTick().then(() => ue()), B2(), x2(true);
    }), onUnmounted(() => x2(false));
    const x2 = (w2) => {
      var y3;
      t2.arrowNavigation && ((y3 = t2.headerRefs) != null && y3.length ? g(w2) : s3(w2));
    }, B2 = () => {
      const w2 = Te(F);
      w2 && (t2.textInput || w2.focus({ preventScroll: true }), E2.value = w2.clientHeight < w2.scrollHeight);
    }, U = computed(
      () => ({
        dp__overlay: true
      })
    ), O2 = computed(() => ({
      dp__overlay_col: true
    })), q2 = (w2) => t2.skipActive ? false : w2.value === t2.modelValue, K2 = computed(() => t2.items.map((w2) => w2.filter((y3) => y3).map((y3) => {
      var u2, $, l;
      const z2 = t2.disabledValues.some((v) => v === y3.value) || de(y3.value), f = (u2 = t2.multiModelValue) != null && u2.length ? ($ = t2.multiModelValue) == null ? void 0 : $.some(
        (v) => pe(
          v,
          setYear(
            t2.monthPicker ? setMonth(new Date(), y3.value) : new Date(),
            t2.monthPicker ? t2.year : y3.value
          )
        )
      ) : q2(y3);
      return {
        ...y3,
        className: {
          dp__overlay_cell_active: f,
          dp__overlay_cell: !f,
          dp__overlay_cell_disabled: z2,
          dp__overlay_cell_active_disabled: z2 && f,
          dp__overlay_cell_pad: true,
          dp__cell_in_between: (l = t2.multiModelValue) != null && l.length && t2.skipActive ? V(y3.value) : false
        }
      };
    }))), ne = computed(
      () => ({
        dp__button: true,
        dp__overlay_action: true,
        dp__over_action_scroll: E2.value,
        dp__button_bottom: t2.autoApply
      })
    ), se = computed(() => {
      var w2, y3;
      return {
        dp__overlay_container: true,
        dp__container_flex: ((w2 = t2.items) == null ? void 0 : w2.length) <= 6,
        dp__container_block: ((y3 = t2.items) == null ? void 0 : y3.length) > 6
      };
    }), de = (w2) => {
      const y3 = t2.maxValue || t2.maxValue === 0, z2 = t2.minValue || t2.minValue === 0;
      return !y3 && !z2 ? false : y3 && z2 ? +w2 > +t2.maxValue || +w2 < +t2.minValue : y3 ? +w2 > +t2.maxValue : z2 ? +w2 < +t2.minValue : false;
    }, ue = () => {
      const w2 = Te(S3), y3 = Te(F), z2 = Te(k2), f = Te(j), u2 = z2 ? z2.getBoundingClientRect().height : 0;
      y3 && (Q2.value = y3.getBoundingClientRect().height - u2), w2 && f && (f.scrollTop = w2.offsetTop - f.offsetTop - (Q2.value / 2 - w2.getBoundingClientRect().height) - u2);
    }, ve = (w2) => {
      !t2.disabledValues.some((y3) => y3 === w2) && !de(w2) && (a3("update:model-value", w2), a3("selected"));
    }, V = (w2) => {
      const y3 = t2.monthPicker ? t2.year : w2;
      return Jn(
        t2.multiModelValue,
        setYear(
          t2.monthPicker ? setMonth(new Date(), c2.value || 0) : new Date(),
          t2.monthPicker ? y3 : c2.value || y3
        ),
        setYear(t2.monthPicker ? setMonth(new Date(), w2) : new Date(), y3)
      );
    }, D2 = () => {
      a3("toggle"), a3("reset-flow");
    }, d3 = () => {
      t2.escClose && D2();
    }, N = (w2, y3, z2, f) => {
      w2 && (y3.value === +t2.modelValue && !t2.disabledValues.includes(y3.value) && (S3.value = w2), t2.arrowNavigation && (Array.isArray(P.value[z2]) ? P.value[z2][f] = w2 : P.value[z2] = [w2], _()));
    }, _ = () => {
      var y3, z2;
      const w2 = (y3 = t2.headerRefs) != null && y3.length ? [t2.headerRefs].concat(P.value) : P.value.concat([t2.skipButtonRef ? [] : [k2.value]]);
      m3(Pe(w2), (z2 = t2.headerRefs) != null && z2.length ? "monthPicker" : "selectionGrid");
    };
    return n({ focusGrid: B2 }), (w2, y3) => {
      var z2;
      return openBlock(), createElementBlock("div", {
        ref_key: "gridWrapRef",
        ref: F,
        class: normalizeClass(U.value),
        role: "dialog",
        tabindex: "0",
        onKeydown: withKeys(d3, ["esc"])
      }, [
        createBaseVNode("div", {
          class: normalizeClass(se.value),
          ref_key: "containerRef",
          ref: j,
          role: "grid",
          style: normalizeStyle({ height: `${Q2.value}px` })
        }, [
          createBaseVNode("div", Yl, [
            renderSlot(w2.$slots, "header")
          ]),
          w2.$slots.overlay ? renderSlot(w2.$slots, "overlay", { key: 0 }) : (openBlock(true), createElementBlock(Fragment, { key: 1 }, renderList(K2.value, (f, u2) => (openBlock(), createElementBlock("div", {
            class: normalizeClass(["dp__overlay_row", { dp__flex_row: K2.value.length >= 3 }]),
            key: u2,
            role: "row"
          }, [
            (openBlock(true), createElementBlock(Fragment, null, renderList(f, ($, l) => (openBlock(), createElementBlock("div", {
              role: "gridcell",
              class: normalizeClass(O2.value),
              key: $.value,
              "aria-selected": $.value === e2.modelValue && !e2.disabledValues.includes($.value),
              "aria-disabled": $.className.dp__overlay_cell_disabled,
              ref_for: true,
              ref: (v) => N(v, $, u2, l),
              tabindex: "0",
              onClick: (v) => ve($.value),
              onKeydown: [
                withKeys((v) => ve($.value), ["enter"]),
                withKeys((v) => ve($.value), ["space"])
              ],
              onMouseover: (v) => c2.value = $.value
            }, [
              createBaseVNode("div", {
                class: normalizeClass($.className)
              }, [
                w2.$slots.item ? renderSlot(w2.$slots, "item", {
                  key: 0,
                  item: $
                }) : createCommentVNode("", true),
                w2.$slots.item ? createCommentVNode("", true) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
                  createTextVNode(toDisplayString($.text), 1)
                ], 64))
              ], 2)
            ], 42, Vl))), 128))
          ], 2))), 128))
        ], 6),
        w2.$slots["button-icon"] ? withDirectives((openBlock(), createElementBlock("div", {
          key: 0,
          role: "button",
          "aria-label": (z2 = e2.ariaLabels) == null ? void 0 : z2.toggleOverlay,
          class: normalizeClass(ne.value),
          tabindex: "0",
          ref_key: "toggleButton",
          ref: k2,
          onClick: D2,
          onKeydown: [
            withKeys(D2, ["enter"]),
            withKeys(D2, ["tab"])
          ]
        }, [
          renderSlot(w2.$slots, "button-icon")
        ], 42, El)), [
          [vShow, !unref(C)(e2.type)]
        ]) : createCommentVNode("", true)
      ], 42, Bl);
    };
  }
});
var Ll = ["aria-label"];
var Hn = defineComponent({
  __name: "RegularPicker",
  props: {
    ariaLabel: { type: String, default: "" },
    showSelectionGrid: { type: Boolean, default: false },
    modelValue: { type: Number, default: null },
    items: { type: Array, default: () => [] },
    disabledValues: { type: Array, default: () => [] },
    minValue: { type: Number, default: null },
    maxValue: { type: Number, default: null },
    slotName: { type: String, default: "" },
    overlaySlot: { type: String, default: "" },
    headerRefs: { type: Array, default: () => [] },
    escClose: { type: Boolean, default: true },
    type: { type: String, default: null },
    transitions: { type: [Object, Boolean], default: false },
    arrowNavigation: { type: Boolean, default: false },
    autoApply: { type: Boolean, default: false },
    textInput: { type: Boolean, default: false },
    ariaLabels: { type: Object, default: () => ({}) },
    hideNavigation: { type: Array, default: () => [] }
  },
  emits: ["update:model-value", "toggle", "set-ref"],
  setup(e2, { emit: n }) {
    const a3 = e2, { transitionName: t2, showTransition: s3 } = Kt(a3.transitions), m3 = ref(null);
    return onMounted(() => n("set-ref", m3)), (g, C) => (openBlock(), createElementBlock(Fragment, null, [
      createBaseVNode("button", {
        type: "button",
        class: "dp__btn dp__month_year_select",
        onClick: C[0] || (C[0] = (E2) => g.$emit("toggle")),
        onKeydown: [
          C[1] || (C[1] = withKeys(withModifiers((E2) => g.$emit("toggle"), ["prevent"]), ["enter"])),
          C[2] || (C[2] = withKeys(withModifiers((E2) => g.$emit("toggle"), ["prevent"]), ["space"]))
        ],
        "aria-label": e2.ariaLabel,
        tabindex: "0",
        ref_key: "elRef",
        ref: m3
      }, [
        renderSlot(g.$slots, "default")
      ], 40, Ll),
      createVNode(Transition, {
        name: unref(t2)(e2.showSelectionGrid),
        css: unref(s3)
      }, {
        default: withCtx(() => [
          e2.showSelectionGrid ? (openBlock(), createBlock(_t, mergeProps({ key: 0 }, {
            modelValue: e2.modelValue,
            items: e2.items,
            disabledValues: e2.disabledValues,
            minValue: e2.minValue,
            maxValue: e2.maxValue,
            escClose: e2.escClose,
            type: e2.type,
            arrowNavigation: e2.arrowNavigation,
            textInput: e2.textInput,
            autoApply: e2.autoApply,
            ariaLabels: e2.ariaLabels,
            hideNavigation: e2.hideNavigation
          }, {
            "header-refs": [],
            "onUpdate:modelValue": C[3] || (C[3] = (E2) => g.$emit("update:model-value", E2)),
            onToggle: C[4] || (C[4] = (E2) => g.$emit("toggle"))
          }), createSlots({
            "button-icon": withCtx(() => [
              g.$slots["calendar-icon"] ? renderSlot(g.$slots, "calendar-icon", { key: 0 }) : createCommentVNode("", true),
              g.$slots["calendar-icon"] ? createCommentVNode("", true) : (openBlock(), createBlock(unref(jt), { key: 1 }))
            ]),
            _: 2
          }, [
            g.$slots[e2.slotName] ? {
              name: "item",
              fn: withCtx(({ item: E2 }) => [
                renderSlot(g.$slots, e2.slotName, { item: E2 })
              ]),
              key: "0"
            } : void 0,
            g.$slots[e2.overlaySlot] ? {
              name: "overlay",
              fn: withCtx(() => [
                renderSlot(g.$slots, e2.overlaySlot)
              ]),
              key: "1"
            } : void 0,
            g.$slots[`${e2.overlaySlot}-header`] ? {
              name: "header",
              fn: withCtx(() => [
                renderSlot(g.$slots, `${e2.overlaySlot}-header`)
              ]),
              key: "2"
            } : void 0
          ]), 1040)) : createCommentVNode("", true)
        ]),
        _: 3
      }, 8, ["name", "css"])
    ], 64));
  }
});
var Fl = { class: "dp__month_year_row" };
var Ul = { class: "dp__month_picker_header" };
var Wl = ["aria-label"];
var Hl = ["aria-label"];
var xl = ["aria-label"];
var zl = defineComponent({
  __name: "MonthYearPicker",
  props: {
    month: { type: Number, default: 0 },
    year: { type: Number, default: 0 },
    instance: { type: Number, default: 0 },
    years: { type: Array, default: () => [] },
    months: { type: Array, default: () => [] },
    internalModelValue: { type: [Date, Array], default: null },
    ...ft
  },
  emits: ["update-month-year", "month-year-select", "mount", "reset-flow", "overlay-closed"],
  setup(e2, { expose: n, emit: a3 }) {
    const t2 = e2, { defaults: s3 } = xe(t2), { transitionName: m3, showTransition: g } = Kt(s3.value.transitions), { buildMatrix: C } = ct(), { handleMonthYearChange: E2, isDisabled: S3, updateMonthYear: F } = fl(t2, a3), P = ref(false), c2 = ref(false), k2 = ref([null, null, null, null]), Q2 = ref(null), j = ref(null), x2 = ref(null);
    onMounted(() => {
      a3("mount");
    });
    const B2 = (i2) => ({
      get: () => t2[i2],
      set: (r) => {
        const Y2 = i2 === "month" ? "year" : "month";
        a3("update-month-year", { [i2]: r, [Y2]: t2[Y2] }), a3("month-year-select", i2 === "year"), i2 === "month" ? u2(true) : $(true);
      }
    }), U = computed(B2("month")), O2 = computed(B2("year")), q2 = (i2) => {
      const r = getYear(T2(i2));
      return t2.year === r;
    }, K2 = computed(() => t2.monthPicker ? Array.isArray(t2.disabledDates) ? t2.disabledDates.map((i2) => T2(i2)).filter((i2) => q2(i2)).map((i2) => getMonth(i2)) : [] : []), ne = computed(() => (i2) => {
      const r = i2 === "month";
      return {
        showSelectionGrid: (r ? P : c2).value,
        items: (r ? _ : w2).value,
        disabledValues: s3.value.filters[r ? "months" : "years"].concat(K2.value),
        minValue: (r ? ve : de).value,
        maxValue: (r ? V : ue).value,
        headerRefs: r && t2.monthPicker ? [Q2.value, j.value, x2.value] : [],
        escClose: t2.escClose,
        transitions: s3.value.transitions,
        ariaLabels: s3.value.ariaLabels,
        textInput: t2.textInput,
        autoApply: t2.autoApply,
        arrowNavigation: t2.arrowNavigation,
        hideNavigation: t2.hideNavigation
      };
    }), se = computed(() => (i2) => ({
      month: t2.month,
      year: t2.year,
      items: i2 === "month" ? t2.months : t2.years,
      instance: t2.instance,
      updateMonthYear: F,
      toggle: i2 === "month" ? u2 : $
    })), de = computed(() => t2.minDate ? getYear(T2(t2.minDate)) : null), ue = computed(() => t2.maxDate ? getYear(T2(t2.maxDate)) : null), ve = computed(() => {
      if (t2.minDate && de.value) {
        if (de.value > t2.year)
          return 12;
        if (de.value === t2.year)
          return getMonth(T2(t2.minDate));
      }
      return null;
    }), V = computed(() => t2.maxDate && ue.value ? ue.value < t2.year ? -1 : ue.value === t2.year ? getMonth(T2(t2.maxDate)) : null : null), D2 = computed(() => (t2.range || t2.multiDates) && t2.internalModelValue && (t2.monthPicker || t2.yearPicker) ? t2.internalModelValue : []), d3 = (i2) => {
      const r = [], Y2 = (le) => le;
      for (let le = 0; le < i2.length; le += 3) {
        const Ae = [i2[le], i2[le + 1], i2[le + 2]];
        r.push(Y2(Ae));
      }
      return r;
    }, N = computed(() => {
      const i2 = t2.months.find((r) => r.value === t2.month);
      return i2 || { text: "", value: 0 };
    }), _ = computed(() => d3(t2.months)), w2 = computed(() => d3(t2.years)), y3 = computed(() => s3.value.multiCalendars ? t2.multiCalendarsSolo ? true : t2.instance === 0 : true), z2 = computed(() => s3.value.multiCalendars ? t2.multiCalendarsSolo ? true : t2.instance === s3.value.multiCalendars - 1 : true), f = (i2, r) => {
      r !== void 0 ? i2.value = r : i2.value = !i2.value;
    }, u2 = (i2 = false, r) => {
      l(i2), f(P, r), P.value || a3("overlay-closed");
    }, $ = (i2 = false, r) => {
      l(i2), f(c2, r), c2.value || a3("overlay-closed");
    }, l = (i2) => {
      i2 || a3("reset-flow");
    }, v = (i2 = false) => {
      S3.value(i2) || a3("update-month-year", {
        year: i2 ? t2.year + 1 : t2.year - 1,
        month: t2.month,
        fromNav: true
      });
    }, R2 = (i2, r) => {
      t2.arrowNavigation && (k2.value[r] = Te(i2), C(k2.value, "monthYear"));
    };
    return n({
      toggleMonthPicker: u2,
      toggleYearPicker: $,
      handleMonthYearChange: E2
    }), (i2, r) => {
      var Y2, le, Ae, Se, be;
      return openBlock(), createElementBlock("div", Fl, [
        i2.$slots["month-year"] ? renderSlot(i2.$slots, "month-year", normalizeProps(mergeProps({ key: 0 }, { month: e2.month, year: e2.year, months: e2.months, years: e2.years, updateMonthYear: unref(F), handleMonthYearChange: unref(E2), instance: e2.instance }))) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
          !i2.monthPicker && !i2.yearPicker ? (openBlock(), createElementBlock(Fragment, { key: 0 }, [
            y3.value && !i2.vertical ? (openBlock(), createBlock(sn, {
              key: 0,
              "aria-label": (Y2 = unref(s3).ariaLabels) == null ? void 0 : Y2.prevMonth,
              disabled: unref(S3)(false),
              onActivate: r[0] || (r[0] = (ee) => unref(E2)(false)),
              onSetRef: r[1] || (r[1] = (ee) => R2(ee, 0))
            }, {
              default: withCtx(() => [
                i2.$slots["arrow-left"] ? renderSlot(i2.$slots, "arrow-left", { key: 0 }) : createCommentVNode("", true),
                i2.$slots["arrow-left"] ? createCommentVNode("", true) : (openBlock(), createBlock(unref(Pn), { key: 1 }))
              ]),
              _: 3
            }, 8, ["aria-label", "disabled"])) : createCommentVNode("", true),
            createBaseVNode("div", {
              class: normalizeClass(["dp__month_year_wrap", {
                dp__year_disable_select: t2.disableYearSelect
              }])
            }, [
              createVNode(Hn, mergeProps({
                type: "month",
                "slot-name": "month-overlay-val",
                "overlay-slot": "overlay-month",
                "aria-label": (le = unref(s3).ariaLabels) == null ? void 0 : le.openMonthsOverlay,
                modelValue: U.value,
                "onUpdate:modelValue": r[2] || (r[2] = (ee) => U.value = ee)
              }, ne.value("month"), {
                onToggle: u2,
                onSetRef: r[3] || (r[3] = (ee) => R2(ee, 1))
              }), createSlots({
                default: withCtx(() => [
                  i2.$slots.month ? renderSlot(i2.$slots, "month", normalizeProps(mergeProps({ key: 0 }, N.value))) : createCommentVNode("", true),
                  i2.$slots.month ? createCommentVNode("", true) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
                    createTextVNode(toDisplayString(N.value.text), 1)
                  ], 64))
                ]),
                _: 2
              }, [
                i2.$slots["calendar-icon"] ? {
                  name: "calendar-icon",
                  fn: withCtx(() => [
                    renderSlot(i2.$slots, "calendar-icon")
                  ]),
                  key: "0"
                } : void 0,
                i2.$slots["month-overlay-value"] ? {
                  name: "month-overlay-val",
                  fn: withCtx(({ item: ee }) => [
                    renderSlot(i2.$slots, "month-overlay-value", {
                      text: ee.text,
                      value: ee.value
                    })
                  ]),
                  key: "1"
                } : void 0,
                i2.$slots["month-overlay"] ? {
                  name: "overlay-month",
                  fn: withCtx(() => [
                    renderSlot(i2.$slots, "month-overlay", normalizeProps(guardReactiveProps(se.value("month"))))
                  ]),
                  key: "2"
                } : void 0,
                i2.$slots["month-overlay-header"] ? {
                  name: "overlay-month-header",
                  fn: withCtx(() => [
                    renderSlot(i2.$slots, "month-overlay-header", { toggle: u2 })
                  ]),
                  key: "3"
                } : void 0
              ]), 1040, ["aria-label", "modelValue"]),
              t2.disableYearSelect ? createCommentVNode("", true) : (openBlock(), createBlock(Hn, mergeProps({
                key: 0,
                type: "year",
                "slot-name": "year-overlay-val",
                "overlay-slot": "overlay-year",
                "aria-label": (Ae = unref(s3).ariaLabels) == null ? void 0 : Ae.openYearsOverlay,
                modelValue: O2.value,
                "onUpdate:modelValue": r[4] || (r[4] = (ee) => O2.value = ee)
              }, ne.value("year"), {
                onToggle: $,
                onSetRef: r[5] || (r[5] = (ee) => R2(ee, 2))
              }), createSlots({
                default: withCtx(() => [
                  i2.$slots.year ? renderSlot(i2.$slots, "year", {
                    key: 0,
                    year: e2.year
                  }) : createCommentVNode("", true),
                  i2.$slots.year ? createCommentVNode("", true) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
                    createTextVNode(toDisplayString(e2.year), 1)
                  ], 64))
                ]),
                _: 2
              }, [
                i2.$slots["calendar-icon"] ? {
                  name: "calendar-icon",
                  fn: withCtx(() => [
                    renderSlot(i2.$slots, "calendar-icon")
                  ]),
                  key: "0"
                } : void 0,
                i2.$slots["year-overlay-value"] ? {
                  name: "year-overlay-val",
                  fn: withCtx(({ item: ee }) => [
                    renderSlot(i2.$slots, "year-overlay-value", {
                      text: ee.text,
                      value: ee.value
                    })
                  ]),
                  key: "1"
                } : void 0,
                i2.$slots["year-overlay"] ? {
                  name: "overlay-year",
                  fn: withCtx(() => [
                    renderSlot(i2.$slots, "year-overlay", normalizeProps(guardReactiveProps(se.value("year"))))
                  ]),
                  key: "2"
                } : void 0,
                i2.$slots["year-overlay-header"] ? {
                  name: "overlay-year-header",
                  fn: withCtx(() => [
                    renderSlot(i2.$slots, "year-overlay-header", { toggle: $ })
                  ]),
                  key: "3"
                } : void 0
              ]), 1040, ["aria-label", "modelValue"]))
            ], 2),
            y3.value && i2.vertical ? (openBlock(), createBlock(sn, {
              key: 1,
              "aria-label": (Se = unref(s3).ariaLabels) == null ? void 0 : Se.prevMonth,
              disabled: unref(S3)(false),
              onActivate: r[6] || (r[6] = (ee) => unref(E2)(false))
            }, {
              default: withCtx(() => [
                i2.$slots["arrow-up"] ? renderSlot(i2.$slots, "arrow-up", { key: 0 }) : createCommentVNode("", true),
                i2.$slots["arrow-up"] ? createCommentVNode("", true) : (openBlock(), createBlock(unref(qn), { key: 1 }))
              ]),
              _: 3
            }, 8, ["aria-label", "disabled"])) : createCommentVNode("", true),
            z2.value ? (openBlock(), createBlock(sn, {
              key: 2,
              ref: "rightIcon",
              disabled: unref(S3)(true),
              "aria-label": (be = unref(s3).ariaLabels) == null ? void 0 : be.nextMonth,
              onActivate: r[7] || (r[7] = (ee) => unref(E2)(true)),
              onSetRef: r[8] || (r[8] = (ee) => R2(ee, 3))
            }, {
              default: withCtx(() => [
                i2.$slots[i2.vertical ? "arrow-down" : "arrow-right"] ? renderSlot(i2.$slots, i2.vertical ? "arrow-down" : "arrow-right", { key: 0 }) : createCommentVNode("", true),
                i2.$slots[i2.vertical ? "arrow-down" : "arrow-right"] ? createCommentVNode("", true) : (openBlock(), createBlock(resolveDynamicComponent(i2.vertical ? unref(Xn) : unref(Cn)), { key: 1 }))
              ]),
              _: 3
            }, 8, ["disabled", "aria-label"])) : createCommentVNode("", true)
          ], 64)) : createCommentVNode("", true),
          i2.monthPicker ? (openBlock(), createBlock(_t, mergeProps({ key: 1 }, ne.value("month"), {
            "skip-active": i2.range,
            year: e2.year,
            "multi-model-value": D2.value,
            "month-picker": "",
            modelValue: U.value,
            "onUpdate:modelValue": r[17] || (r[17] = (ee) => U.value = ee),
            onToggle: u2,
            onSelected: r[18] || (r[18] = (ee) => i2.$emit("overlay-closed"))
          }), createSlots({
            header: withCtx(() => {
              var ee, We, Ie;
              return [
                createBaseVNode("div", Ul, [
                  createBaseVNode("div", {
                    class: "dp__month_year_col_nav",
                    tabindex: "0",
                    ref_key: "mpPrevIconRef",
                    ref: Q2,
                    onClick: r[9] || (r[9] = (Re) => v(false)),
                    onKeydown: r[10] || (r[10] = withKeys((Re) => v(false), ["enter"]))
                  }, [
                    createBaseVNode("div", {
                      class: normalizeClass(["dp__inner_nav", { dp__inner_nav_disabled: unref(S3)(false) }]),
                      role: "button",
                      "aria-label": (ee = unref(s3).ariaLabels) == null ? void 0 : ee.prevMonth
                    }, [
                      i2.$slots["arrow-left"] ? renderSlot(i2.$slots, "arrow-left", { key: 0 }) : createCommentVNode("", true),
                      i2.$slots["arrow-left"] ? createCommentVNode("", true) : (openBlock(), createBlock(unref(Pn), { key: 1 }))
                    ], 10, Wl)
                  ], 544),
                  createBaseVNode("div", {
                    class: "dp__pointer",
                    role: "button",
                    ref_key: "mpYearButtonRef",
                    ref: j,
                    "aria-label": (We = unref(s3).ariaLabels) == null ? void 0 : We.openYearsOverlay,
                    tabindex: "0",
                    onClick: r[11] || (r[11] = () => $(false)),
                    onKeydown: r[12] || (r[12] = withKeys(() => $(false), ["enter"]))
                  }, [
                    i2.$slots.year ? renderSlot(i2.$slots, "year", {
                      key: 0,
                      year: e2.year
                    }) : createCommentVNode("", true),
                    i2.$slots.year ? createCommentVNode("", true) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
                      createTextVNode(toDisplayString(e2.year), 1)
                    ], 64))
                  ], 40, Hl),
                  createBaseVNode("div", {
                    class: "dp__month_year_col_nav",
                    tabindex: "0",
                    ref_key: "mpNextIconRef",
                    ref: x2,
                    onClick: r[13] || (r[13] = (Re) => v(true)),
                    onKeydown: r[14] || (r[14] = withKeys((Re) => v(true), ["enter"]))
                  }, [
                    createBaseVNode("div", {
                      class: normalizeClass(["dp__inner_nav", { dp__inner_nav_disabled: unref(S3)(true) }]),
                      role: "button",
                      "aria-label": (Ie = unref(s3).ariaLabels) == null ? void 0 : Ie.nextMonth
                    }, [
                      i2.$slots["arrow-right"] ? renderSlot(i2.$slots, "arrow-right", { key: 0 }) : createCommentVNode("", true),
                      i2.$slots["arrow-right"] ? createCommentVNode("", true) : (openBlock(), createBlock(unref(Cn), { key: 1 }))
                    ], 10, xl)
                  ], 544)
                ]),
                createVNode(Transition, {
                  name: unref(m3)(c2.value),
                  css: unref(g)
                }, {
                  default: withCtx(() => [
                    c2.value ? (openBlock(), createBlock(_t, mergeProps({ key: 0 }, ne.value("year"), {
                      modelValue: O2.value,
                      "onUpdate:modelValue": r[15] || (r[15] = (Re) => O2.value = Re),
                      onToggle: $,
                      onSelected: r[16] || (r[16] = (Re) => i2.$emit("overlay-closed"))
                    }), createSlots({
                      "button-icon": withCtx(() => [
                        i2.$slots["calendar-icon"] ? renderSlot(i2.$slots, "calendar-icon", { key: 0 }) : createCommentVNode("", true),
                        i2.$slots["calendar-icon"] ? createCommentVNode("", true) : (openBlock(), createBlock(unref(jt), { key: 1 }))
                      ]),
                      _: 2
                    }, [
                      i2.$slots["year-overlay-value"] ? {
                        name: "item",
                        fn: withCtx(({ item: Re }) => [
                          renderSlot(i2.$slots, "year-overlay-value", {
                            text: Re.text,
                            value: Re.value
                          })
                        ]),
                        key: "0"
                      } : void 0
                    ]), 1040, ["modelValue"])) : createCommentVNode("", true)
                  ]),
                  _: 3
                }, 8, ["name", "css"])
              ];
            }),
            _: 2
          }, [
            i2.$slots["month-overlay-value"] ? {
              name: "item",
              fn: withCtx(({ item: ee }) => [
                renderSlot(i2.$slots, "month-overlay-value", {
                  text: ee.text,
                  value: ee.value
                })
              ]),
              key: "0"
            } : void 0
          ]), 1040, ["skip-active", "year", "multi-model-value", "modelValue"])) : createCommentVNode("", true),
          i2.yearPicker ? (openBlock(), createBlock(_t, mergeProps({ key: 2 }, ne.value("year"), {
            modelValue: O2.value,
            "onUpdate:modelValue": r[19] || (r[19] = (ee) => O2.value = ee),
            "multi-model-value": D2.value,
            "skip-active": i2.range,
            "skip-button-ref": "",
            "year-picker": "",
            onToggle: $,
            onSelected: r[20] || (r[20] = (ee) => i2.$emit("overlay-closed"))
          }), createSlots({ _: 2 }, [
            i2.$slots["year-overlay-value"] ? {
              name: "item",
              fn: withCtx(({ item: ee }) => [
                renderSlot(i2.$slots, "year-overlay-value", {
                  text: ee.text,
                  value: ee.value
                })
              ]),
              key: "0"
            } : void 0
          ]), 1040, ["modelValue", "multi-model-value", "skip-active"])) : createCommentVNode("", true)
        ], 64))
      ]);
    };
  }
});
var jl = {
  key: 0,
  class: "dp__time_input"
};
var Kl = ["aria-label", "onKeydown", "onClick"];
var Gl = ["aria-label", "onKeydown", "onClick"];
var Zl = ["aria-label", "onKeydown", "onClick"];
var ql = { key: 0 };
var Xl = ["aria-label", "onKeydown"];
var Jl = defineComponent({
  __name: "TimeInput",
  props: {
    hours: { type: Number, default: 0 },
    minutes: { type: Number, default: 0 },
    seconds: { type: Number, default: 0 },
    closeTimePickerBtn: { type: Object, default: null },
    order: { type: Number, default: 0 },
    ...ft
  },
  emits: [
    "set-hours",
    "set-minutes",
    "update:hours",
    "update:minutes",
    "update:seconds",
    "reset-flow",
    "mounted",
    "overlay-closed",
    "am-pm-change"
  ],
  setup(e2, { expose: n, emit: a3 }) {
    const t2 = e2, { setTimePickerElements: s3, setTimePickerBackRef: m3 } = ct(), { defaults: g } = xe(t2), { transitionName: C, showTransition: E2 } = Kt(g.value.transitions), S3 = reactive({
      hours: false,
      minutes: false,
      seconds: false
    }), F = ref("AM"), P = ref(null), c2 = ref([]);
    onMounted(() => {
      a3("mounted");
    });
    const k2 = (f) => set(new Date(), {
      hours: f.hours,
      minutes: f.minutes,
      seconds: t2.enableSeconds ? f.seconds : 0,
      milliseconds: 0
    }), Q2 = computed(() => ({ hours: t2.hours, minutes: t2.minutes, seconds: t2.seconds })), j = computed(() => (f) => !de(+t2[f] + +t2[`${f}Increment`], f)), x2 = computed(() => (f) => !de(+t2[f] - +t2[`${f}Increment`], f)), B2 = (f, u2) => add(set(T2(), f), u2), U = (f, u2) => sub(set(T2(), f), u2), O2 = computed(
      () => ({
        dp__time_col: true,
        dp__time_col_reg: !t2.enableSeconds && t2.is24,
        dp__time_col_reg_with_button: !t2.enableSeconds && !t2.is24,
        dp__time_col_sec: t2.enableSeconds && t2.is24,
        dp__time_col_sec_with_button: t2.enableSeconds && !t2.is24
      })
    ), q2 = computed(() => {
      const f = [{ type: "hours" }, { type: "", separator: true }, { type: "minutes" }];
      return t2.enableSeconds ? f.concat([{ type: "", separator: true }, { type: "seconds" }]) : f;
    }), K2 = computed(() => q2.value.filter((f) => !f.separator)), ne = computed(() => (f) => {
      if (f === "hours") {
        const u2 = N(+t2.hours);
        return { text: u2 < 10 ? `0${u2}` : `${u2}`, value: u2 };
      }
      return { text: t2[f] < 10 ? `0${t2[f]}` : `${t2[f]}`, value: t2[f] };
    }), se = (f) => {
      const u2 = t2.is24 ? 24 : 12, $ = f === "hours" ? u2 : 60, l = +t2[`${f}GridIncrement`], v = f === "hours" && !t2.is24 ? l : 0, R2 = [];
      for (let i2 = v; i2 < $; i2 += l)
        R2.push({ value: i2, text: i2 < 10 ? `0${i2}` : `${i2}` });
      return f === "hours" && !t2.is24 && R2.push({ value: 0, text: "12" }), qa(R2);
    }, de = (f, u2) => {
      const $ = t2.minTime ? k2(Jt(t2.minTime)) : null, l = t2.maxTime ? k2(Jt(t2.maxTime)) : null, v = k2(Jt(Q2.value, u2, f));
      return $ && l ? (isBefore(v, l) || isEqual(v, l)) && (isAfter(v, $) || isEqual(v, $)) : $ ? isAfter(v, $) || isEqual(v, $) : l ? isBefore(v, l) || isEqual(v, l) : true;
    }, ue = computed(() => (f) => se(f).flat().filter(($) => $ || ($ == null ? void 0 : $.value) === 0).map(($) => $.value).filter(($) => !de($, f))), ve = (f) => t2[`no${f[0].toUpperCase() + f.slice(1)}Overlay`], V = (f) => {
      ve(f) || (S3[f] = !S3[f], S3[f] || a3("overlay-closed"));
    }, D2 = (f) => f === "hours" ? getHours : f === "minutes" ? getMinutes : getSeconds, d3 = (f, u2 = true) => {
      const $ = u2 ? B2 : U, l = u2 ? +t2[`${f}Increment`] : -+t2[`${f}Increment`];
      de(+t2[f] + l, f) && a3(
        `update:${f}`,
        D2(f)($({ [f]: +t2[f] }, { [f]: +t2[`${f}Increment`] }))
      );
    }, N = (f) => t2.is24 ? f : (f >= 12 ? F.value = "PM" : F.value = "AM", el(f)), _ = () => {
      F.value === "PM" ? (F.value = "AM", a3("update:hours", t2.hours - 12)) : (F.value = "PM", a3("update:hours", t2.hours + 12)), a3("am-pm-change", F.value);
    }, w2 = (f) => {
      S3[f] = true;
    }, y3 = (f, u2, $) => {
      if (f && t2.arrowNavigation) {
        Array.isArray(c2.value[u2]) ? c2.value[u2][$] = f : c2.value[u2] = [f];
        const l = c2.value.reduce(
          (v, R2) => R2.map((i2, r) => [...v[r] || [], R2[r]]),
          []
        );
        m3(t2.closeTimePickerBtn), P.value && (l[1] = l[1].concat(P.value)), s3(l, t2.order);
      }
    }, z2 = (f, u2) => f === "hours" && !t2.is24 ? a3(`update:${f}`, F.value === "PM" ? u2 + 12 : u2) : a3(`update:${f}`, u2);
    return n({ openChildCmp: w2 }), (f, u2) => {
      var $;
      return f.disabled ? createCommentVNode("", true) : (openBlock(), createElementBlock("div", jl, [
        (openBlock(true), createElementBlock(Fragment, null, renderList(q2.value, (l, v) => {
          var R2, i2, r;
          return openBlock(), createElementBlock("div", {
            key: v,
            class: normalizeClass(O2.value)
          }, [
            l.separator ? (openBlock(), createElementBlock(Fragment, { key: 0 }, [
              createTextVNode(" : ")
            ], 64)) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
              createBaseVNode("button", {
                type: "button",
                class: normalizeClass({
                  dp__btn: true,
                  dp__inc_dec_button: true,
                  dp__inc_dec_button_disabled: j.value(l.type)
                }),
                "aria-label": (R2 = unref(g).ariaLabels) == null ? void 0 : R2.incrementValue(l.type),
                tabindex: "0",
                onKeydown: [
                  withKeys((Y2) => d3(l.type), ["enter"]),
                  withKeys((Y2) => d3(l.type), ["space"])
                ],
                onClick: (Y2) => d3(l.type),
                ref_for: true,
                ref: (Y2) => y3(Y2, v, 0)
              }, [
                f.$slots["arrow-up"] ? renderSlot(f.$slots, "arrow-up", { key: 0 }) : createCommentVNode("", true),
                f.$slots["arrow-up"] ? createCommentVNode("", true) : (openBlock(), createBlock(unref(qn), { key: 1 }))
              ], 42, Kl),
              createBaseVNode("button", {
                type: "button",
                "aria-label": (i2 = unref(g).ariaLabels) == null ? void 0 : i2.openTpOverlay(l.type),
                class: normalizeClass(["dp__btn", ve(l.type) ? "" : "dp__time_display"]),
                tabindex: "0",
                onKeydown: [
                  withKeys((Y2) => V(l.type), ["enter"]),
                  withKeys((Y2) => V(l.type), ["space"])
                ],
                onClick: (Y2) => V(l.type),
                ref_for: true,
                ref: (Y2) => y3(Y2, v, 1)
              }, [
                f.$slots[l.type] ? renderSlot(f.$slots, l.type, {
                  key: 0,
                  text: ne.value(l.type).text,
                  value: ne.value(l.type).value
                }) : createCommentVNode("", true),
                f.$slots[l.type] ? createCommentVNode("", true) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
                  createTextVNode(toDisplayString(ne.value(l.type).text), 1)
                ], 64))
              ], 42, Gl),
              createBaseVNode("button", {
                type: "button",
                class: normalizeClass({
                  dp__btn: true,
                  dp__inc_dec_button: true,
                  dp__inc_dec_button_disabled: x2.value(l.type)
                }),
                "aria-label": (r = unref(g).ariaLabels) == null ? void 0 : r.decrementValue(l.type),
                tabindex: "0",
                onKeydown: [
                  withKeys((Y2) => d3(l.type, false), ["enter"]),
                  withKeys((Y2) => d3(l.type, false), ["space"])
                ],
                onClick: (Y2) => d3(l.type, false),
                ref_for: true,
                ref: (Y2) => y3(Y2, v, 2)
              }, [
                f.$slots["arrow-down"] ? renderSlot(f.$slots, "arrow-down", { key: 0 }) : createCommentVNode("", true),
                f.$slots["arrow-down"] ? createCommentVNode("", true) : (openBlock(), createBlock(unref(Xn), { key: 1 }))
              ], 42, Zl)
            ], 64))
          ], 2);
        }), 128)),
        f.is24 ? createCommentVNode("", true) : (openBlock(), createElementBlock("div", ql, [
          f.$slots["am-pm-button"] ? renderSlot(f.$slots, "am-pm-button", {
            key: 0,
            toggle: _,
            value: F.value
          }) : createCommentVNode("", true),
          f.$slots["am-pm-button"] ? createCommentVNode("", true) : (openBlock(), createElementBlock("button", {
            key: 1,
            ref_key: "amPmButton",
            ref: P,
            type: "button",
            class: "dp__pm_am_button",
            role: "button",
            "aria-label": ($ = unref(g).ariaLabels) == null ? void 0 : $.amPmButton,
            tabindex: "0",
            onClick: _,
            onKeydown: [
              withKeys(withModifiers(_, ["prevent"]), ["enter"]),
              withKeys(withModifiers(_, ["prevent"]), ["space"])
            ]
          }, toDisplayString(F.value), 41, Xl))
        ])),
        (openBlock(true), createElementBlock(Fragment, null, renderList(K2.value, (l, v) => (openBlock(), createBlock(Transition, {
          key: v,
          name: unref(C)(S3[l.type]),
          css: unref(E2)
        }, {
          default: withCtx(() => [
            S3[l.type] ? (openBlock(), createBlock(_t, {
              key: 0,
              items: se(l.type),
              "disabled-values": unref(g).filters.times[l.type].concat(ue.value(l.type)),
              "esc-close": f.escClose,
              "aria-labels": unref(g).ariaLabels,
              "hide-navigation": f.hideNavigation,
              "onUpdate:modelValue": (R2) => z2(l.type, R2),
              onSelected: (R2) => V(l.type),
              onToggle: (R2) => V(l.type),
              onResetFlow: u2[0] || (u2[0] = (R2) => f.$emit("reset-flow")),
              type: l.type
            }, createSlots({
              "button-icon": withCtx(() => [
                f.$slots["clock-icon"] ? renderSlot(f.$slots, "clock-icon", { key: 0 }) : createCommentVNode("", true),
                f.$slots["clock-icon"] ? createCommentVNode("", true) : (openBlock(), createBlock(unref(Zn), { key: 1 }))
              ]),
              _: 2
            }, [
              f.$slots[`${l.type}-overlay-value`] ? {
                name: "item",
                fn: withCtx(({ item: R2 }) => [
                  renderSlot(f.$slots, `${l.type}-overlay-value`, {
                    text: R2.text,
                    value: R2.value
                  })
                ]),
                key: "0"
              } : void 0
            ]), 1032, ["items", "disabled-values", "esc-close", "aria-labels", "hide-navigation", "onUpdate:modelValue", "onSelected", "onToggle", "type"])) : createCommentVNode("", true)
          ]),
          _: 2
        }, 1032, ["name", "css"]))), 128))
      ]));
    };
  }
});
var Ql = ["aria-label"];
var er = { class: "dp__overlay_container dp__container_flex dp__time_picker_overlay_container" };
var tr = {
  key: 1,
  class: "dp__overlay_row dp__flex_row"
};
var nr = ["aria-label"];
var ar = defineComponent({
  __name: "TimePicker",
  props: {
    hours: { type: [Number, Array], default: 0 },
    minutes: { type: [Number, Array], default: 0 },
    seconds: { type: [Number, Array], default: 0 },
    internalModelValue: { type: [Date, Array], default: null },
    ...ft
  },
  emits: [
    "update:hours",
    "update:minutes",
    "update:seconds",
    "mount",
    "reset-flow",
    "overlay-opened",
    "overlay-closed",
    "am-pm-change"
  ],
  setup(e2, { expose: n, emit: a3 }) {
    const t2 = e2, { buildMatrix: s3, setTimePicker: m3 } = ct(), g = useSlots(), { hideNavigationButtons: C, defaults: E2 } = xe(t2), { transitionName: S3, showTransition: F } = Kt(E2.value.transitions), P = ref(null), c2 = ref(null), k2 = ref([]), Q2 = ref(null);
    onMounted(() => {
      a3("mount"), !t2.timePicker && t2.arrowNavigation ? s3([Te(P.value)], "time") : m3(true, t2.timePicker);
    });
    const j = computed(() => t2.range && t2.modelAuto ? aa(t2.internalModelValue) : true), x2 = ref(false), B2 = (V) => ({
      hours: Array.isArray(t2.hours) ? t2.hours[V] : t2.hours,
      minutes: Array.isArray(t2.minutes) ? t2.minutes[V] : t2.minutes,
      seconds: Array.isArray(t2.seconds) ? t2.seconds[V] : t2.seconds
    }), U = computed(() => {
      const V = [];
      if (t2.range)
        for (let D2 = 0; D2 < 2; D2++)
          V.push(B2(D2));
      else
        V.push(B2(0));
      return V;
    }), O2 = (V, D2 = false, d3 = "") => {
      D2 || a3("reset-flow"), x2.value = V, a3(V ? "overlay-opened" : "overlay-closed"), t2.arrowNavigation && m3(V), nextTick(() => {
        d3 !== "" && k2.value[0] && k2.value[0].openChildCmp(d3);
      });
    }, q2 = computed(() => ({
      dp__btn: true,
      dp__button: true,
      dp__button_bottom: t2.autoApply && !t2.keepActionRow
    })), K2 = pt(g, "timePicker"), ne = (V, D2, d3) => t2.range ? D2 === 0 ? [V, U.value[1][d3]] : [U.value[0][d3], V] : V, se = (V) => {
      a3("update:hours", V);
    }, de = (V) => {
      a3("update:minutes", V);
    }, ue = (V) => {
      a3("update:seconds", V);
    }, ve = () => {
      if (Q2.value) {
        const V = nl(Q2.value);
        V && V.focus({ preventScroll: true });
      }
    };
    return n({ toggleTimePicker: O2 }), (V, D2) => {
      var d3;
      return openBlock(), createElementBlock("div", null, [
        V.timePicker ? createCommentVNode("", true) : withDirectives((openBlock(), createElementBlock("button", {
          key: 0,
          type: "button",
          class: normalizeClass(q2.value),
          "aria-label": (d3 = unref(E2).ariaLabels) == null ? void 0 : d3.openTimePicker,
          tabindex: "0",
          ref_key: "openTimePickerBtn",
          ref: P,
          onKeydown: [
            D2[0] || (D2[0] = withKeys((N) => O2(true), ["enter"])),
            D2[1] || (D2[1] = withKeys((N) => O2(true), ["space"]))
          ],
          onClick: D2[2] || (D2[2] = (N) => O2(true))
        }, [
          V.$slots["clock-icon"] ? renderSlot(V.$slots, "clock-icon", { key: 0 }) : createCommentVNode("", true),
          V.$slots["clock-icon"] ? createCommentVNode("", true) : (openBlock(), createBlock(unref(Zn), { key: 1 }))
        ], 42, Ql)), [
          [vShow, !unref(C)("time")]
        ]),
        createVNode(Transition, {
          name: unref(S3)(x2.value),
          css: unref(F)
        }, {
          default: withCtx(() => {
            var N;
            return [
              x2.value || V.timePicker ? (openBlock(), createElementBlock("div", {
                key: 0,
                class: "dp__overlay",
                ref_key: "overlayRef",
                ref: Q2,
                tabindex: "0"
              }, [
                createBaseVNode("div", er, [
                  V.$slots["time-picker-overlay"] ? renderSlot(V.$slots, "time-picker-overlay", {
                    key: 0,
                    hours: e2.hours,
                    minutes: e2.minutes,
                    seconds: e2.seconds,
                    setHours: se,
                    setMinutes: de,
                    setSeconds: ue
                  }) : createCommentVNode("", true),
                  V.$slots["time-picker-overlay"] ? createCommentVNode("", true) : (openBlock(), createElementBlock("div", tr, [
                    (openBlock(true), createElementBlock(Fragment, null, renderList(U.value, (_, w2) => withDirectives((openBlock(), createBlock(Jl, mergeProps({ key: w2 }, {
                      ...V.$props,
                      order: w2,
                      hours: _.hours,
                      minutes: _.minutes,
                      seconds: _.seconds,
                      closeTimePickerBtn: c2.value,
                      disabled: w2 === 0 ? V.fixedStart : V.fixedEnd
                    }, {
                      ref_for: true,
                      ref_key: "timeInputRefs",
                      ref: k2,
                      "onUpdate:hours": (y3) => se(ne(y3, w2, "hours")),
                      "onUpdate:minutes": (y3) => de(ne(y3, w2, "minutes")),
                      "onUpdate:seconds": (y3) => ue(ne(y3, w2, "seconds")),
                      onMounted: ve,
                      onOverlayClosed: ve,
                      onAmPmChange: D2[3] || (D2[3] = (y3) => V.$emit("am-pm-change", y3))
                    }), createSlots({ _: 2 }, [
                      renderList(unref(K2), (y3, z2) => ({
                        name: y3,
                        fn: withCtx((f) => [
                          renderSlot(V.$slots, y3, normalizeProps(guardReactiveProps(f)))
                        ])
                      }))
                    ]), 1040, ["onUpdate:hours", "onUpdate:minutes", "onUpdate:seconds"])), [
                      [vShow, w2 === 0 ? true : j.value]
                    ])), 128))
                  ])),
                  V.timePicker ? createCommentVNode("", true) : withDirectives((openBlock(), createElementBlock("button", {
                    key: 2,
                    type: "button",
                    ref_key: "closeTimePickerBtn",
                    ref: c2,
                    class: normalizeClass(q2.value),
                    "aria-label": (N = unref(E2).ariaLabels) == null ? void 0 : N.closeTimePicker,
                    tabindex: "0",
                    onKeydown: [
                      D2[4] || (D2[4] = withKeys((_) => O2(false), ["enter"])),
                      D2[5] || (D2[5] = withKeys((_) => O2(false), ["space"]))
                    ],
                    onClick: D2[6] || (D2[6] = (_) => O2(false))
                  }, [
                    V.$slots["calendar-icon"] ? renderSlot(V.$slots, "calendar-icon", { key: 0 }) : createCommentVNode("", true),
                    V.$slots["calendar-icon"] ? createCommentVNode("", true) : (openBlock(), createBlock(unref(jt), { key: 1 }))
                  ], 42, nr)), [
                    [vShow, !unref(C)("time")]
                  ])
                ])
              ], 512)) : createCommentVNode("", true)
            ];
          }),
          _: 3
        }, 8, ["name", "css"])
      ]);
    };
  }
});
var lr = (e2, n) => {
  const { isDisabled: a3, matchDate: t2, getWeekFromDate: s3, defaults: m3 } = xe(n), g = ref(null), C = ref(T2()), E2 = (u2) => {
    !u2.current && n.hideOffsetDates || (g.value = u2.value);
  }, S3 = () => {
    g.value = null;
  }, F = (u2) => Array.isArray(e2.value) && n.range && e2.value[0] && g.value ? u2 ? Fe(g.value, e2.value[0]) : Ve(g.value, e2.value[0]) : true, P = (u2, $) => {
    const l = () => e2.value ? $ ? e2.value[0] || null : e2.value[1] : null, v = e2.value && Array.isArray(e2.value) ? l() : null;
    return pe(T2(u2.value), v);
  }, c2 = (u2) => {
    const $ = Array.isArray(e2.value) ? e2.value[0] : null;
    return u2 ? !Ve(g.value || null, $) : true;
  }, k2 = (u2, $ = true) => (n.range || n.weekPicker) && Array.isArray(e2.value) && e2.value.length === 2 ? n.hideOffsetDates && !u2.current ? false : pe(T2(u2.value), e2.value[$ ? 0 : 1]) : n.range ? P(u2, $) && c2($) || pe(u2.value, Array.isArray(e2.value) ? e2.value[0] : null) && F($) : false, Q2 = (u2, $, l) => Array.isArray(e2.value) && e2.value[0] && e2.value.length === 1 ? u2 ? false : l ? Fe(e2.value[0], $.value) : Ve(e2.value[0], $.value) : false, j = (u2) => !e2.value || n.hideOffsetDates && !u2.current ? false : n.range ? n.modelAuto && Array.isArray(e2.value) ? pe(u2.value, e2.value[0] ? e2.value[0] : C.value) : false : n.multiDates && Array.isArray(e2.value) ? e2.value.some(($) => pe($, u2.value)) : pe(u2.value, e2.value ? e2.value : C.value), x2 = (u2) => {
    if (n.autoRange || n.weekPicker) {
      if (g.value) {
        if (n.hideOffsetDates && !u2.current)
          return false;
        const $ = addDays(g.value, +n.autoRange), l = s3(T2(g.value));
        return n.weekPicker ? pe(l[1], T2(u2.value)) : pe($, T2(u2.value));
      }
      return false;
    }
    return false;
  }, B2 = (u2) => {
    if (n.autoRange || n.weekPicker) {
      if (g.value) {
        const $ = addDays(g.value, +n.autoRange);
        if (n.hideOffsetDates && !u2.current)
          return false;
        const l = s3(T2(g.value));
        return n.weekPicker ? Fe(u2.value, l[0]) && Ve(u2.value, l[1]) : Fe(u2.value, g.value) && Ve(u2.value, $);
      }
      return false;
    }
    return false;
  }, U = (u2) => {
    if (n.autoRange || n.weekPicker) {
      if (g.value) {
        if (n.hideOffsetDates && !u2.current)
          return false;
        const $ = s3(T2(g.value));
        return n.weekPicker ? pe($[0], u2.value) : pe(g.value, u2.value);
      }
      return false;
    }
    return false;
  }, O2 = (u2) => Jn(e2.value, g.value, u2.value), q2 = () => n.modelAuto && Array.isArray(n.internalModelValue) ? !!n.internalModelValue[0] : false, K2 = () => n.modelAuto ? aa(n.internalModelValue) : true, ne = (u2) => {
    if (Array.isArray(e2.value) && e2.value.length || n.weekPicker)
      return false;
    const $ = n.range ? !k2(u2) && !k2(u2, false) : true;
    return !a3(u2.value) && !j(u2) && !(!u2.current && n.hideOffsetDates) && $;
  }, se = (u2) => n.range ? n.modelAuto ? q2() && j(u2) : false : j(u2), de = (u2) => {
    var $;
    return n.highlight ? t2(
      u2.value,
      ($ = n.arrMapValues) != null && $.highlightedDates ? n.arrMapValues.highlightedDates : n.highlight
    ) : false;
  }, ue = (u2) => a3(u2.value) && n.highlightDisabledDays === false, ve = (u2) => n.highlightWeekDays && n.highlightWeekDays.includes(u2.value.getDay()), V = (u2) => (n.range || n.weekPicker) && (!(m3.value.multiCalendars > 0) || u2.current) && K2() && !(!u2.current && n.hideOffsetDates) && !j(u2) ? O2(u2) : false, D2 = (u2) => {
    const { isRangeStart: $, isRangeEnd: l } = _(u2), v = n.range ? $ || l : false;
    return {
      dp__cell_offset: !u2.current,
      dp__pointer: !n.disabled && !(!u2.current && n.hideOffsetDates) && !a3(u2.value),
      dp__cell_disabled: a3(u2.value),
      dp__cell_highlight: !ue(u2) && (de(u2) || ve(u2)) && !se(u2) && !v,
      dp__cell_highlight_active: !ue(u2) && (de(u2) || ve(u2)) && se(u2),
      dp__today: !n.noToday && pe(u2.value, C.value) && u2.current
    };
  }, d3 = (u2) => ({
    dp__active_date: se(u2),
    dp__date_hover: ne(u2)
  }), N = (u2) => ({
    ...w2(u2),
    ...y3(u2),
    dp__range_between_week: V(u2) && n.weekPicker
  }), _ = (u2) => {
    const $ = m3.value.multiCalendars > 0 ? u2.current && k2(u2) && K2() : k2(u2) && K2(), l = m3.value.multiCalendars > 0 ? u2.current && k2(u2, false) && K2() : k2(u2, false) && K2();
    return { isRangeStart: $, isRangeEnd: l };
  }, w2 = (u2) => {
    const { isRangeStart: $, isRangeEnd: l } = _(u2);
    return {
      dp__range_start: $,
      dp__range_end: l,
      dp__range_between: V(u2) && !n.weekPicker,
      dp__date_hover_start: Q2(ne(u2), u2, true),
      dp__date_hover_end: Q2(ne(u2), u2, false)
    };
  }, y3 = (u2) => ({
    ...w2(u2),
    dp__cell_auto_range: B2(u2),
    dp__cell_auto_range_start: U(u2),
    dp__cell_auto_range_end: x2(u2)
  }), z2 = (u2) => n.range ? n.autoRange ? y3(u2) : n.modelAuto ? { ...d3(u2), ...w2(u2) } : w2(u2) : n.weekPicker ? N(u2) : d3(u2);
  return {
    setHoverDate: E2,
    clearHoverDate: S3,
    getDayClassData: (u2) => n.hideOffsetDates && !u2.current ? {} : {
      ...D2(u2),
      ...z2(u2),
      [n.dayClass ? n.dayClass(u2.value) : ""]: true,
      [n.calendarCellClassName]: !!n.calendarCellClassName
    }
  };
};
var rr = ["id", "onKeydown"];
var or = {
  key: 0,
  class: "dp__sidebar_left"
};
var sr = {
  key: 1,
  class: "dp__preset_ranges"
};
var ur = ["onClick"];
var ir = {
  key: 2,
  class: "dp__sidebar_right"
};
var dr = {
  key: 3,
  class: "dp__action_extra"
};
var cr = defineComponent({
  __name: "DatepickerMenu",
  props: {
    openOnTop: { type: Boolean, default: false },
    internalModelValue: { type: [Date, Array], default: null },
    arrMapValues: { type: Object, default: () => ({}) },
    ...ft
  },
  emits: [
    "close-picker",
    "select-date",
    "auto-apply",
    "time-update",
    "flow-step",
    "update-month-year",
    "invalid-select",
    "update:internal-model-value",
    "recalculate-position",
    "invalid-fixed-range",
    "tooltip-open",
    "tooltip-close",
    "time-picker-open",
    "time-picker-close",
    "am-pm-change",
    "range-start",
    "range-end"
  ],
  setup(e2, { expose: n, emit: a3 }) {
    const t2 = e2, s3 = computed(() => {
      const { openOnTop: h3, internalModelValue: W, arrMapValues: $e, ...Me } = t2;
      return Me;
    }), { setMenuFocused: m3, setShiftKey: g, control: C } = Qn(), { getCalendarDays: E2, defaults: S3 } = xe(t2), F = useSlots(), P = ref(null), c2 = reactive({
      timePicker: !!(!t2.enableTimePicker || t2.timePicker || t2.monthPicker),
      monthYearInput: !!t2.timePicker,
      calendar: false
    }), k2 = ref([]), Q2 = ref([]), j = ref(null), x2 = ref(null), B2 = ref(0), U = ref(false), O2 = ref(0);
    onMounted(() => {
      var W;
      U.value = true, !((W = t2.presetRanges) != null && W.length) && !F["left-sidebar"] && !F["right-sidebar"] && (ze(), window.addEventListener("resize", ze));
      const h3 = Te(x2);
      if (h3 && !t2.textInput && !t2.inline && (m3(true), ue()), h3) {
        const $e = (Me) => {
          t2.allowPreventDefault && Me.preventDefault(), Me.stopImmediatePropagation(), Me.stopPropagation();
        };
        h3.addEventListener("pointerdown", $e), h3.addEventListener("mousedown", $e);
      }
    }), onUnmounted(() => {
      window.removeEventListener("resize", ze);
    });
    const { arrowRight: q2, arrowLeft: K2, arrowDown: ne, arrowUp: se } = ct(), de = (h3) => {
      h3 || h3 === 0 ? Q2.value[h3].triggerTransition(
        N.value(h3),
        _.value(h3)
      ) : Q2.value.forEach(
        (W, $e) => W.triggerTransition(N.value($e), _.value($e))
      );
    }, ue = () => {
      const h3 = Te(x2);
      h3 && h3.focus({ preventScroll: true });
    }, ve = () => {
      var h3;
      (h3 = t2.flow) != null && h3.length && O2.value !== -1 && (O2.value += 1, a3("flow-step", O2.value), b2());
    }, V = () => {
      O2.value = -1;
    }, {
      calendars: D2,
      modelValue: d3,
      month: N,
      year: _,
      time: w2,
      updateTime: y3,
      updateMonthYear: z2,
      selectDate: f,
      getWeekNum: u2,
      monthYearSelect: $,
      handleScroll: l,
      handleArrow: v,
      handleSwipe: R2,
      getMarker: i2,
      selectCurrentDate: r,
      presetDateRange: Y2
    } = dl(t2, a3, ve, de, O2), { setHoverDate: le, clearHoverDate: Ae, getDayClassData: Se } = lr(d3, t2), ee = {
      modelValue: d3,
      month: N,
      year: _,
      time: w2,
      updateTime: y3,
      updateMonthYear: z2,
      selectDate: f,
      presetDateRange: Y2,
      handleMonthYearChange: (h3) => {
        k2.value[0] && k2.value[0].handleMonthYearChange(h3);
      }
    };
    watch(
      D2,
      () => {
        t2.openOnTop && setTimeout(() => {
          a3("recalculate-position");
        }, 0);
      },
      { deep: true }
    );
    const We = pt(F, "calendar"), Ie = pt(F, "action"), Re = pt(F, "timePicker"), Ze = pt(F, "monthYear"), wt = computed(() => t2.openOnTop ? "dp__arrow_bottom" : "dp__arrow_top"), Je = computed(() => Ja(t2.yearRange, t2.reverseYears)), nt = computed(() => Qa(t2.locale, t2.monthNameFormat)), ze = () => {
      const h3 = Te(P);
      h3 && (B2.value = h3.getBoundingClientRect().width);
    }, Z = computed(() => (h3) => E2(N.value(h3), _.value(h3))), oe = computed(
      () => S3.value.multiCalendars > 0 ? [...Array(S3.value.multiCalendars).keys()] : [0]
    ), re = computed(
      () => (h3) => h3 === 1
    ), Tt = computed(() => t2.monthPicker || t2.timePicker || t2.yearPicker), vt = computed(
      () => ({
        dp__menu_inner: true,
        dp__flex_display: S3.value.multiCalendars > 0
      })
    ), Bt = computed(() => ({
      dp__instance_calendar: S3.value.multiCalendars > 0
    })), At = computed(() => ({
      dp__menu_disabled: t2.disabled,
      dp__menu_readonly: t2.readonly
    })), Gt = computed(
      () => (h3) => qt(Z, h3)
    ), Zt = computed(
      () => ({
        dp__menu: true,
        dp__menu_index: !t2.inline,
        dp__relative: t2.inline,
        [t2.menuClassName]: !!t2.menuClassName
      })
    ), qt = (h3, W) => h3.value(W).map(($e) => ({
      ...$e,
      days: $e.days.map((Me) => (Me.marker = i2(Me), Me.classData = Se(Me), Me))
    })), Yt = (h3) => {
      h3.stopPropagation(), h3.stopImmediatePropagation();
    }, $n = () => {
      t2.escClose && a3("close-picker");
    }, Mn = (h3, W = false) => {
      f(h3, W), t2.spaceConfirm && a3("select-date");
    }, Vt = (h3) => {
      var W;
      (W = t2.flow) != null && W.length && (c2[h3] = true, Object.keys(c2).filter(($e) => !c2[$e]).length || b2());
    }, o = (h3, W, $e, Me, ...et) => {
      if (t2.flow[O2.value] === h3) {
        const J = Me ? W.value[0] : W.value;
        J && J[$e](...et);
      }
    }, b2 = () => {
      o("month", k2, "toggleMonthPicker", true, true), o("year", k2, "toggleYearPicker", true, true), o("calendar", j, "toggleTimePicker", false, false, true), o("time", j, "toggleTimePicker", false, true, true);
      const h3 = t2.flow[O2.value];
      (h3 === "hours" || h3 === "minutes" || h3 === "seconds") && o(h3, j, "toggleTimePicker", false, true, true, h3);
    }, X2 = (h3) => {
      if (t2.arrowNavigation) {
        if (h3 === "up")
          return se();
        if (h3 === "down")
          return ne();
        if (h3 === "left")
          return K2();
        if (h3 === "right")
          return q2();
      } else
        h3 === "left" || h3 === "up" ? v("left", 0, h3 === "up") : v("right", 0, h3 === "down");
    }, te = (h3) => {
      g(h3.shiftKey), !t2.disableMonthYearSelect && h3.code === "Tab" && h3.target.classList.contains("dp__menu") && C.value.shiftKeyInMenu && (h3.preventDefault(), h3.stopImmediatePropagation(), a3("close-picker"));
    }, De = () => {
      ue(), a3("time-picker-close");
    }, Qe = (h3) => {
      var W, $e, Me, et, J;
      (W = j.value) == null || W.toggleTimePicker(false, false), (Me = ($e = k2.value) == null ? void 0 : $e[h3]) == null || Me.toggleMonthPicker(false, false), (J = (et = k2.value) == null ? void 0 : et[h3]) == null || J.toggleYearPicker(false, false);
    };
    return n({
      updateMonthYear: z2,
      switchView: (h3, W = 0) => {
        var $e, Me, et, J, at;
        return h3 === "month" ? (Me = ($e = k2.value) == null ? void 0 : $e[W]) == null ? void 0 : Me.toggleMonthPicker(false, true) : h3 === "year" ? (J = (et = k2.value) == null ? void 0 : et[W]) == null ? void 0 : J.toggleYearPicker(false, true) : h3 === "time" ? (at = j.value) == null ? void 0 : at.toggleTimePicker(true, false) : Qe(W);
      }
    }), (h3, W) => {
      var $e;
      return openBlock(), createBlock(Transition, {
        appear: "",
        name: ($e = unref(S3).transitions) == null ? void 0 : $e.menuAppear,
        css: !!h3.transitions
      }, {
        default: withCtx(() => {
          var Me, et;
          return [
            createBaseVNode("div", {
              id: h3.uid ? `dp-menu-${h3.uid}` : void 0,
              tabindex: "0",
              ref_key: "dpMenuRef",
              ref: x2,
              role: "dialog",
              class: normalizeClass(Zt.value),
              onMouseleave: W[14] || (W[14] = //@ts-ignore
              (...J) => unref(Ae) && unref(Ae)(...J)),
              onClick: Yt,
              onKeydown: [
                withKeys($n, ["esc"]),
                W[15] || (W[15] = withKeys(withModifiers((J) => X2("left"), ["prevent"]), ["left"])),
                W[16] || (W[16] = withKeys(withModifiers((J) => X2("up"), ["prevent"]), ["up"])),
                W[17] || (W[17] = withKeys(withModifiers((J) => X2("down"), ["prevent"]), ["down"])),
                W[18] || (W[18] = withKeys(withModifiers((J) => X2("right"), ["prevent"]), ["right"])),
                te
              ]
            }, [
              (h3.disabled || h3.readonly) && h3.inline ? (openBlock(), createElementBlock("div", {
                key: 0,
                class: normalizeClass(At.value)
              }, null, 2)) : createCommentVNode("", true),
              !h3.inline && !h3.teleportCenter ? (openBlock(), createElementBlock("div", {
                key: 1,
                class: normalizeClass(wt.value)
              }, null, 2)) : createCommentVNode("", true),
              createBaseVNode("div", {
                class: normalizeClass({
                  dp__menu_content_wrapper: ((Me = h3.presetRanges) == null ? void 0 : Me.length) || !!h3.$slots["left-sidebar"] || !!h3.$slots["right-sidebar"]
                })
              }, [
                h3.$slots["left-sidebar"] ? (openBlock(), createElementBlock("div", or, [
                  renderSlot(h3.$slots, "left-sidebar", normalizeProps(guardReactiveProps(ee)))
                ])) : createCommentVNode("", true),
                (et = h3.presetRanges) != null && et.length ? (openBlock(), createElementBlock("div", sr, [
                  (openBlock(true), createElementBlock(Fragment, null, renderList(h3.presetRanges, (J, at) => (openBlock(), createElementBlock("div", {
                    key: at,
                    style: normalizeStyle(J.style || {}),
                    class: "dp__preset_range",
                    onClick: (fe) => unref(Y2)(J.range, !!J.slot)
                  }, [
                    J.slot ? renderSlot(h3.$slots, J.slot, {
                      key: 0,
                      presetDateRange: unref(Y2),
                      label: J.label,
                      range: J.range
                    }) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
                      createTextVNode(toDisplayString(J.label), 1)
                    ], 64))
                  ], 12, ur))), 128))
                ])) : createCommentVNode("", true),
                createBaseVNode("div", {
                  class: "dp__instance_calendar",
                  ref_key: "calendarWrapperRef",
                  ref: P,
                  role: "document"
                }, [
                  createBaseVNode("div", {
                    class: normalizeClass(vt.value)
                  }, [
                    (openBlock(true), createElementBlock(Fragment, null, renderList(oe.value, (J, at) => (openBlock(), createElementBlock("div", {
                      key: J,
                      class: normalizeClass(Bt.value)
                    }, [
                      !h3.disableMonthYearSelect && !h3.timePicker ? (openBlock(), createBlock(zl, mergeProps({
                        key: 0,
                        ref_for: true,
                        ref: (fe) => {
                          fe && (k2.value[at] = fe);
                        },
                        months: nt.value,
                        years: Je.value,
                        month: unref(N)(J),
                        year: unref(_)(J),
                        instance: J,
                        "internal-model-value": e2.internalModelValue
                      }, s3.value, {
                        onMount: W[0] || (W[0] = (fe) => Vt("monthYearInput")),
                        onResetFlow: V,
                        onUpdateMonthYear: (fe) => unref(z2)(J, fe),
                        onMonthYearSelect: unref($),
                        onOverlayClosed: ue
                      }), createSlots({ _: 2 }, [
                        renderList(unref(Ze), (fe, ra) => ({
                          name: fe,
                          fn: withCtx((Xt) => [
                            renderSlot(h3.$slots, fe, normalizeProps(guardReactiveProps(Xt)))
                          ])
                        }))
                      ]), 1040, ["months", "years", "month", "year", "instance", "internal-model-value", "onUpdateMonthYear", "onMonthYearSelect"])) : createCommentVNode("", true),
                      createVNode(Ol, mergeProps({
                        ref_for: true,
                        ref: (fe) => {
                          fe && (Q2.value[at] = fe);
                        },
                        "specific-mode": Tt.value,
                        "get-week-num": unref(u2),
                        instance: J,
                        "mapped-dates": Gt.value(J),
                        month: unref(N)(J),
                        year: unref(_)(J)
                      }, s3.value, {
                        onSelectDate: (fe) => unref(f)(fe, !re.value(J)),
                        onHandleSpace: (fe) => Mn(fe, !re.value(J)),
                        onSetHoverDate: W[1] || (W[1] = (fe) => unref(le)(fe)),
                        onHandleScroll: (fe) => unref(l)(fe, J),
                        onHandleSwipe: (fe) => unref(R2)(fe, J),
                        onMount: W[2] || (W[2] = (fe) => Vt("calendar")),
                        onResetFlow: V,
                        onTooltipOpen: W[3] || (W[3] = (fe) => h3.$emit("tooltip-open", fe)),
                        onTooltipClose: W[4] || (W[4] = (fe) => h3.$emit("tooltip-close", fe))
                      }), createSlots({ _: 2 }, [
                        renderList(unref(We), (fe, ra) => ({
                          name: fe,
                          fn: withCtx((Xt) => [
                            renderSlot(h3.$slots, fe, normalizeProps(guardReactiveProps({ ...Xt })))
                          ])
                        }))
                      ]), 1040, ["specific-mode", "get-week-num", "instance", "mapped-dates", "month", "year", "onSelectDate", "onHandleSpace", "onHandleScroll", "onHandleSwipe"])
                    ], 2))), 128))
                  ], 2),
                  createBaseVNode("div", null, [
                    h3.$slots["time-picker"] ? renderSlot(h3.$slots, "time-picker", normalizeProps(mergeProps({ key: 0 }, { time: unref(w2), updateTime: unref(y3) }))) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
                      h3.enableTimePicker && !h3.monthPicker && !h3.weekPicker ? (openBlock(), createBlock(ar, mergeProps({
                        key: 0,
                        ref_key: "timePickerRef",
                        ref: j,
                        hours: unref(w2).hours,
                        minutes: unref(w2).minutes,
                        seconds: unref(w2).seconds,
                        "internal-model-value": e2.internalModelValue
                      }, s3.value, {
                        onMount: W[5] || (W[5] = (J) => Vt("timePicker")),
                        "onUpdate:hours": W[6] || (W[6] = (J) => unref(y3)(J)),
                        "onUpdate:minutes": W[7] || (W[7] = (J) => unref(y3)(J, false)),
                        "onUpdate:seconds": W[8] || (W[8] = (J) => unref(y3)(J, false, true)),
                        onResetFlow: V,
                        onOverlayClosed: De,
                        onOverlayOpened: W[9] || (W[9] = (J) => h3.$emit("time-picker-open", J)),
                        onAmPmChange: W[10] || (W[10] = (J) => h3.$emit("am-pm-change", J))
                      }), createSlots({ _: 2 }, [
                        renderList(unref(Re), (J, at) => ({
                          name: J,
                          fn: withCtx((fe) => [
                            renderSlot(h3.$slots, J, normalizeProps(guardReactiveProps(fe)))
                          ])
                        }))
                      ]), 1040, ["hours", "minutes", "seconds", "internal-model-value"])) : createCommentVNode("", true)
                    ], 64))
                  ])
                ], 512),
                h3.$slots["right-sidebar"] ? (openBlock(), createElementBlock("div", ir, [
                  renderSlot(h3.$slots, "right-sidebar", normalizeProps(guardReactiveProps(ee)))
                ])) : createCommentVNode("", true),
                h3.$slots["action-extra"] ? (openBlock(), createElementBlock("div", dr, [
                  h3.$slots["action-extra"] ? renderSlot(h3.$slots, "action-extra", {
                    key: 0,
                    selectCurrentDate: unref(r)
                  }) : createCommentVNode("", true)
                ])) : createCommentVNode("", true)
              ], 2),
              !h3.autoApply || h3.keepActionRow ? (openBlock(), createBlock(Ml, mergeProps({
                key: 2,
                "menu-mount": U.value,
                "calendar-width": B2.value,
                "internal-model-value": e2.internalModelValue
              }, s3.value, {
                onClosePicker: W[11] || (W[11] = (J) => h3.$emit("close-picker")),
                onSelectDate: W[12] || (W[12] = (J) => h3.$emit("select-date")),
                onInvalidSelect: W[13] || (W[13] = (J) => h3.$emit("invalid-select")),
                onSelectNow: unref(r)
              }), createSlots({ _: 2 }, [
                renderList(unref(Ie), (J, at) => ({
                  name: J,
                  fn: withCtx((fe) => [
                    renderSlot(h3.$slots, J, normalizeProps(guardReactiveProps({ ...fe })))
                  ])
                }))
              ]), 1040, ["menu-mount", "calendar-width", "internal-model-value", "onSelectNow"])) : createCommentVNode("", true)
            ], 42, rr)
          ];
        }),
        _: 3
      }, 8, ["name", "css"]);
    };
  }
});
var fr = typeof window < "u" ? window : void 0;
var un = () => {
};
var vr = (e2) => getCurrentScope() ? (onScopeDispose(e2), true) : false;
var mr = (e2, n, a3, t2) => {
  if (!e2)
    return un;
  let s3 = un;
  const m3 = watch(
    () => unref(e2),
    (C) => {
      s3(), C && (C.addEventListener(n, a3, t2), s3 = () => {
        C.removeEventListener(n, a3, t2), s3 = un;
      });
    },
    { immediate: true, flush: "post" }
  ), g = () => {
    m3(), s3();
  };
  return vr(g), g;
};
var yr = (e2, n, a3, t2 = {}) => {
  const { window: s3 = fr, event: m3 = "pointerdown" } = t2;
  return s3 ? mr(s3, m3, (C) => {
    const E2 = Te(e2), S3 = Te(n);
    !E2 || !S3 || E2 === C.target || C.composedPath().includes(E2) || C.composedPath().includes(S3) || a3(C);
  }, { passive: true }) : void 0;
};
var gr = defineComponent({
  __name: "VueDatePicker",
  props: {
    ...ft
  },
  emits: [
    "update:model-value",
    "text-submit",
    "closed",
    "cleared",
    "open",
    "focus",
    "blur",
    "internal-model-change",
    "recalculate-position",
    "flow-step",
    "update-month-year",
    "invalid-select",
    "invalid-fixed-range",
    "tooltip-open",
    "tooltip-close",
    "time-picker-open",
    "time-picker-close",
    "am-pm-change",
    "range-start",
    "range-end"
  ],
  setup(e2, { expose: n, emit: a3 }) {
    const t2 = e2, s3 = useSlots(), m3 = ref(false), g = toRef(t2, "modelValue"), C = toRef(t2, "timezone"), E2 = ref(null), S3 = ref(null), F = ref(false), P = ref(null), c2 = reactive({
      disabledDates: null,
      allowedDates: null,
      highlightedDates: null
    }), { setMenuFocused: k2, setShiftKey: Q2 } = Qn(), { clearArrowNav: j } = ct(), { validateDate: x2, isValidTime: B2, defaults: U, mapDatesArrToMap: O2 } = xe(t2);
    onMounted(() => {
      N(t2.modelValue), t2.inline || (V(P.value).addEventListener("scroll", $), window.addEventListener("resize", l)), t2.inline && (m3.value = true), O2(c2);
    }), onUnmounted(() => {
      if (!t2.inline) {
        const Z = V(P.value);
        Z && Z.removeEventListener("scroll", $), window.removeEventListener("resize", l);
      }
    });
    const q2 = pt(s3, "all", t2.presetRanges), K2 = pt(s3, "input");
    watch(
      [g, C],
      () => {
        N(g.value);
      },
      { deep: true }
    );
    const { openOnTop: ne, menuStyle: se, resetPosition: de, setMenuPosition: ue, setInitialPosition: ve, getScrollableParent: V } = vl(E2, S3, a3, t2), {
      inputValue: D2,
      internalModelValue: d3,
      parseExternalModelValue: N,
      emitModelValue: _,
      formatInputValue: w2,
      checkBeforeEmit: y3
    } = cl(a3, t2, F), z2 = computed(
      () => ({
        dp__main: true,
        dp__theme_dark: t2.dark,
        dp__theme_light: !t2.dark,
        dp__flex_display: t2.inline,
        dp__flex_display_with_input: t2.inlineWithInput
      })
    ), f = computed(() => t2.dark ? "dp__theme_dark" : "dp__theme_light"), u2 = computed(() => t2.teleport ? {
      to: typeof t2.teleport == "boolean" ? "body" : t2.teleport,
      disabled: t2.inline
    } : { class: "dp__outer_menu_wrap" }), $ = () => {
      m3.value && (t2.closeOnScroll ? be() : ue());
    }, l = () => {
      m3.value && ue();
    }, v = async () => {
      var Z, oe, re;
      !t2.disabled && !t2.readonly && (de(), await nextTick(), m3.value = true, await nextTick(), ve(), await nextTick(), ue(), delete se.value.opacity, (Z = U.value.transitions) != null && Z.menuAppear || (re = (oe = E2.value) == null ? void 0 : oe.$el) == null || re.classList.add("dp__menu_transitioned"), m3.value && a3("open"), m3.value || Se(), N(t2.modelValue));
    }, R2 = () => {
      D2.value = "", Se(), a3("update:model-value", null), a3("cleared"), t2.closeOnClearValue && be();
    }, i2 = () => {
      const Z = d3.value;
      return !Z || !Array.isArray(Z) && x2(Z) ? true : Array.isArray(Z) ? Z.length === 2 && x2(Z[0]) && x2(Z[1]) ? true : x2(Z[0]) : false;
    }, r = () => {
      y3() && i2() ? (_(), be()) : a3("invalid-select", d3.value);
    }, Y2 = (Z) => {
      le(), _(), t2.closeOnAutoApply && !Z && be();
    }, le = () => {
      S3.value && t2.textInput && S3.value.setParsedDate(d3.value);
    }, Ae = (Z = false) => {
      t2.autoApply && B2(d3.value) && i2() && (t2.range && Array.isArray(d3.value) ? (t2.partialRange || d3.value.length === 2) && Y2(Z) : Y2(Z));
    }, Se = () => {
      t2.textInput || (d3.value = null);
    }, be = () => {
      t2.inline || (m3.value && (m3.value = false, k2(false), Q2(false), j(), a3("closed"), ve(), D2.value && N(g.value)), Se());
    }, ee = (Z, oe) => {
      if (!Z) {
        d3.value = null;
        return;
      }
      d3.value = Z, oe && (r(), a3("text-submit"));
    }, We = () => {
      t2.autoApply && B2(d3.value) && _(), le();
    }, Ie = () => m3.value ? be() : v(), Re = (Z) => {
      d3.value = Z;
    }, Ze = () => {
      t2.textInput && (F.value = true, w2()), a3("focus");
    }, wt = () => {
      t2.textInput && (F.value = false, N(t2.modelValue)), a3("blur");
    }, Je = (Z) => {
      E2.value && E2.value.updateMonthYear(0, {
        month: Ln(Z.month),
        year: Ln(Z.year)
      });
    }, nt = (Z) => {
      N(Z || t2.modelValue);
    }, ze = (Z, oe) => {
      var re;
      (re = E2.value) == null || re.switchView(Z, oe);
    };
    return yr(
      E2,
      S3,
      t2.onClickOutside ? () => t2.onClickOutside(i2) : be
    ), n({
      closeMenu: be,
      selectDate: r,
      clearValue: R2,
      openMenu: v,
      onScroll: $,
      formatInputValue: w2,
      // exposed for testing purposes
      updateInternalModelValue: Re,
      // modify internal modelValue
      setMonthYear: Je,
      parseModel: nt,
      switchView: ze
    }), (Z, oe) => (openBlock(), createElementBlock("div", {
      class: normalizeClass(z2.value),
      ref_key: "pickerWrapperRef",
      ref: P
    }, [
      createVNode(wl, mergeProps({
        ref_key: "inputRef",
        ref: S3,
        "is-menu-open": m3.value,
        "input-value": unref(D2),
        "onUpdate:inputValue": oe[0] || (oe[0] = (re) => isRef(D2) ? D2.value = re : null)
      }, Z.$props, {
        onClear: R2,
        onOpen: v,
        onSetInputDate: ee,
        onSetEmptyDate: unref(_),
        onSelectDate: r,
        onToggle: Ie,
        onClose: be,
        onFocus: Ze,
        onBlur: wt,
        onRealBlur: oe[1] || (oe[1] = (re) => F.value = false)
      }), createSlots({ _: 2 }, [
        renderList(unref(K2), (re, Tt) => ({
          name: re,
          fn: withCtx((vt) => [
            renderSlot(Z.$slots, re, normalizeProps(guardReactiveProps(vt)))
          ])
        }))
      ]), 1040, ["is-menu-open", "input-value", "onSetEmptyDate"]),
      m3.value ? (openBlock(), createBlock(resolveDynamicComponent(Z.teleport ? Teleport : "div"), normalizeProps(mergeProps({ key: 0 }, u2.value)), {
        default: withCtx(() => [
          m3.value ? (openBlock(), createBlock(cr, mergeProps({
            key: 0,
            ref_key: "dpMenuRef",
            ref: E2,
            class: f.value,
            style: Z.inline ? void 0 : unref(se),
            "open-on-top": unref(ne),
            "arr-map-values": c2
          }, Z.$props, {
            "internal-model-value": unref(d3),
            "onUpdate:internalModelValue": oe[2] || (oe[2] = (re) => isRef(d3) ? d3.value = re : null),
            onClosePicker: be,
            onSelectDate: r,
            onAutoApply: Ae,
            onTimeUpdate: We,
            onFlowStep: oe[3] || (oe[3] = (re) => Z.$emit("flow-step", re)),
            onUpdateMonthYear: oe[4] || (oe[4] = (re) => Z.$emit("update-month-year", re)),
            onInvalidSelect: oe[5] || (oe[5] = (re) => Z.$emit("invalid-select", unref(d3))),
            onInvalidFixedRange: oe[6] || (oe[6] = (re) => Z.$emit("invalid-fixed-range", re)),
            onRecalculatePosition: unref(ue),
            onTooltipOpen: oe[7] || (oe[7] = (re) => Z.$emit("tooltip-open", re)),
            onTooltipClose: oe[8] || (oe[8] = (re) => Z.$emit("tooltip-close", re)),
            onTimePickerOpen: oe[9] || (oe[9] = (re) => Z.$emit("time-picker-open", re)),
            onTimePickerClose: oe[10] || (oe[10] = (re) => Z.$emit("time-picker-close", re)),
            onAmPmChange: oe[11] || (oe[11] = (re) => Z.$emit("am-pm-change", re)),
            onRangeStart: oe[12] || (oe[12] = (re) => Z.$emit("range-start", re)),
            onRangeEnd: oe[13] || (oe[13] = (re) => Z.$emit("range-end", re))
          }), createSlots({ _: 2 }, [
            renderList(unref(q2), (re, Tt) => ({
              name: re,
              fn: withCtx((vt) => [
                renderSlot(Z.$slots, re, normalizeProps(guardReactiveProps({ ...vt })))
              ])
            }))
          ]), 1040, ["class", "style", "open-on-top", "arr-map-values", "internal-model-value", "onRecalculatePosition"])) : createCommentVNode("", true)
        ]),
        _: 3
      }, 16)) : createCommentVNode("", true)
    ], 2));
  }
});
var la = (() => {
  const e2 = gr;
  return e2.install = (n) => {
    n.component("Vue3DatePicker", e2);
  }, e2;
})();
var hr = Object.freeze(Object.defineProperty({
  __proto__: null,
  default: la
}, Symbol.toStringTag, { value: "Module" }));
Object.entries(hr).forEach(([e2, n]) => {
  e2 !== "default" && (la[e2] = n);
});
export {
  la as default
};
//# sourceMappingURL=@vuepic_vue-datepicker.js.map
